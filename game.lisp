;;; game.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl
(cl:progn
 (cl:eval-when (:compile-toplevel) (sb-ext:restrict-compiler-policy 'cl:debug 0 1))
 (cl:declaim (cl:optimize (sb-c:store-coverage-data 0))))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.GAME")
    (cl:defpackage "CL-PROTOBUFS.GAME" (:use)
                   (:local-nicknames (#:pi #:cl-protobufs.implementation)))))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.GAME-RPC")
    (cl:defpackage "CL-PROTOBUFS.GAME-RPC" (:use)
                   (:local-nicknames (#:pi #:cl-protobufs.implementation)))))

(cl:in-package "CL-PROTOBUFS.GAME")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:define-schema 'game
    :syntax :proto3
    :package "game")
)


;;; Top-Level enums

(pi:define-enum fs-boss-stronghold-event
    (:name "FSBossStrongholdEvent")
  (ready :index 0)
  (start :index 1)
  (finish :index 2))

(pi:define-enum weekend-party-gift-status
    ()
  (unreceived :index 0)
  (received :index 1))

(pi:define-enum weekend-day
    ()
  (unknown :index 0)
  (friday :index 1)
  (saturday :index 2)
  (sunday :index 3))

;;; Top-Level messages

(pi:define-message game-server-info-req
    ())

(pi:define-message game-server-info-res
    ()
  ;; Fields
  (server-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "serverTime"))

(pi:define-message game-ping-req
    ())

(pi:define-message game-log-out-req
    ())

(pi:define-message game-log-out-res
    ())

(pi:define-message game-login-req
    ()
  ;; Fields
  (account
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "account")
  (platform
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "platform")
  (open-id
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "openId")
  (token
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "token")
  (client-ver
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "clientVer")
  (ip
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "ip"))

(pi:define-message game-login-res
    ()
  ;; Fields
  (player
   :index 1 :type player :kind :message :label (:optional) :json-name "player")
  (item-list
   :index 2 :type item :kind :message :label (:repeated :list) :json-name "itemList")
  (resource-info
   :index 3 :type resource :kind :message :label (:optional) :json-name "resourceInfo")
  (hero-list
   :index 4 :type hero-info :kind :message :label (:repeated :list) :json-name "heroList")
  (last-hook-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lastHookTime")
  (quik-hook-fresh-time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "quikHookFreshTime")
  (quik-hook-num
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "quikHookNum")
  (auto-dismiss
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "autoDismiss")
  (guild-id
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildId")
  (guild-limit-time
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildLimitTime")
  (login-time
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "loginTime")
  (total-manual-score
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "totalManualScore")
  (team-level
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamLevel")
  (server-time
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "serverTime")
  (first-charge-reward
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "firstChargeReward")
  (charge-infos
   :index 19 :type charge-info :kind :message :label (:repeated :list) :json-name "chargeInfos")
  (server-time-zone
   :index 20 :type cl:string :kind :scalar :label (:optional) :json-name "serverTimeZone")
  (ban-flag
   :index 21 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "banFlag")
  (ban-time
   :index 22 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "banTime")
  (ban-type
   :index 23 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "banType")
  (ban-msg
   :index 24 :type cl:string :kind :scalar :label (:optional) :json-name "banMsg")
  (block-flag
   :index 25 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blockFlag")
  (block-time
   :index 26 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blockTime")
  (block-type
   :index 27 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blockType")
  (block-msg
   :index 28 :type cl:string :kind :scalar :label (:optional) :json-name "blockMsg")
  (user-data
   :index 29 :type cl:string :kind :scalar :label (:optional) :json-name "userData")
  (garden-level
   :index 30 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenLevel")
  (hero-bag-buy-num
   :index 31 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroBagBuyNum")
  (hero-bag-ext-num
   :index 32 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroBagExtNum")
  (create-time
   :index 33 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "createTime")
  (rename-num
   :index 34 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "renameNum")
  (item-buy-num
   :index 35 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemBuyNum")
  (token-flag
   :index 36 :type cl:string :kind :scalar :label (:optional) :json-name "tokenFlag")
  (server-start-time
   :index 37 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "serverStartTime")
  (logout-time
   :index 38 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "logoutTime")
  (title
   :index 39 :type user-title :kind :message :label (:optional) :json-name "title"))

(pi:define-message game-item-req
    ())

(pi:define-message game-item-res
    ()
  ;; Fields
  (item-list
   :index 1 :type item :kind :message :label (:repeated :list) :json-name "itemList"))

(pi:define-message game-scene-block-req
    ())

(pi:define-message game-scene-block-res
    ()
  ;; Fields
  (chapter
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "chapter")
  (scene-block
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sceneBlock"))

(pi:define-message game-finish-scene-block-req
    ()
  ;; Fields
  (chapter
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "chapter")
  (scene-block
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sceneBlock")
  (battle-valid
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "BattleKey"))

(pi:define-message game-gm-req
    ()
  ;; Fields
  (gm-string
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "gmString")
  (arg-list
   :index 2 :type cl:string :kind :scalar :label (:repeated :list) :json-name "argList"))

(pi:define-message game-gm-res
    ()
  ;; Fields
  (code
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "code")
  (result
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "result"))

(pi:define-message game-task-req
    ())

(pi:define-message game-task-res
    ()
  ;; Fields
  (task-list
   :index 2 :type task :kind :message :label (:repeated :list) :json-name "taskList"))

(pi:define-message game-finish-task-req
    ()
  ;; Fields
  (task
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "task"))

(pi:define-message game-finish-task-res
    ()
  ;; Fields
  (task
   :index 1 :type task :kind :message :label (:optional) :json-name "task"))

(pi:define-message game-hero-req
    ())

(pi:define-message game-hero-res
    ()
  ;; Fields
  (hero-list
   :index 1 :type hero-info :kind :message :label (:repeated :list) :json-name "heroList"))

(pi:define-message game-update-task-res
    ()
  ;; Fields
  (task
   :index 1 :type task :kind :message :label (:optional) :json-name "task"))

(pi:define-message game-item-upadte-res
    ()
  ;; Fields
  (item-list
   :index 1 :type item :kind :message :label (:repeated :list) :json-name "itemList")
  (delete-item-id-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "deleteItemIdList")
  (add-item-ist
   :index 3 :type item :kind :message :label (:repeated :list) :json-name "addItemIst"))

(pi:define-message game-hook-reward-req
    ())

(pi:define-message game-hook-reward-res
    ()
  ;; Fields
  (last-hook-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lastHookTime"))

(pi:define-message game-resource-upadte-res
    ()
  ;; Fields
  (resource-info
   :index 1 :type resource :kind :message :label (:optional) :json-name "resourceInfo"))

(pi:define-message game-shop-fresh-req
    ()
  ;; Fields
  (shop-name
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shopName"))

(pi:define-message game-shop-req
    ()
  ;; Fields
  (shop-name
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shopName"))

(pi:define-message game-shop-res
    ()
  ;; Fields
  (shop-info
   :index 1 :type shop :kind :message :label (:optional) :json-name "shopInfo"))

(pi:define-message game-error-report-res
    ()
  ;; Fields
  (report-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "reportId")
  (tag-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "tagList"))

(pi:define-message game-shop-config-req
    ()
  ;; Fields
  (garden-shop
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenShop"))

(pi:define-message game-shop-config-res
    ()
  ;; Fields
  (shop-config-list
   :index 1 :type shop-config :kind :message :label (:repeated :list) :json-name "shopConfigList"))

(pi:define-message game-buy-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (shop-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shopType")
  (buy-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyNum")
  (float-list
   :index 4 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList")
  (is-auto
   :index 5 :type cl:boolean :kind :scalar :label (:optional) :json-name "isAuto"))

(pi:define-message game-reward-res
    ()
  ;; Fields
  (reward-from
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardFrom")
  (item-list
   :index 2 :type reward-item :kind :message :label (:repeated :list) :json-name "itemList")
  (resource-list
   :index 3 :type reward-resource :kind :message :label (:repeated :list) :json-name "resourceList")
  (hero-list
   :index 4 :type reward-hero :kind :message :label (:repeated :list) :json-name "heroList")
  (buff-list
   :index 5 :type reward-buff :kind :message :label (:repeated :list) :json-name "buffList")
  (garden-item-list
   :index 6 :type reward-item :kind :message :label (:repeated :list) :json-name "gardenItemList")
  (pet-list
   :index 7 :type reward-pet :kind :message :label (:repeated :list) :json-name "petList"))

(pi:define-message game-quik-hook-reward-req
    ())

(pi:define-message game-quik-hook-reward-res
    ()
  ;; Fields
  (quik-hook-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "quikHookNum")
  (last-hook-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lastHookTime")
  (quik-hook-fresh-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "quikHookFreshTime"))

(pi:define-message game-usr-card-info-req
    ()
  ;; Fields
  (is-pet
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isPet"))

(pi:define-message game-usr-card-info-res
    ()
  ;; Fields
  (total-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "totalNum")
  (normal-num-tody
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "normalNumTody")
  (race-num-tody
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "raceNumTody")
  (friendship-num-tody
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "friendshipNumTody")
  (refresh-race
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshRace")
  (open-race
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "openRace")
  (get-reward-progress
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getRewardProgress")
  (star-hero
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "starHero")
  (star-refresh-items
   :index 9 :type reward-item :kind :message :label (:repeated :list) :json-name "starRefreshItems")
  (refresh-race-time
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshRaceTime")
  (single-friendship-num-tody
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "singleFriendshipNumTody")
  (hero-id-list
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroIdList")
  (single-normal-num-tody
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "singleNormalNumTody")
  (not-purple-num
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "notPurpleNum")
  (pet-total-num
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petTotalNum")
  (pet-today-num
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petTodayNum")
  (pet-not-js-num
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petNotJsNum")
  (pet-not-zs-num
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petNotZsNum")
  (pet-reward-num
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petRewardNum")
  (is-pet
   :index 20 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isPet")
  (today-free-num
   :index 21 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayFreeNum")
  (today-free-time
   :index 22 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayFreeTime"))

(pi:define-message game-get-card-req
    ()
  ;; Fields
  (get-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getType")
  (card-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cardType"))

(pi:define-message game-get-card-res
    ()
  ;; Fields
  (get-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getNum")
  (get-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getType")
  (total-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "totalNum")
  (new-heros
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "newHeros")
  (normal-num-tody
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "normalNumTody")
  (race-num-tody
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "raceNumTody")
  (friendship-num-tody
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "friendshipNumTody")
  (single-friendship-num-tody
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "singleFriendshipNumTody")
  (hero-id-list
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroIdList")
  (single-normal-num-tody
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "singleNormalNumTody")
  (not-purple-num
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "notPurpleNum")
  (pet-total-num
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petTotalNum")
  (pet-today-num
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petTodayNum")
  (pet-not-js-num
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petNotJsNum")
  (pet-not-zs-num
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petNotZsNum")
  (pet-reward-num
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petRewardNum")
  (card-type
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cardType")
  (today-free-num
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayFreeNum")
  (today-free-time
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayFreeTime"))

(pi:define-message game-get-cardwish-req
    ())

(pi:define-message game-get-cardwish-res
    ()
  ;; Fields
  (card-list-list
   :index 1 :type card-wish :kind :message :label (:repeated :list) :json-name "cardListList"))

(pi:define-message game-update-cardwish-req
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (card-list-list
   :index 2 :type card-wish :kind :message :label (:repeated :list) :json-name "cardListList"))

(pi:define-message game-hero-list-req
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (team-types
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "teamTypes"))

(pi:define-message game-hero-list-res
    ()
  ;; Fields
  (hero-list
   :index 1 :type hero-base-info :kind :message :label (:repeated :list) :json-name "heroList"))

(pi:define-message game-hero-detail-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-hero-detail-res
    ()
  ;; Fields
  (hero-info
   :index 1 :type hero-info :kind :message :label (:optional) :json-name "heroInfo"))

(pi:define-message game-hero-up-lev-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (level-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "levelNum"))

(pi:define-message game-heroadd-equp-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (equp-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "equpIndex")
  (action
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "action")
  (update-eqp-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "updateEqpId"))

(pi:define-message game-use-item-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num")
  (float-list
   :index 3 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList")
  (multi-args
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "multiArgs")
  (sell
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sell"))

(pi:define-message game-equip-up-lev-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (use-id-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "useIdList")
  (use-num-list
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "useNumList"))

(pi:define-message game-equip-up-lev-res
    ()
  ;; Fields
  (equip-update-info
   :index 1 :type item :kind :message :label (:optional) :json-name "equipUpdateInfo"))

(pi:define-message game-rank-list-pk-req
    ())

(pi:define-message game-rank-list-pk-res
    ()
  ;; Fields
  (rank-player-list
   :index 1 :type rank-player :kind :message :label (:repeated :list) :json-name "rankPlayerList"))

(pi:define-message game-rank-list-pk-base-info-req
    ())

(pi:define-message game-rank-list-pk-base-info-res
    ()
  ;; Fields
  (my-rank-info
   :index 1 :type rank-player :kind :message :label (:optional) :json-name "myRankInfo")
  (next-fresh-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "nextFreshTime"))

(pi:define-message game-hero-rank-up-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (hero-id-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroIdList"))

(pi:define-message game-hero-rank-up-res
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (rank
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rank"))

(pi:define-message game-hero-dismiss-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroId"))

(pi:define-message game-hero-dismiss-res
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroId"))

(pi:define-message game-hero-reset-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message game-hero-back-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message game-hero-auto-dismiss-req
    ()
  ;; Fields
  (auto-dismiss
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "autoDismiss"))

(pi:define-message game-hero-auto-dismiss-res
    ()
  ;; Fields
  (auto-dismiss
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "autoDismiss"))

(pi:define-message game-hero-dismiss-reward-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroId"))

(pi:define-message game-hero-dismiss-reward-res
    ()
  ;; Fields
  (item-list
   :index 1 :type item :kind :message :label (:repeated :list) :json-name "itemList")
  (resource-list
   :index 2 :type reward-resource :kind :message :label (:repeated :list) :json-name "resourceList"))

(pi:define-message game-equip-rank-up-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-equip-rank-up-res
    ()
  ;; Fields
  (equip-update-info
   :index 1 :type item :kind :message :label (:optional) :json-name "equipUpdateInfo"))

(pi:define-message game-hero-exchage-equp-req
    ()
  ;; Fields
  (hero1-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hero1Id")
  (equp1-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "equp1Index")
  (hero2-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hero2Id")
  (equp2-index
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "equp2Index"))

(pi:define-message game-batch-hero-rank-up-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroId")
  (hero-id-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroIdList"))

(pi:define-message game-batch-hero-rank-up-res
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroId")
  (rank
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "rank"))

(pi:define-message game-free-hero-reset-req
    ())

(pi:define-message game-free-hero-reset-res
    ()
  ;; Fields
  (times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-update-star-hero-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message game-update-star-hero-res
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message game-get-card-reward-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (is-pet
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isPet"))

(pi:define-message game-get-card-reward-res
    ()
  ;; Fields
  (get-reward-progress
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getRewardProgress")
  (hero-id-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroIdList"))

(pi:define-message game-tower-record-req
    ()
  ;; Fields
  (tower-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerType")
  (tower-level
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "towerLevel"))

(pi:define-message game-tower-record-res
    ()
  ;; Fields
  (records
   :index 1 :type tower-record :kind :message :label (:repeated :list) :json-name "records"))

(pi:define-message game-tower-info-req
    ())

(pi:define-message game-tower-info-res
    ()
  ;; Fields
  (tower-all-level
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "towerAllLevel")
  (tower-human-level
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "towerHumanLevel")
  (tower-spirite-level
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "towerSpiriteLevel")
  (tower-devil-level
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "towerDevilLevel")
  (tower-all-star
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "towerAllStar")
  (tower-human-star
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "towerHumanStar")
  (tower-spirite-star
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "towerSpiriteStar")
  (tower-devil-star
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "towerDevilStar")
  (tower-rewards
   :index 13 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "towerRewards")
  (tower-all-floor-time
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerAllFloorTime")
  (tower-human-floor-time
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerHumanFloorTime")
  (tower-sprite-floor-time
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerSpriteFloorTime")
  (tower-devil-floor-time
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerDevilFloorTime")
  (sd-num
   :index 18 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "sdNum")
  (sd-buy-num
   :index 19 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "sdBuyNum"))

(pi:define-message game-tower-battle-req
    ()
  ;; Fields
  (tower-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerType")
  (tower-level
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "towerLevel")
  (skip-battle
   :index 3 :type cl:boolean :kind :scalar :label (:optional) :json-name "skipBattle")
  (battle-result
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "battleResult")
  (battle-info
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo")
  (battle-valid
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 7 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey")
  (star
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "star"))

(pi:define-message game-tower-battle-res
    ()
  ;; Fields
  (tower-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerType")
  (tower-level
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "towerLevel")
  (star
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "star"))

(pi:define-message game-tower-reward-req
    ()
  ;; Fields
  (reward-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardId"))

(pi:define-message game-tower-reward-res
    ()
  ;; Fields
  (reward-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardId"))

(pi:define-message game-tower-sd-req
    ()
  ;; Fields
  (num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-tower-sd-res
    ()
  ;; Fields
  (sd-num
   :index 18 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "sdNum"))

(pi:define-message game-tower-sd-buy-req
    ()
  ;; Fields
  (num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-tower-sd-buy-res
    ()
  ;; Fields
  (sd-buy-num
   :index 19 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "sdBuyNum"))

(pi:define-message game-rewar-task-req
    ())

(pi:define-message game-rewar-task-res
    ()
  ;; Fields
  (task-list
   :index 1 :type reward-task :kind :message :label (:repeated :list) :json-name "taskList")
  (refresh
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refresh")
  (emp-lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "empLev")
  (personal-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "personalNum")
  (team-num
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamNum"))

(pi:define-message game-rewar-task-refresh-req
    ())

(pi:define-message game-rewar-task-change-res
    ()
  ;; Fields
  (add-task-list
   :index 1 :type reward-task :kind :message :label (:repeated :list) :json-name "addTaskList")
  (mdy-task-list
   :index 2 :type reward-task :kind :message :label (:repeated :list) :json-name "mdyTaskList")
  (del-task-list
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "delTaskList")
  (emp-lev
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "empLev")
  (personal-num
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "personalNum")
  (team-num
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamNum"))

(pi:define-message game-start-rewar-task-req
    ()
  ;; Fields
  (infos
   :index 1 :type start-task-info :kind :message :label (:repeated :list) :json-name "infos"))

(pi:define-message game-finish-rewar-task-req
    ()
  ;; Fields
  (task-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "taskId"))

(pi:define-message game-query-friend-heros-req
    ())

(pi:define-message game-query-friend-heros-res
    ()
  ;; Fields
  (heros
   :index 1 :type put-hero :kind :message :label (:repeated :list) :json-name "heros"))

(pi:define-message game-hook-reward-show-req
    ())

(pi:define-message game-quick-hook-reward-show-req
    ())

(pi:define-message game-reward-show-res
    ()
  ;; Fields
  (reward-from
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardFrom")
  (item-list
   :index 2 :type reward-item :kind :message :label (:repeated :list) :json-name "itemList")
  (resource-list
   :index 3 :type reward-resource :kind :message :label (:repeated :list) :json-name "resourceList")
  (hero-list
   :index 4 :type reward-hero :kind :message :label (:repeated :list) :json-name "heroList")
  (last-hook-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lastHookTime")
  (quik-hook-fresh-time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "quikHookFreshTime")
  (quik-hook-num
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "quikHookNum"))

(pi:define-message game-get-mount-info-req
    ()
  ;; Fields
  (uid
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "uid")
  (hero-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message game-get-mount-info-res
    ()
  ;; Fields
  (result
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (mount-info
   :index 2 :type mount-info :kind :message :label (:optional) :json-name "mountInfo"))

(pi:define-message game-mount-levup-req
    ()
  ;; Fields
  (mount-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mountId"))

(pi:define-message game-mount-add-equip-req
    ()
  ;; Fields
  (mount-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mountId")
  (equip-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "equipIndex")
  (equip-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "equipId"))

(pi:define-message game-mount-equip-combind-req
    ()
  ;; Fields
  (mount-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mountId")
  (equip-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "equipIndex")
  (equip-cfgid
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "equipCfgid"))

(pi:define-message mount-batch-add
    (
     :name "mount_batch_add")
  ;; Fields
  (equip-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "equipIndex")
  (equip-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "equipId"))

(pi:define-message game-mount-batch-add-equip-req
    ()
  ;; Fields
  (mount-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mountId")
  (adds
   :index 2 :type mount-batch-add :kind :message :label (:repeated :list) :json-name "adds"))

(pi:define-message game-swing-list-req
    ())

(pi:define-message game-swing-list-res
    ()
  ;; Fields
  (swings
   :index 1 :type swing-info :kind :message :label (:repeated :list) :json-name "swings"))

(pi:define-message game-swing-levup-req
    ()
  ;; Fields
  (swing-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "swingId"))

(pi:define-message game-swing-levup-res
    ()
  ;; Fields
  (swing
   :index 1 :type swing-info :kind :message :label (:optional) :json-name "swing"))

(pi:define-message game-swing-create-res
    ()
  ;; Fields
  (swing
   :index 1 :type swing-info :kind :message :label (:optional) :json-name "swing"))

(pi:define-message game-swing-add-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (swing-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "swingId"))

(pi:define-message game-swing-add-res
    ()
  ;; Fields
  (swing
   :index 1 :type swing-info :kind :message :label (:repeated :list) :json-name "swing"))

(pi:define-message game-swing-remove-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message game-swing-remove-res
    ()
  ;; Fields
  (swing
   :index 1 :type swing-info :kind :message :label (:optional) :json-name "swing"))

(pi:define-message game-hook-change-req
    ())

(pi:define-message game-hook-change-res
    ()
  ;; Fields
  (last-hook-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lastHookTime")
  (quik-hook-fresh-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "quikHookFreshTime")
  (quik-hook-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "quikHookNum"))

(pi:define-message game-arena-list-req
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType"))

(pi:define-message game-arena-list-res
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (player-infos
   :index 2 :type player-base-info :kind :message :label (:repeated :list) :json-name "playerInfos"))

(pi:define-message game-arena-info-req
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType"))

(pi:define-message game-arena-info-res
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (info
   :index 2 :type arena-info :kind :message :label (:optional) :json-name "info"))

(pi:define-message game-arena-record-req
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType"))

(pi:define-message game-arena-record-res
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (records
   :index 2 :type arena-battle-record :kind :message :label (:repeated :list) :json-name "records"))

(pi:define-message game-teamp-pos-change-req
    ()
  ;; Fields
  (team-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamType")
  (pos-list
   :index 2 :type team-pos :kind :message :label (:repeated :list) :json-name "posList")
  (pet-skills
   :index 3 :type pet-skill :kind :message :label (:repeated :list) :json-name "petSkills"))

(pi:define-message game-teamp-pos-change-res
    ()
  ;; Fields
  (pos-change
   :index 1 :type team-pos :kind :message :label (:repeated :list) :json-name "posChange"))

(pi:define-message game-arena-open-res
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType"))

(pi:define-message game-arena-challenge-list-req
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType"))

(pi:define-message game-arena-challenge-list-res
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (player-infos
   :index 2 :type player-base-info :kind :message :label (:repeated :list) :json-name "playerInfos"))

(pi:define-message game-arena-battle-result-req
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (defend-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendId")
  (result
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (battle-info
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo")
  (battle-valid
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey")
  (defend-is-robot
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendIsRobot"))

(pi:define-message game-arena-rank-change-res
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (score
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "score"))

(pi:define-message game-arena-battle-start-req
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (defend-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendId")
  (defend-is-robot
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendIsRobot"))

(pi:define-message game-arena-battle-start-res
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (defender-team
   :index 2 :type battle-team :kind :message :label (:optional) :json-name "defenderTeam")
  (battle-key
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-arena-buy-req
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-arena-buy-res
    ()
  ;; Fields
  (arena-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (buy-today-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyTodayNum"))

(pi:define-message game-arena-progress-reward-req
    ()
  ;; Fields
  (stage
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "stage"))

(pi:define-message game-arena-progress-reward-res
    ())

(pi:define-message game-maze-info-req
    ())

(pi:define-message game-maze-info-res
    ()
  ;; Fields
  (scene
   :index 1 :type maze-scene :kind :message :label (:optional) :json-name "scene"))

(pi:define-message game-maze-attack-result-req
    ()
  ;; Fields
  (formations
   :index 1 :type formation :kind :message :label (:optional) :json-name "formations")
  (result
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (bna
   :index 3 :type hero-bloodnanger :kind :message :label (:repeated :list) :json-name "bna")
  (pos-index
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posIndex")
  (layer-index
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (map-index
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex")
  (bloods
   :index 8 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "bloods")
  (battle-valid
   :index 9 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 10 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-maze-stage-res
    ()
  ;; Fields
  (map-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex")
  (layer-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (pos
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "pos")
  (bna
   :index 4 :type hero-bloodnanger :kind :message :label (:repeated :list) :json-name "bna")
  (buffs
   :index 5 :type maze-buff :kind :message :label (:repeated :list) :json-name "buffs")
  (helpers
   :index 6 :type maze-helper :kind :message :label (:repeated :list) :json-name "helpers")
  (status
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (select-buffs
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "selectBuffs")
  (path
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "path")
  (bloods
   :index 10 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "bloods")
  (select-buff
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "selectBuff")
  (finish-buff
   :index 12 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "finishBuff")
  (reward-buff
   :index 13 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "rewardBuff")
  (cur-select-buff
   :index 14 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "curSelectBuff"))

(pi:define-message game-maze-select-buff-req
    ()
  ;; Fields
  (pos-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posIndex")
  (layer-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (map-index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex")
  (buff-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buffId"))

(pi:define-message game-maze-revive-req
    ()
  ;; Fields
  (pos-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posIndex")
  (layer-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (map-index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex"))

(pi:define-message game-maze-treat-req
    ()
  ;; Fields
  (pos-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posIndex")
  (layer-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (map-index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex"))

(pi:define-message game-maze-select-helper-req
    ()
  ;; Fields
  (pos-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posIndex")
  (layer-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (map-index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex")
  (helper-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "helperId"))

(pi:define-message game-maze-map-select-req
    ()
  ;; Fields
  (map-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex"))

(pi:define-message game-maze-buy-req
    ()
  ;; Fields
  (pos-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posIndex")
  (layer-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (map-index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex")
  (shop-item-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shopItemId"))

(pi:define-message game-maze-store-req
    ()
  ;; Fields
  (store
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "store"))

(pi:define-message game-maze-store-res
    ())

(pi:define-message game-maze-load-req
    ())

(pi:define-message game-maze-load-res
    ()
  ;; Fields
  (store
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "store"))

(pi:define-message game-maze-pass-req
    ()
  ;; Fields
  (pos-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posIndex")
  (layer-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (map-index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex"))

(pi:define-message game-maze-pass-reward-req
    ()
  ;; Fields
  (layer-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (map-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex"))

(pi:define-message game-maze-trail-select-req
    ()
  ;; Fields
  (buff-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buffId"))

(pi:define-message game-maze-trail-reward-req
    ()
  ;; Fields
  (buff-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buffId"))

(pi:define-message game-dia-buy-gold-req
    ())

(pi:define-message game-dia-buy-gold-res
    ()
  ;; Fields
  (list
   :index 1 :type dia-buy-gold :kind :message :label (:repeated :list) :json-name "list"))

(pi:define-message game-dia-buy-gold-receive-req
    ()
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-dia-buy-gold-receive-res
    ()
  ;; Fields
  (is-crit
   :index 1 :type cl:boolean :kind :scalar :label (:optional) :json-name "isCrit")
  (list
   :index 2 :type dia-buy-gold :kind :message :label (:repeated :list) :json-name "list"))

(pi:define-message dia-buy-gold
    ()
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-guild-list-req
    ()
  ;; Fields
  (guild-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildId")
  (like-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "likeName")
  (filter
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "filter"))

(pi:define-message game-guild-list-res
    ()
  ;; Fields
  (guilds
   :index 1 :type guild-base-info :kind :message :label (:repeated :list) :json-name "guilds"))

(pi:define-message game-guild-apply-list-req
    ())

(pi:define-message game-guild-apply-list-res
    ()
  ;; Fields
  (guild-id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "guildIdList"))

(pi:define-message game-guild-detail-req
    ()
  ;; Fields
  (guild-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildId")
  (flag-base-info
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagBaseInfo")
  (flag-member
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagMember")
  (flag-opt-log
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagOptLog")
  (flag-apply-info
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagApplyInfo")
  (flag-casting-info
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagCastingInfo")
  (flag-boss
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagBoss")
  (flag-copy
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagCopy"))

(pi:define-message game-guild-detail-res
    ()
  ;; Fields
  (base-info
   :index 1 :type guild-base-info :kind :message :label (:optional) :json-name "baseInfo")
  (members
   :index 2 :type player-base-info :kind :message :label (:repeated :list) :json-name "members")
  (logs
   :index 3 :type guild-opt-log :kind :message :label (:repeated :list) :json-name "logs")
  (applys
   :index 4 :type guild-apply-info :kind :message :label (:repeated :list) :json-name "applys")
  (casting-info
   :index 5 :type guild-casting-info :kind :message :label (:optional) :json-name "castingInfo")
  (boss-info
   :index 6 :type guild-boss-info :kind :message :label (:optional) :json-name "bossInfo")
  (copy-info
   :index 7 :type guild-copy-info :kind :message :label (:optional) :json-name "copyInfo"))

(pi:define-message game-create-guild-req
    ()
  ;; Fields
  (name
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (declar
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "declar")
  (channel
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "channel")
  (banner
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "banner"))

(pi:define-message game-create-guild-res
    ()
  ;; Fields
  (base-info
   :index 1 :type guild-base-info :kind :message :label (:optional) :json-name "baseInfo"))

(pi:define-message game-guild-setting-req
    ()
  ;; Fields
  (opt-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optType")
  (declar
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "declar")
  (notice
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "notice")
  (apply-cond
   :index 4 :type guild-apply-cond :kind :message :label (:optional) :json-name "applyCond")
  (banner
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "banner")
  (name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "name"))

(pi:define-message game-guild-setting-res
    ()
  ;; Fields
  (opt-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optType")
  (declar
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "declar")
  (notice
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "notice")
  (apply-cond
   :index 4 :type guild-apply-cond :kind :message :label (:optional) :json-name "applyCond")
  (banner
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "banner")
  (name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "name"))

(pi:define-message game-guild-apply-req
    ()
  ;; Fields
  (guild-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildId")
  (message
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "message"))

(pi:define-message game-guild-apply-res
    ()
  ;; Fields
  (guild-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildId")
  (guild-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "guildName")
  (status
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (apply-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "applyId")
  (apply-name
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "applyName"))

(pi:define-message game-guild-apply-reply-req
    ()
  ;; Fields
  (apply-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "applyId")
  (status
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (batch
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "batch"))

(pi:define-message game-guild-apply-reply-res
    ()
  ;; Fields
  (guild-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildId")
  (guild-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "guildName")
  (status
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (apply-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "applyId")
  (apply-name
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "applyName")
  (reply-user-id
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "replyUserId")
  (reply-user-name
   :index 7 :type cl:string :kind :scalar :label (:optional) :json-name "replyUserName")
  (reply-user-title
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "replyUserTitle"))

(pi:define-message game-guild-title-set-req
    ()
  ;; Fields
  (title
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "title")
  (newer-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "newerId")
  (older-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "olderId"))

(pi:define-message game-guild-title-set-res
    ()
  ;; Fields
  (title
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "title")
  (newer-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "newerId")
  (newer-name
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "newerName")
  (older-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "olderId")
  (older-name
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "olderName"))

(pi:define-message game-guild-remove-member-req
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId"))

(pi:define-message game-guild-remove-member-res
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "userName")
  (user-title
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userTitle")
  (opt-user-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optUserId")
  (opt-user-name
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "optUserName")
  (opt-title
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optTitle"))

(pi:define-message game-guild-upgrade-req
    ())

(pi:define-message game-guild-upgrade-res
    ()
  ;; Fields
  (opt-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optUserId")
  (opt-user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "optUserName")
  (opt-title
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optTitle")
  (lev
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (score
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "score"))

(pi:define-message game-guild-dissolve-req
    ())

(pi:define-message game-guild-dissolve-res
    ()
  ;; Fields
  (opt-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optUserId")
  (opt-user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "optUserName")
  (opt-title
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optTitle"))

(pi:define-message game-guild-quit-req
    ())

(pi:define-message game-guild-quit-res
    ()
  ;; Fields
  (opt-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optUserId")
  (opt-user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "optUserName")
  (opt-title
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optTitle")
  (newer-user-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "newerUserId")
  (newer-user-name
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "newerUserName")
  (newer-title
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "newerTitle"))

(pi:define-message game-guild-impeach-req
    ())

(pi:define-message game-guild-impeach-res
    ()
  ;; Fields
  (hasdidates
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasdidates"))

(pi:define-message game-guild-impeach-change-res
    ()
  ;; Fields
  (can-impeach
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "canImpeach")
  (candidates
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "candidates"))

(pi:define-message game-guild-impeach-result-res
    ()
  ;; Fields
  (new-president
   :index 1 :type player :kind :message :label (:optional) :json-name "newPresident")
  (old-president
   :index 2 :type player :kind :message :label (:optional) :json-name "oldPresident"))

(pi:define-message game-guild-signed-info-req
    ())

(pi:define-message game-guild-signed-info-res
    ()
  ;; Fields
  (signed-num-1
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signedNum1")
  (signed-num-2
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signedNum2")
  (signed-num-3
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signedNum3")
  (reward-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardNum"))

(pi:define-message game-guild-signed-req
    ()
  ;; Fields
  (signed-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signedType"))

(pi:define-message game-guild-signed-res
    ()
  ;; Fields
  (opt-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optUserId")
  (opt-user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "optUserName")
  (opt-title
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optTitle")
  (signed-type
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signedType")
  (signed-num
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signedNum"))

(pi:define-message game-guild-signed-reward-req
    ()
  ;; Fields
  (reward-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardId"))

(pi:define-message game-guild-signed-reward-res
    ()
  ;; Fields
  (opt-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optUserId")
  (opt-user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "optUserName")
  (opt-title
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optTitle")
  (reward-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardNum")
  (reward-id
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardId"))

(pi:define-message game-guild-resource-upadte-res
    ()
  ;; Fields
  (resource-info
   :index 1 :type guild-resource :kind :message :label (:optional) :json-name "resourceInfo"))

(pi:define-message game-guild-casting-info-req
    ())

(pi:define-message game-guild-casting-info-res
    ()
  ;; Fields
  (reward-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardNum")
  (casting-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "castingNum")
  (buy-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyNum"))

(pi:define-message game-guild-casting-req
    ()
  ;; Fields
  (part
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "part")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num")
  (addition
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "addition"))

(pi:define-message game-guild-casting-res
    ()
  ;; Fields
  (opt-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optUserId")
  (opt-user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "optUserName")
  (opt-title
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optTitle")
  (casting-info
   :index 4 :type guild-casting-info :kind :message :label (:optional) :json-name "castingInfo")
  (reward-num
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardNum")
  (casting-num
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "castingNum"))

(pi:define-message game-guild-casting-reward-req
    ()
  ;; Fields
  (reward-idx
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardIdx"))

(pi:define-message game-guild-casting-reward-res
    ()
  ;; Fields
  (opt-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optUserId")
  (opt-user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "optUserName")
  (opt-title
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optTitle")
  (reward-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardNum")
  (rewards
   :index 5 :type guild-casting-reward :kind :message :label (:repeated :list) :json-name "rewards"))

(pi:define-message game-guild-boss-attack-req
    ()
  ;; Fields
  (attack-formations
   :index 1 :type formation :kind :message :label (:repeated :list) :json-name "attackFormations")
  (attack-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackTime")
  (result
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (battle-info
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo")
  (hurt
   :index 5 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (battle-valid
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 7 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-guild-boss-attack-res
    ()
  ;; Fields
  (boss-info
   :index 1 :type guild-boss-info :kind :message :label (:optional) :json-name "bossInfo")
  (reward-res
   :index 2 :type game-reward-res :kind :message :label (:repeated :list) :json-name "rewardRes")
  (reward-boss-score
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardBossScore")
  (reward-gold
   :index 4 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "rewardGold")
  (reward-contribute
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardContribute")
  (be-win
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "beWin")
  (be-quick-attack
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "beQuickAttack")
  (hurt
   :index 8 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (reward-exp
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardExp"))

(pi:define-message game-guild-boss-quick-attack-req
    ())

(pi:define-message game-guild-boss-rank-req
    ())

(pi:define-message game-guild-boss-rank-res
    ()
  ;; Fields
  (guilds
   :index 1 :type guild-base-info :kind :message :label (:repeated :list) :json-name "guilds")
  (reward-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardTime"))

(pi:define-message game-guild-boss-record-req
    ())

(pi:define-message game-guild-boss-record-res
    ()
  ;; Fields
  (records
   :index 1 :type guild-boss-record :kind :message :label (:repeated :list) :json-name "records"))

(pi:define-message game-guild-helper-list-req
    ())

(pi:define-message game-guild-helper-list-res
    ()
  ;; Fields
  (helpers
   :index 1 :type player-base-info :kind :message :label (:repeated :list) :json-name "helpers")
  (select-helper-list
   :index 2 :type player-base-info :kind :message :label (:repeated :list) :json-name "selectHelperList")
  (refresh-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime"))

(pi:define-message game-guild-helper-select-req
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "userId"))

(pi:define-message game-guild-helper-select-res
    ()
  ;; Fields
  (select-helper-list
   :index 1 :type player-base-info :kind :message :label (:repeated :list) :json-name "selectHelperList")
  (refresh-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime"))

(pi:define-message game-guild-helper-hero-list-req
    ()
  ;; Fields
  (user-id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "userIdList"))

(pi:define-message game-guild-helper-hero-list-res
    ()
  ;; Fields
  (heros
   :index 1 :type helper-heros :kind :message :label (:repeated :list) :json-name "heros"))

(pi:define-message game-guild-guard-detail-req
    ()
  ;; Fields
  (guard-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guardId"))

(pi:define-message game-guild-guard-detail-res
    ()
  ;; Fields
  (copy-detail
   :index 1 :type guild-copy-guard-detail :kind :message :label (:optional) :json-name "copyDetail"))

(pi:define-message game-guild-copy-guard-change-res
    ()
  ;; Fields
  (summary
   :index 1 :type guild-guard-summary :kind :message :label (:optional) :json-name "summary")
  (rewards
   :index 2 :type guild-copy-reward :kind :message :label (:repeated :list) :json-name "rewards")
  (hurts
   :index 3 :type guild-copy-hurt :kind :message :label (:repeated :list) :json-name "hurts"))

(pi:define-message game-guild-copy-change-res
    ()
  ;; Fields
  (personl-part
   :index 1 :type guild-copy-person-part :kind :message :label (:optional) :json-name "personlPart"))

(pi:define-message game-guild-copy-skill-change-res
    ()
  ;; Fields
  (copy-skills
   :index 6 :type guild-copy-skill :kind :message :label (:repeated :list) :json-name "copySkills"))

(pi:define-message game-guild-copy-battle-result-req
    ()
  ;; Fields
  (guard-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guardId")
  (attacker-formation
   :index 2 :type formation :kind :message :label (:optional) :json-name "attackerFormation")
  (result
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (hurt
   :index 5 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (old-bloods
   :index 6 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "oldBloods")
  (cur-bloods
   :index 7 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "curBloods")
  (battle-valid
   :index 8 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 9 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-guild-copy-buy-num-req
    ()
  ;; Fields
  (buy-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyNum"))

(pi:define-message game-guild-copy-skill-upgrade-req
    ()
  ;; Fields
  (skill-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "skillType")
  (count
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "count"))

(pi:define-message game-guild-copy-mvp-reward-req
    ()
  ;; Fields
  (guard-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guardId"))

(pi:define-message game-guild-copy-reward-req
    ()
  ;; Fields
  (guard-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guardId")
  (index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index"))

(pi:define-message game-guild-copy-pass-reward-req
    ()
  ;; Fields
  (copy-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "copyId"))

(pi:define-message game-guild-boss-challenge-num-buy-req
    ()
  ;; Fields
  (num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-guild-boss-challenge-num-buy-res
    ()
  ;; Fields
  (left-challenge-times
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "leftChallengeTimes")
  (left-buy-times
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "leftBuyTimes"))

(pi:define-message game-guild-boss-inspire-buy-req
    ()
  ;; Fields
  (num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-guild-boss-inspire-buy-res
    ()
  ;; Fields
  (inspired-times
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "inspiredTimes")
  (left-inspire-times
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "leftInspireTimes"))

(pi:define-message game-get-top-heros-req
    ()
  ;; Fields
  (user-id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "userIdList"))

(pi:define-message game-get-top-heros-res
    ()
  ;; Fields
  (user-id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "userIdList")
  (hero-list
   :index 2 :type hero-base-info :kind :message :label (:repeated :list) :json-name "heroList"))

(pi:define-message game-helper-list-req
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type"))

(pi:define-message game-helper-list-res
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (helpers
   :index 2 :type helper-info :kind :message :label (:repeated :list) :json-name "helpers")
  (reward-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardNum"))

(pi:define-message game-helper-history-req
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type"))

(pi:define-message game-helper-history-res
    ()
  ;; Fields
  (history
   :index 1 :type helper-history :kind :message :label (:repeated :list) :json-name "history")
  (history2
   :index 2 :type helper-history2 :kind :message :label (:repeated :list) :json-name "history2"))

(pi:define-message game-helper-put-req
    ()
  ;; Fields
  (index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (hero
   :index 2 :type hero-base-info :kind :message :label (:optional) :json-name "hero"))

(pi:define-message game-helper-drop-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-helper-change-res
    ()
  ;; Fields
  (helpers
   :index 1 :type helper-info :kind :message :label (:repeated :list) :json-name "helpers")
  (reward-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardNum"))

(pi:define-message game-helper-reward-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-friend-list-req
    ()
  ;; Fields
  (get-base-info-flag
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getBaseInfoFlag")
  (get-gif-info-flag
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getGifInfoFlag")
  (get-apply-info-flag
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getApplyInfoFlag"))

(pi:define-message game-friend-list-res
    ()
  ;; Fields
  (friends
   :index 1 :type player-base-info :kind :message :label (:repeated :list) :json-name "friends")
  (black-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "blackList")
  (gif-info-list
   :index 3 :type friend-gif-info :kind :message :label (:repeated :list) :json-name "gifInfoList")
  (apply-infos
   :index 4 :type friend-apply-info-list :kind :message :label (:optional) :json-name "applyInfos")
  (be-black-list
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "beBlackList"))

(pi:define-message game-add-friend-req
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (server-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "serverId")
  (msg
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "msg"))

(pi:define-message game-add-friend-res
    ()
  ;; Fields
  (send-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendUserId")
  (send-server-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendServerId")
  (recv-user-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvUserId")
  (recv-server-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvServerId")
  (recv-applys
   :index 5 :type friend-apply-info :kind :message :label (:repeated :list) :json-name "recvApplys")
  (send-applys
   :index 6 :type friend-apply-info :kind :message :label (:repeated :list) :json-name "sendApplys"))

(pi:define-message game-del-friend-req
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId"))

(pi:define-message game-del-friend-res
    ()
  ;; Fields
  (oprator-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "opratorId")
  (user-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId"))

(pi:define-message game-black-list-req
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (server-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "serverId"))

(pi:define-message game-black-list-res
    ()
  ;; Fields
  (oprator-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "opratorId")
  (user-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId"))

(pi:define-message game-friend-apply-handle-req
    ()
  ;; Fields
  (handle-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "handleType")
  (opt-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optType")
  (apply-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "applyId"))

(pi:define-message game-friend-apply-handle-res
    ()
  ;; Fields
  (opt-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optUserId")
  (opt-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optType")
  (handle-type
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "handleType")
  (apply-id-list
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "applyIdList")
  (usr-info-list
   :index 5 :type player-base-info :kind :message :label (:repeated :list) :json-name "usrInfoList"))

(pi:define-message game-friend-present-gif-req
    ()
  ;; Fields
  (present-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "presentType")
  (user-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId"))

(pi:define-message game-friend-present-gif-res
    ()
  ;; Fields
  (gif-info-list
   :index 1 :type friend-gif-info :kind :message :label (:repeated :list) :json-name "gifInfoList"))

(pi:define-message game-friend-accept-gif-req
    ()
  ;; Fields
  (fetch-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fetchType")
  (user-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId"))

(pi:define-message game-friend-accept-gif-res
    ()
  ;; Fields
  (gif-info-list
   :index 1 :type friend-gif-info :kind :message :label (:repeated :list) :json-name "gifInfoList"))

(pi:define-message game-un-black-list-req
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId"))

(pi:define-message game-un-black-list-res
    ()
  ;; Fields
  (oprator-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "opratorId")
  (user-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId"))

(pi:define-message game-friend-find-req
    ()
  ;; Fields
  (name
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (user-id-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "userIdList"))

(pi:define-message game-friend-find-res
    ()
  ;; Fields
  (players
   :index 1 :type player-base-info :kind :message :label (:repeated :list) :json-name "players"))

(pi:define-message game-get-plays-req
    ()
  ;; Fields
  (user-id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "userIdList"))

(pi:define-message game-get-plays-res
    ()
  ;; Fields
  (players
   :index 1 :type player :kind :message :label (:repeated :list) :json-name "players"))

(pi:define-message game-friends-recommend-req
    ())

(pi:define-message game-friends-recommend-res
    ()
  ;; Fields
  (players
   :index 1 :type player-base-info :kind :message :label (:repeated :list) :json-name "players"))

(pi:define-message game-mail-list-req
    ()
  ;; Fields
  (mail-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mailType"))

(pi:define-message game-mail-list-res
    ()
  ;; Fields
  (mail-list
   :index 1 :type mail-info :kind :message :label (:repeated :list) :json-name "mailList"))

(pi:define-message game-new-mail-res
    ())

(pi:define-message game-mail-read-req
    ()
  ;; Fields
  (mail-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mailId"))

(pi:define-message game-mail-read-res
    ()
  ;; Fields
  (status
   :index 1 :type mail-status :kind :message :label (:optional) :json-name "status"))

(pi:define-message game-mail-fetch-req
    ()
  ;; Fields
  (mail-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mailId"))

(pi:define-message game-mail-fetch-res
    ()
  ;; Fields
  (status
   :index 1 :type mail-status :kind :message :label (:optional) :json-name "status"))

(pi:define-message game-mail-del-req
    ()
  ;; Fields
  (mail-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mailId"))

(pi:define-message game-mail-del-res
    ()
  ;; Fields
  (mail-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mailId"))

(pi:define-message game-mail-fetch-all-req
    ())

(pi:define-message game-mail-fetch-all-res
    ()
  ;; Fields
  (mail-status-list
   :index 1 :type mail-status :kind :message :label (:repeated :list) :json-name "mailStatusList"))

(pi:define-message game-mail-del-all-readed-req
    ())

(pi:define-message game-mail-del-all-readed-res
    ()
  ;; Fields
  (mail-id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "mailIdList"))

(pi:define-message game-mail-sys-send-req
    ()
  ;; Fields
  (end-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (info
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "info")
  (reward-res
   :index 3 :type game-reward-res :kind :message :label (:optional) :json-name "rewardRes"))

(pi:define-message game-task-list-req
    ())

(pi:define-message game-task-list-res
    ()
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks")
  (day-active
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dayActive")
  (day-archives
   :index 3 :type task-archive :kind :message :label (:repeated :list) :json-name "dayArchives")
  (day-refresh-time
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dayRefreshTime")
  (week-active
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "weekActive")
  (week-archives
   :index 6 :type task-archive :kind :message :label (:repeated :list) :json-name "weekArchives")
  (week-refresh-time
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "weekRefreshTime")
  (fs-day-tasks
   :index 8 :type task :kind :message :label (:repeated :list) :json-name "fsDayTasks")
  (fs-day-refresh-time
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fsDayRefreshTime")
  (fs-week-tasks
   :index 10 :type task :kind :message :label (:repeated :list) :json-name "fsWeekTasks")
  (fs-week-refresh-time
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fsWeekRefreshTime"))

(pi:define-message game-task-mdy-res
    ()
  ;; Fields
  (add-tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "addTasks")
  (mdy-tasks
   :index 2 :type task :kind :message :label (:repeated :list) :json-name "mdyTasks")
  (del-tasks
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "delTasks")
  (add-day-active
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "addDayActive")
  (week-active
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "weekActive"))

(pi:define-message game-task-reward-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (task-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskType"))

(pi:define-message game-task-active-reward-req
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-task-active-reward-res
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (archives
   :index 2 :type task-archive :kind :message :label (:repeated :list) :json-name "archives"))

(pi:define-message game-manual-list-req
    ())

(pi:define-message game-manual-list-res
    ()
  ;; Fields
  (manual-list
   :index 1 :type manual :kind :message :label (:repeated :list) :json-name "manualList"))

(pi:define-message game-manual-upgrade-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-manual-upgrade-res
    ()
  ;; Fields
  (manual-info
   :index 1 :type manual :kind :message :label (:optional) :json-name "manualInfo")
  (total-manual-score
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "totalManualScore"))

(pi:define-message game-manual-diamond-reward-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-team-level-upgrade-res
    ()
  ;; Fields
  (level
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level")
  (temp-exp
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "tempExp")
  (diamond
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "diamond"))

(pi:define-message game-vip-level-upgrade-res
    ()
  ;; Fields
  (vip-level
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "vipLevel")
  (vip-exp
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "vipExp"))

(pi:define-message game-vip-gif-req
    ()
  ;; Fields
  (vip-level
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "vipLevel")
  (type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type"))

(pi:define-message game-vip-gif-list-req
    ())

(pi:define-message game-vip-gif-list-res
    ()
  ;; Fields
  (vip-gif-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "vipGifList"))

(pi:define-message game-rank-list-req
    ()
  ;; Fields
  (rank-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rankType"))

(pi:define-message game-rank-list-res
    ()
  ;; Fields
  (rank-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rankType")
  (players
   :index 2 :type player-base-info :kind :message :label (:repeated :list) :json-name "players"))

(pi:define-message game-arch-list-req
    ()
  ;; Fields
  (rank-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rankType"))

(pi:define-message game-arch-list-res
    ()
  ;; Fields
  (rank-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rankType")
  (archiev-infos
   :index 2 :type archiev-info :kind :message :label (:repeated :list) :json-name "archievInfos"))

(pi:define-message game-arch-detail-req
    ()
  ;; Fields
  (rank-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rankType")
  (config-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configId"))

(pi:define-message game-arch-detail-res
    ()
  ;; Fields
  (players
   :index 1 :type player-base-info :kind :message :label (:repeated :list) :json-name "players")
  (reach-time-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "reachTimeList"))

(pi:define-message game-arch-reward-req
    ()
  ;; Fields
  (rank-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rankType")
  (config-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configId"))

(pi:define-message game-arch-reward-res
    ()
  ;; Fields
  (rank-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rankType")
  (archiev-info
   :index 2 :type archiev-info :kind :message :label (:optional) :json-name "archievInfo"))

(pi:define-message game-arch-reward-list-req
    ())

(pi:define-message game-arch-reward-list-res
    ()
  ;; Fields
  (reward-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "rewardList"))

(pi:define-message game-arch-reward-change-res
    ()
  ;; Fields
  (reward-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "rewardList"))

(pi:define-message game-game-hero-change-res
    ()
  ;; Fields
  (change-infos
   :index 1 :type hero-change-info :kind :message :label (:repeated :list) :json-name "changeInfos"))

(pi:define-message game-crystal-list-req
    ())

(pi:define-message game-crystal-list-res
    ()
  ;; Fields
  (crystal-stage
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "crystalStage")
  (crystal-level
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "crystalLevel")
  (slots
   :index 3 :type crystal-slot :kind :message :label (:repeated :list) :json-name "slots")
  (first-cleaned
   :index 4 :type cl:boolean :kind :scalar :label (:optional) :json-name "firstCleaned"))

(pi:define-message game-open-slot-req
    ())

(pi:define-message game-open-slot-res
    ()
  ;; Fields
  (slot
   :index 1 :type crystal-slot :kind :message :label (:optional) :json-name "slot"))

(pi:define-message game-crystal-level-up-req
    ())

(pi:define-message game-crystal-level-up-res
    ()
  ;; Fields
  (crystal-level
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "crystalLevel"))

(pi:define-message game-crystal-advance-req
    ())

(pi:define-message game-crystal-advance-res
    ()
  ;; Fields
  (crystal-stage
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "crystalStage"))

(pi:define-message game-crystal-push-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (slot
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "slot"))

(pi:define-message game-crystal-pop-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message game-slot-change-res
    ()
  ;; Fields
  (change-infos
   :index 1 :type crystal-slot :kind :message :label (:repeated :list) :json-name "changeInfos"))

(pi:define-message game-slot-time-clean-req
    ()
  ;; Fields
  (slot-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotIndex"))

(pi:define-message game-sub-task-list-req
    ()
  ;; Fields
  (task-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskType"))

(pi:define-message game-sub-task-list-res
    ()
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message game-activity-entrence-req
    ())

(pi:define-message game-activity-entrence-res
    ()
  ;; Fields
  (activity-id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "activityIdList"))

(pi:define-message game7-day-info-req
    ())

(pi:define-message game7-day-info-res
    ()
  ;; Fields
  (end-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (had-get-rewards
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hadGetRewards"))

(pi:define-message game7-day-reward-get-req
    ()
  ;; Fields
  (reward-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardId"))

(pi:define-message game7-day-reward-get-res
    ()
  ;; Fields
  (had-get-rewards
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hadGetRewards"))

(pi:define-message game-ext-gif-info-req
    ())

(pi:define-message game-ext-gif-info-res
    ()
  ;; Fields
  (gif-list
   :index 1 :type ext-gif-info :kind :message :label (:repeated :list) :json-name "gifList")
  (day-refresh-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dayRefreshTime")
  (week-refresh-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "weekRefreshTime")
  (month-refresh-time
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monthRefreshTime"))

(pi:define-message game-recharge-req
    ()
  ;; Fields
  (recharge-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rechargeType")
  (recharge-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rechargeId")
  (schedule-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scheduleId")
  (schedule-item-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scheduleItemId"))

(pi:define-message game-recharge-res
    ()
  ;; Fields
  (charge-infos
   :index 19 :type charge-info :kind :message :label (:repeated :list) :json-name "chargeInfos"))

(pi:define-message game-ext-gif-buy-res
    ()
  ;; Fields
  (ext-gif
   :index 1 :type ext-gif-info :kind :message :label (:optional) :json-name "extGif"))

(pi:define-message game-first-charge-reward-req
    ())

(pi:define-message game-first-charge-reward-res
    ())

(pi:define-message game-first-charge-reward-info-req
    ())

(pi:define-message game-first-charge-reward-info-res
    ()
  ;; Fields
  (today-can-receive
   :index 1 :type cl:boolean :kind :scalar :label (:optional) :json-name "todayCanReceive")
  (received-times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "receivedTimes"))

(pi:define-message game-month-card-info-req
    ())

(pi:define-message game-month-card-info-res
    ()
  ;; Fields
  (month-card-list
   :index 1 :type month-card-info :kind :message :label (:repeated :list) :json-name "monthCardList"))

(pi:define-message game-month-card-reward-req
    ()
  ;; Fields
  (gif-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gifId"))

(pi:define-message game-month-card-reward-res
    ()
  ;; Fields
  (month-card
   :index 1 :type month-card-info :kind :message :label (:optional) :json-name "monthCard"))

(pi:define-message game-month-card-buy-res
    ()
  ;; Fields
  (month-card
   :index 1 :type month-card-info :kind :message :label (:optional) :json-name "monthCard"))

(pi:define-message game-fund-info-req
    ())

(pi:define-message game-fund-info-res
    ()
  ;; Fields
  (fund-list
   :index 1 :type fund-info :kind :message :label (:repeated :list) :json-name "fundList"))

(pi:define-message game-fund-buy-res
    ()
  ;; Fields
  (fund-list
   :index 1 :type fund-info :kind :message :label (:repeated :list) :json-name "fundList"))

(pi:define-message game-ext-gif-choose-req
    ()
  ;; Fields
  (gif-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "gifId")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-ext-gif-choose-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-sys-open-res
    ()
  ;; Fields
  (system-id-list
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "systemIdList"))

(pi:define-message game-red-point-req
    ())

(pi:define-message game-red-point-res
    ()
  ;; Fields
  (redpoint-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "redpointList")
  (maze-refresh
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mazeRefresh")
  (garden-shop1-refresh
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenShop1Refresh"))

(pi:define-message game-red-point-chagne-res
    ()
  ;; Fields
  (redpoint-set
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "redpointSet")
  (redpoint-unset
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "redpointUnset"))

(pi:define-message game-red-point-clean-req
    ()
  ;; Fields
  (red-point-types
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "redPointTypes")
  (add-flag
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "addFlag"))

(pi:define-message game-activity-theme-info-req
    ())

(pi:define-message game-activity-theme-info-res
    ()
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (day-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dayIndex")
  (end-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime"))

(pi:define-message game-activity-theme7-day-task-list-req
    ()
  ;; Fields
  (day-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dayIndex"))

(pi:define-message game-activity-theme7-day-task-list-res
    ()
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message game-start-activity-theme-boss-req
    ())

(pi:define-message game-start-activity-theme-boss-res
    ()
  ;; Fields
  (battle-key
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-activity-theme-boss-battle-req
    ()
  ;; Fields
  (hurt
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (battle-info
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo")
  (battle-valid
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-activity-theme-boss-battle-res
    ()
  ;; Fields
  (hurt
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (battle-key
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-activity-theme-task-mdy-res
    ()
  ;; Fields
  (entrance
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "entrance")
  (add-tasks
   :index 2 :type task :kind :message :label (:repeated :list) :json-name "addTasks")
  (mdy-tasks
   :index 3 :type task :kind :message :label (:repeated :list) :json-name "mdyTasks")
  (del-tasks
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "delTasks"))

(pi:define-message game-activity-theme-boss-info-req
    ())

(pi:define-message game-activity-theme-boss-info-res
    ()
  ;; Fields
  (leader-board
   :index 1 :type boss-leader-board-item :kind :message :label (:repeated :list) :json-name "leaderBoard")
  (self
   :index 2 :type boss-leader-board-item :kind :message :label (:optional) :json-name "self"))

(pi:define-message game-activity-theme-boss-task-req
    ())

(pi:define-message game-activity-theme-boss-task-res
    ()
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message game-activity-theme-boss-task-reward-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-activity-theme-boss-task-reward-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-activity-theme-pack-req
    ())

(pi:define-message game-activity-theme-pack-res
    ()
  ;; Fields
  (list
   :index 1 :type theme-pack :kind :message :label (:repeated :list) :json-name "list"))

(pi:define-message game-activity-theme-pack-buy-res
    ()
  ;; Fields
  (pack
   :index 1 :type theme-pack :kind :message :label (:optional) :json-name "pack"))

(pi:define-message game-activity-theme-elite-pack-req
    ())

(pi:define-message game-activity-theme-elite-pack-res
    ()
  ;; Fields
  (pack
   :index 1 :type theme-pack :kind :message :label (:optional) :json-name "pack"))

(pi:define-message game-activity-theme-elite-pack-buy-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-activity-theme-play-quest-req
    ())

(pi:define-message game-activity-theme-play-quest-res
    ()
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message game-activity-theme-play-quest-reward-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-activity-theme-play-quest-reward-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-activity-theme-prize-lottery-req
    ())

(pi:define-message game-activity-theme-prize-lottery-res
    ()
  ;; Fields
  (reward-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardId")
  (no-limit-times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "noLimitTimes"))

(pi:define-message game-activity-theme-prize-info-req
    ())

(pi:define-message game-activity-theme-prize-info-res
    ()
  ;; Fields
  (is-first-time
   :index 1 :type cl:boolean :kind :scalar :label (:optional) :json-name "isFirstTime")
  (received-limit
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "receivedLimit")
  (no-limit-times
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "noLimitTimes"))

(pi:define-message game-activity-theme7-day-reward-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-activity-theme7-day-reward-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message theme-pack
    (
     :name "theme_pack")
  ;; Fields
  (pack-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "packId")
  (buy-times
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyTimes"))

(pi:define-message game-month-sign-req
    ())

(pi:define-message game-month-sign-res
    ()
  ;; Fields
  (day
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "day")
  (times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-month-sign-info-req
    ())

(pi:define-message game-month-sign-info-res
    ()
  ;; Fields
  (can-receive-additional-reward
   :index 1 :type cl:boolean :kind :scalar :label (:optional) :json-name "canReceiveAdditionalReward")
  (day
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "day")
  (cycle
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cycle")
  (list
   :index 4 :type month-sign-item :kind :message :label (:repeated :list) :json-name "list"))

(pi:define-message game-month-re-sign-req
    ())

(pi:define-message game-month-re-sign-res
    ()
  ;; Fields
  (day
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "day"))

(pi:define-message game-month-sign-reward-req
    ())

(pi:define-message game-month-sign-reward-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message month-sign-item
    (
     :name "month_sign_item")
  ;; Fields
  (day
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "day")
  (times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-draw-buy-pool-req
    ()
  ;; Fields
  (card-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cardType"))

(pi:define-message game-draw-buy-pool-res
    ()
  ;; Fields
  (card-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cardType")
  (open-race
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "openRace"))

(pi:define-message game-garden-info-req
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (x1
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x1")
  (y1
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y1")
  (x2
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x2")
  (y2
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y2")
  (ship-flag
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipFlag"))

(pi:define-message game-garden-info-res
    ()
  ;; Nested messages
  ;; Fields
  (grids
   :index 1 :type garden-grid :kind :message :label (:repeated :list) :json-name "grids")
  (items
   :index 2 :type garden-item :kind :message :label (:repeated :list) :json-name "items")
  (active-groups
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "activeGroups")
  (pet-info
   :index 4 :type garden-pet-info :kind :message :label (:optional) :json-name "petInfo")
  (active-zones
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "activeZones")
  (ship-num
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipNum")
  (ship-end-time
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipEndTime")
  (ship-reward-id
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipRewardId")
  (menual
   :index 9 :type garden-menual :kind :message :label (:repeated :list) :json-name "menual")
  (grid-num
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gridNum")
  (today-monster-num
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayMonsterNum")
  (monster-num-refresh-time
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterNumRefreshTime")
  (today-monster-buy-num
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayMonsterBuyNum")
  (monster-buy-num-refresh-time
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterBuyNumRefreshTime")
  (reward-link
   :index 15 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "rewardLink")
  (today-item-num
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayItemNum")
  (monster-item-refresh-time
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterItemRefreshTime")
  (pi:define-map gifinfo
     :key-type cl-protobufs:int32
     :value-type cl-protobufs:int64
     :json-name "gifinfo"
     :value-kind :scalar
     :index 18)
  (ship-buy-num
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipBuyNum")
  (ship-buy-rewrd-num
   :index 20 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipBuyRewrdNum"))

(pi:define-message game-garden-grid-change-res
    ()
  ;; Fields
  (grids
   :index 1 :type garden-grid :kind :message :label (:repeated :list) :json-name "grids")
  (active-groups
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "activeGroups")
  (active-zones
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "activeZones"))

(pi:define-message game-garden-item-change-res
    ()
  ;; Fields
  (add-items
   :index 1 :type garden-item :kind :message :label (:repeated :list) :json-name "addItems")
  (del-items
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "delItems")
  (mdy-items
   :index 3 :type garden-item :kind :message :label (:repeated :list) :json-name "mdyItems"))

(pi:define-message game-garden-move-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (x
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x")
  (y
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y")
  (old-x
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "oldX")
  (old-y
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "oldY")
  (is-float
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isFloat"))

(pi:define-message game-garden-move-res
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (x
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x")
  (y
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y")
  (opt-code
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "optCode"))

(pi:define-message game-garden-use-item-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (float-list
   :index 2 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList")
  (force
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "force"))

(pi:define-message game-garden-pet-collect-req
    ()
  ;; Fields
  (pet-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petId")
  (id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (float-list
   :index 3 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList")
  (collect-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "collectNum"))

(pi:define-message game-garden-exchange-req
    ()
  ;; Fields
  (id1
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id1")
  (x1
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x1")
  (y1
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y1")
  (id2
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id2")
  (x2
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x2")
  (y2
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y2"))

(pi:define-message game-garden-exchange-res
    ()
  ;; Fields
  (opt-code
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "optCode")
  (id1
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id1")
  (x1
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x1")
  (y1
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y1")
  (id2
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id2")
  (x2
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x2")
  (y2
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y2"))

(pi:define-message game-garden-combine-req
    ()
  ;; Fields
  (del-items
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "delItems")
  (items
   :index 2 :type garden-item :kind :message :label (:repeated :list) :json-name "items")
  (comb-type
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "combType")
  (comb-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "combNum")
  (recover-add-items
   :index 5 :type garden-item :kind :message :label (:repeated :list) :json-name "recoverAddItems")
  (recover-del-items
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "recoverDelItems"))

(pi:define-message game-garden-combine-res
    ()
  ;; Fields
  (opt-code
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "optCode")
  (add-items
   :index 2 :type garden-item :kind :message :label (:repeated :list) :json-name "addItems")
  (del-items
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "delItems"))

(pi:define-message game-garden-tool-collect-req
    ()
  ;; Fields
  (tool-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "toolId")
  (mine-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mineId")
  (x
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x")
  (y
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y")
  (action
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "action")
  (float-list
   :index 6 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-garden-tool-exchange-collect-req
    ()
  ;; Fields
  (tool-id-1
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "toolId1")
  (tool-id-2
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "toolId2")
  (mine-id-1
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mineId1")
  (mine-id-2
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mineId2")
  (x1
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x1")
  (y1
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y1")
  (x2
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x2")
  (y2
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y2"))

(pi:define-message game-garden-active-grid-group-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (zone-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "zoneId")
  (type
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (item-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (diamond-buy
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "diamondBuy"))

(pi:define-message game-garden-pet-combine-req
    ()
  ;; Fields
  (del-items
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "delItems")
  (pet-ids
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "petIds")
  (recover-add-items
   :index 3 :type garden-item :kind :message :label (:repeated :list) :json-name "recoverAddItems"))

(pi:define-message game-garden-pet-combine-res
    ()
  ;; Fields
  (opt-code
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "optCode")
  (add-items
   :index 2 :type garden-item :kind :message :label (:repeated :list) :json-name "addItems"))

(pi:define-message game-garden-pet-leve-up-req
    ()
  ;; Fields
  (use-pets
   :index 1 :type garden-pet :kind :message :label (:optional) :json-name "usePets"))

(pi:define-message game-garden-pet-leve-up-res
    ()
  ;; Fields
  (use-pets
   :index 1 :type garden-pet :kind :message :label (:optional) :json-name "usePets")
  (get-pets
   :index 2 :type garden-pet :kind :message :label (:optional) :json-name "getPets"))

(pi:define-message game-garden-pet-change-res
    ()
  ;; Fields
  (mdy-pets
   :index 1 :type garden-pet :kind :message :label (:repeated :list) :json-name "mdyPets"))

(pi:define-message game-garden-ship-req
    ()
  ;; Fields
  (float-list
   :index 1 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-garden-unfloat-req
    ()
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (pos-x
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posX")
  (pos-y
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posY")
  (infos
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "infos"))

(pi:define-message game-garden-ship-change-res
    ()
  ;; Fields
  (ship-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipNum")
  (ship-end-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipEndTime")
  (ship-reward-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipRewardId"))

(pi:define-message game-garden-buy-tili-req
    ()
  ;; Fields
  (buy-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyNum")
  (float-list
   :index 2 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-garden-receive-on-hook-reward-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (float-list
   :index 2 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-garden-receive-on-hook-reward-res
    ()
  ;; Fields
  (collect-start-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "collectStartTime"))

(pi:define-message game-garden-on-hook-items-req
    ())

(pi:define-message game-garden-on-hook-items-res
    ()
  ;; Fields
  (items
   :index 1 :type garden-item :kind :message :label (:repeated :list) :json-name "items"))

(pi:define-message game-garden-guo-create-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (pos
   :index 2 :type grid-pos :kind :message :label (:optional) :json-name "pos"))

(pi:define-message game-garden-guo-cancel-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-garden-guo-acce-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (acce-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "acceTime"))

(pi:define-message game-garden-add2-store-req
    ()
  ;; Fields
  (id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "idList"))

(pi:define-message game-garden-add-store-grid-req
    ()
  ;; Fields
  (grid-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gridNum"))

(pi:define-message game-garden-add-store-grid-res
    ()
  ;; Fields
  (grid-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gridNum"))

(pi:define-message game-garden-store-acc-req
    ()
  ;; Fields
  (id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "idList")
  (acce-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "acceTime"))

(pi:define-message game-start-garden-level-req
    ()
  ;; Fields
  (zone-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "zoneId")
  (monster-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterIndex")
  (item-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId"))

(pi:define-message game-start-garden-level-res
    ()
  ;; Fields
  (zone-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "zoneId")
  (monster-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterIndex")
  (attack-team
   :index 3 :type battle-team :kind :message :label (:optional) :json-name "attackTeam")
  (battle-key
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey")
  (item-id
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId"))

(pi:define-message game-end-garden-level-req
    ()
  ;; Fields
  (zone-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "zoneId")
  (monster-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterIndex")
  (battle-valid
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "BattleKey")
  (item-id
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (float-list
   :index 6 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList")
  (is-sd
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "isSd")
  (attack-num
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "attackNum"))

(pi:define-message game-end-garden-level-res
    ()
  ;; Fields
  (zone-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "zoneId")
  (monster-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterIndex")
  (today-monster-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayMonsterNum")
  (is-sd
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "isSd"))

(pi:define-message game-garden-build-add2-store-req
    ()
  ;; Fields
  (id-list
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "idList")
  (type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type"))

(pi:define-message game-garden-monster-buy-req
    ()
  ;; Fields
  (buy-num
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyNum"))

(pi:define-message game-garden-monster-buy-res
    ()
  ;; Fields
  (today-monster-buy-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayMonsterBuyNum"))

(pi:define-message game-red-pack-list-req
    ()
  ;; Fields
  (flag-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagType")
  (flag-not-empty
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagNotEmpty")
  (flag-has-open
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "flagHasOpen"))

(pi:define-message game-red-pack-list-res
    ()
  ;; Fields
  (summary-list
   :index 1 :type red-pack-summary :kind :message :label (:repeated :list) :json-name "summaryList"))

(pi:define-message game-open-red-pack-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-open-red-pack-res
    ()
  ;; Fields
  (summary
   :index 1 :type red-pack-summary :kind :message :label (:optional) :json-name "summary"))

(pi:define-message game-red-pack-detail-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-red-pack-detail-res
    ()
  ;; Fields
  (detail
   :index 1 :type red-pack-detail :kind :message :label (:optional) :json-name "detail"))

(pi:define-message game-new-red-pack-res
    ()
  ;; Fields
  (summary
   :index 1 :type red-pack-summary :kind :message :label (:optional) :json-name "summary"))

(pi:define-message game-get-red-pack-res
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (task-cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "taskCfgId")
  (recharge-cfg-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rechargeCfgId")
  (red-pack-cfg-id
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "redPackCfgId")
  (red-pack-id
   :index 5 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "redPackId"))

(pi:define-message game-red-pack-share-req
    ()
  ;; Fields
  (red-pack-id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "redPackId")
  (red-pack-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "redPackType"))

(pi:define-message game-red-pack-share-res
    ())

(pi:define-message game-red-pack-impl-req
    ()
  ;; Fields
  (float-list
   :index 1 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-ship-buy-req
    ())

(pi:define-message game-ship-buy-res
    ()
  ;; Fields
  (ship-buy-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipBuyNum"))

(pi:define-message game-ship-buy-reward-req
    ()
  ;; Fields
  (float-list
   :index 1 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-ship-buy-reward-res
    ()
  ;; Fields
  (ship-buy-rewrd-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipBuyRewrdNum"))

(pi:define-message game-garden-task-list-req
    ()
  ;; Fields
  (float-list
   :index 1 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-garden-task-list-res
    ()
  ;; Fields
  (task-list
   :index 1 :type garden-task :kind :message :label (:repeated :list) :json-name "taskList")
  (hezuo-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hezuoNum"))

(pi:define-message game-garden-add-task-coin-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (gold-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "goldNum")
  (float-list
   :index 3 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-garden-task-change-res
    ()
  ;; Fields
  (mdy-list
   :index 1 :type garden-task :kind :message :label (:repeated :list) :json-name "mdyList")
  (del-list
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "delList")
  (add-list
   :index 3 :type garden-task :kind :message :label (:repeated :list) :json-name "addList")
  (hezuo-num
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hezuoNum"))

(pi:define-message game-garden-share-task-list-req
    ()
  ;; Fields
  (task-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskNum")
  (task-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskType"))

(pi:define-message game-garden-share-task-list-res
    ()
  ;; Fields
  (task-list
   :index 1 :type garden-task :kind :message :label (:repeated :list) :json-name "taskList"))

(pi:define-message game-garden-task-hz-req
    (
     :name "GameGardenTaskHZReq")
  ;; Fields
  (self-id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "selfId")
  (target-id
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "targetId")
  (float-list
   :index 3 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-garden-task-hz-res
    (
     :name "GameGardenTaskHZRes")
  ;; Fields
  (uid1
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "uid1")
  (name1
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name1")
  (uid2
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "uid2")
  (name2
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "name2")
  (reward-res
   :index 5 :type game-reward-res :kind :message :label (:optional) :json-name "rewardRes")
  (time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "time")
  (task-id1
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskID1")
  (task-id2
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskID2")
  (level1
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level1")
  (level2
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level2"))

(pi:define-message game-garden-task-share-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (user-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "userId"))

(pi:define-message game-garden-task-num-buy-req
    ()
  ;; Fields
  (buy-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyNum"))

(pi:define-message game-garden-task-read-req
    ()
  ;; Fields
  (task-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskId"))

(pi:define-message game-garden-pos-change-req
    ()
  ;; Fields
  (info
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "info"))

(pi:define-message game-garden-get-pet-res
    ()
  ;; Fields
  (pet
   :index 1 :type garden-virpet :kind :message :label (:optional) :json-name "pet"))

(pi:define-message game-garden-pet-list-req
    ())

(pi:define-message game-garden-pet-list-res
    ()
  ;; Fields
  (pets
   :index 1 :type garden-virpet :kind :message :label (:repeated :list) :json-name "pets")
  (train
   :index 2 :type garden-train-info :kind :message :label (:repeated :list) :json-name "train"))

(pi:define-message game-garden-get-change-res
    ()
  ;; Fields
  (pet
   :index 1 :type garden-virpet :kind :message :label (:repeated :list) :json-name "pet")
  (train
   :index 2 :type garden-train-info :kind :message :label (:repeated :list) :json-name "train"))

(pi:define-message game-garden-pet-train-req
    ()
  ;; Fields
  (pet-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petId")
  (train-property
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainProperty")
  (train-type
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainType")
  (index
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index"))

(pi:define-message game-garden-train-upgrade-req
    ()
  ;; Fields
  (train-property
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainProperty")
  (train-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainType"))

(pi:define-message game-garden-train-export-req
    ()
  ;; Fields
  (train-property
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainProperty")
  (train-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainType")
  (index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index"))

(pi:define-message game-garden-train-reward-req
    ()
  ;; Fields
  (pet-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petId"))

(pi:define-message game-garden-upgrade-req
    ()
  ;; Fields
  (float-list
   :index 1 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-garden-day-reward-req
    ()
  ;; Fields
  (float-list
   :index 1 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-pet-add-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (pet-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petId")
  (pos
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message game-pet-remove-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message garden-pet-trans-res
    ()
  ;; Fields
  (trans
   :index 1 :type pet-trans :kind :message :label (:repeated :list) :json-name "trans"))

(pi:define-message game-active-code-req
    ()
  ;; Fields
  (code
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "code"))

(pi:define-message game-gmt-schedule-list-req
    ()
  ;; Fields
  (schedule-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scheduleId"))

(pi:define-message game-gmt-schedule-list-res
    ()
  ;; Fields
  (schedules
   :index 1 :type gmt-schedule :kind :message :label (:repeated :list) :json-name "schedules"))

(pi:define-message game-gmt-schedule-data-change-res
    ()
  ;; Fields
  (schedule-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scheduleId")
  (gmt-d
   :index 2 :type gmt-data :kind :message :label (:optional) :json-name "gmtD"))

(pi:define-message game-gmt-c2-is-reward-req
    ()
  ;; Fields
  (schedule-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scheduleId")
  (item-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId"))

(pi:define-message game-gmt-i2-is-reward-req
    ()
  ;; Fields
  (schedule-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scheduleId")
  (item-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId"))

(pi:define-message game-gmt-r2-is-reward-req
    ()
  ;; Fields
  (schedule-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scheduleId")
  (item-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId"))

(pi:define-message game-gmt-ggl-reward-req
    ()
  ;; Fields
  (schedule-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scheduleId")
  (is-ten
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isTen"))

(pi:define-message game-gmt-task-reward-req
    ()
  ;; Fields
  (schedule-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scheduleId")
  (item-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId"))

(pi:define-message game-gmt-block-res
    ()
  ;; Fields
  (block-flag
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blockFlag")
  (block-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blockTime")
  (block-type
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blockType")
  (block-msg
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "blockMsg"))

(pi:define-message game-gmt-un-block-res
    ())

(pi:define-message game-gmt-ban-res
    ()
  ;; Fields
  (ban-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "banTime")
  (ban-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "banType")
  (ban-msg
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "banMsg"))

(pi:define-message game-gmt-kick-res
    ()
  ;; Fields
  (kick-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "kickType")
  (delay-time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "delayTime"))

(pi:define-message game-save-user-data-req
    ()
  ;; Fields
  (data
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "data"))

(pi:define-message game-hero-detail-list-req
    ()
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (hero-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "heroId")
  (team-type
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamType"))

(pi:define-message game-hero-detail-list-res
    ()
  ;; Fields
  (hero-infos
   :index 1 :type battle-hero :kind :message :label (:repeated :list) :json-name "heroInfos")
  (pet-infos
   :index 2 :type battle-pet :kind :message :label (:repeated :list) :json-name "petInfos"))

(pi:define-message game-user-info-change-req
    ()
  ;; Fields
  (head
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl"))

(pi:define-message game-user-info-change-res
    ()
  ;; Fields
  (head
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl"))

(pi:define-message game-battle-team-req-req
    ()
  ;; Fields
  (team-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamType")
  (guard-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guardId")
  (arena-type
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaType")
  (defend-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendId")
  (defend-is-robot
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendIsRobot")
  (tower-type
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerType")
  (tower-level
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "towerLevel")
  (pos-index
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posIndex")
  (layer-index
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (map-index
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex")
  (path
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "path")
  (cur-select-buff
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "curSelectBuff")
  (block-id
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blockId")
  (island-evtent-cfg-id
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "islandEvtentCfgId")
  (island-target-user-id
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "islandTargetUserId")
  (island-index
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "islandIndex")
  (garden-zone-id
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenZoneId")
  (garden-monster-index
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenMonsterIndex")
  (garden-monster-seq
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenMonsterSeq")
  (pos-list
   :index 20 :type loop-team-pos :kind :message :label (:repeated :list) :json-name "posList")
  (boss-id
   :index 21 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossId")
  (monster-group-id
   :index 22 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "monsterGroupId")
  (world-boss-id
   :index 23 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "worldBossId")
  (buffs
   :index 24 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "buffs")
  (world-boss-blood
   :index 25 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "worldBossBlood")
  (user-title-id
   :index 28 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userTitleId")
  (guild-boss-inspire
   :index 29 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "guildBossInspire"))

(pi:define-message game-battle-team-res
    ()
  ;; Fields
  (result
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (team-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamType")
  (self
   :index 3 :type battle-team :kind :message :label (:optional) :json-name "self")
  (target
   :index 4 :type battle-team :kind :message :label (:optional) :json-name "target"))

(pi:define-message game-guild-copy-battle-start-req
    ()
  ;; Fields
  (guard-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guardId"))

(pi:define-message game-guild-copy-battle-start-res
    ()
  ;; Fields
  (defender-team
   :index 1 :type battle-team :kind :message :label (:optional) :json-name "defenderTeam")
  (battle-key
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-finish-garden-level-req
    ()
  ;; Fields
  (level
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level")
  (x
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x")
  (y
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y")
  (float-list
   :index 4 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-finish-garden-level-res
    ()
  ;; Fields
  (level
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level"))

(pi:define-message game-buy-hero-bag-grid-req
    ())

(pi:define-message game-buy-hero-bag-grid-res
    ()
  ;; Fields
  (hero-bag-buy-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroBagBuyNum")
  (hero-bag-ext-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroBagExtNum"))

(pi:define-message game-hero-update-res
    ()
  ;; Fields
  (hero-list
   :index 1 :type hero-base-info :kind :message :label (:repeated :list) :json-name "heroList")
  (delete-hero-ids
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "deleteHeroIds"))

(pi:define-message create-order-req
    ()
  ;; Fields
  (order-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "orderType")
  (schedule-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "scheduleId")
  (item-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "itemId")
  (pay-id
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "payId")
  (money
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "money")
  (data-id
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message create-order-res
    ()
  ;; Fields
  (order-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "orderId")
  (order-seq
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "orderSeq"))

(pi:define-message cancel-order-req
    ()
  ;; Fields
  (order-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "orderId"))

(pi:define-message cancel-order-res
    ())

(pi:define-message get-unfinish-order-req
    ())

(pi:define-message get-unfinish-order-res
    ()
  ;; Fields
  (order-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "orderId")
  (order-seq
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "orderSeq")
  (schedule-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "scheduleId")
  (order-type
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "orderType")
  (item-id
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "itemId")
  (pay-id
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "payId")
  (money
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "money")
  (create-time
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "createTime"))

(pi:define-message game-guild-level-leader-board-req
    ())

(pi:define-message game-guild-level-leader-board-res
    ()
  ;; Fields
  (leader-board
   :index 1 :type guild-level-leader-board-item :kind :message :label (:repeated :list) :json-name "leaderBoard")
  (self
   :index 2 :type guild-level-leader-board-item :kind :message :label (:optional) :json-name "self"))

(pi:define-message guild-level-leader-board-item
    (
     :name "guild_level_leader_board_item")
  ;; Fields
  (guild
   :index 1 :type guild-base-info :kind :message :label (:optional) :json-name "guild")
  (rank
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rank"))

(pi:define-message game-guild-casting-buy-req
    ()
  ;; Fields
  (num
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-guild-casting-buy-res
    ()
  ;; Fields
  (num
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-rename-req
    ()
  ;; Fields
  (name
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (valid
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "valid"))

(pi:define-message game-rename-res
    ()
  ;; Fields
  (opt
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "opt")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (rename-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "renameNum"))

(pi:define-message garden-menual-active-req
    ()
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message garden-menual-change-res
    ()
  ;; Fields
  (mdy
   :index 1 :type garden-menual :kind :message :label (:repeated :list) :json-name "mdy"))

(pi:define-message arena-check-battle-req
    ()
  ;; Fields
  (is-robot
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isRobot")
  (defend-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendId"))

(pi:define-message arena-check-battle-res
    ()
  ;; Fields
  (is-battle
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isBattle"))

(pi:define-message buy-item-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message buy-item-res
    ()
  ;; Fields
  (buy-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyNum"))

(pi:define-message game-xs-list-req
    ())

(pi:define-message game-xs-list-res
    ()
  ;; Fields
  (had-buy-xs
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "hadBuyXs")
  (had-get-rewards
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "hadGetRewards")
  (start-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "startTime"))

(pi:define-message game-xs-reward-get-req
    ()
  ;; Fields
  (reward-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardId"))

(pi:define-message game-xs-reward-get-res
    ()
  ;; Fields
  (mdy-get-rewards
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "mdyGetRewards"))

(pi:define-message game-xs-buy-res
    ()
  ;; Fields
  (xs-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "xsId"))

(pi:define-message game-sign-req
    ())

(pi:define-message game-sign-res
    ()
  ;; Fields
  (sign-today
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signToday")
  (sign-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signIndex")
  (open-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "openTime")
  (end-time
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime"))

(pi:define-message game-sign-reward-req
    ()
  ;; Fields
  (hero-index
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroIndex"))

(pi:define-message game-sign-reward-res
    ()
  ;; Fields
  (sign-today
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signToday")
  (sign-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "signIndex"))

(pi:define-message game-seven-days-pack-req
    ())

(pi:define-message game-seven-days-pack-res
    ()
  ;; Fields
  (day-idx
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dayIdx")
  (end-time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "endTime")
  (today-bought
   :index 3 :type cl:boolean :kind :scalar :label (:optional) :json-name "todayBought"))

(pi:define-message game-seven-days-pack-buy-res
    ()
  ;; Fields
  (pack-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "packId"))

(pi:define-message game-xs-finish-req
    ()
  ;; Fields
  (reward-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardId"))

(pi:define-message game-xs-finish-res
    ()
  ;; Fields
  (start-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "startTime"))

(pi:define-message game-special-pack-buy-res
    ()
  ;; Fields
  (pack-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "packId"))

(pi:define-message game-special-pack-set-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message game-special-pack-set-res
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message game-special-pack-info-req
    ())

(pi:define-message game-special-pack-info-res
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroId")
  (buy-infos
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "buyInfos"))

(pi:define-message game-level-time-gif-req
    ())

(pi:define-message game-level-time-gif-res
    ()
  ;; Fields
  (gifs
   :index 1 :type level-time-gif :kind :message :label (:repeated :list) :json-name "gifs"))

(pi:define-message game-buy-level-time-gif-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-buy-level-time-gif-res
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (garde
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "garde"))

(pi:define-message game-new-level-time-gif-res
    ()
  ;; Fields
  (gifs
   :index 1 :type level-time-gif :kind :message :label (:repeated :list) :json-name "gifs"))

(pi:define-message game-start-scene-block-req
    ()
  ;; Fields
  (chapter
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "chapter")
  (scene-block
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sceneBlock"))

(pi:define-message game-start-scene-block-res
    ()
  ;; Fields
  (chapter
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "chapter")
  (scene-block
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sceneBlock")
  (defender-team
   :index 3 :type battle-team :kind :message :label (:optional) :json-name "defenderTeam")
  (battle-key
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-start-guild-boss-req
    ())

(pi:define-message game-start-guild-boss-res
    ()
  ;; Fields
  (battle-key
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-start-maze-req
    ()
  ;; Fields
  (pos-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "PosIndex")
  (layer-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "LayerIndex")
  (map-index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "MapIndex"))

(pi:define-message game-start-maze-res
    ()
  ;; Fields
  (pos-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "PosIndex")
  (layer-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "LayerIndex")
  (map-index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "MapIndex")
  (battle-key
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-start-tower-req
    ()
  ;; Fields
  (tower-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "TowerType")
  (tower-level
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "TowerLevel"))

(pi:define-message game-start-tower-res
    ()
  ;; Fields
  (tower-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "TowerType")
  (tower-level
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "TowerLevel")
  (battle-key
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-island-list-req
    ())

(pi:define-message game-island-list-res
    ()
  ;; Fields
  (season-no
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "seasonNo")
  (season-start-time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "seasonStartTime")
  (season-end-time
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "seasonEndTime")
  (islands
   :index 4 :type island-info :kind :message :label (:repeated :list) :json-name "islands")
  (island-score
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "islandScore")
  (index
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (play-num
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "playNum")
  (buy-play-num
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyPlayNum")
  (island-task-reward
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "islandTaskReward")
  (target-event-type
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetEventType")
  (target-user-id
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "targetUserId")
  (target-user-name
   :index 12 :type cl:string :kind :scalar :label (:optional) :json-name "targetUserName")
  (target-island-score
   :index 13 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetIslandScore")
  (target-islands
   :index 14 :type island-info :kind :message :label (:repeated :list) :json-name "targetIslands")
  (target-valid-time
   :index 15 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetValidTime")
  (battle-filter
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "battleFilter")
  (caps
   :index 17 :type island-caps :kind :message :label (:repeated :list) :json-name "caps")
  (target-head
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "targetHead")
  (target-head-frame
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "targetHeadFrame")
  (target-head-url
   :index 20 :type cl:string :kind :scalar :label (:optional) :json-name "targetHeadUrl")
  (target-level
   :index 21 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "targetLevel")
  (use-free-num
   :index 22 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "useFreeNum")
  (island-score-reward
   :index 23 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "islandScoreReward")
  (island-max-score
   :index 24 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "islandMaxScore")
  (monster-id
   :index 25 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "monsterId")
  (season-is-end
   :index 26 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "seasonIsEnd")
  (next-start-time
   :index 27 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "nextStartTime")
  (free-search-times
   :index 28 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "freeSearchTimes")
  (non-free-search-times
   :index 29 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "nonFreeSearchTimes")
  (refresh-time
   :index 30 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "refreshTime"))

(pi:define-message game-island-search-req
    ())

(pi:define-message game-island-search-res
    ()
  ;; Fields
  (target-event-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetEventType")
  (target-user-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "targetUserId")
  (target-user-name
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "targetUserName")
  (target-island-score
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetIslandScore")
  (target-islands
   :index 5 :type island-info :kind :message :label (:repeated :list) :json-name "targetIslands")
  (target-valid-time
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetValidTime")
  (battle-filter
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "battleFilter")
  (caps
   :index 8 :type island-caps :kind :message :label (:repeated :list) :json-name "caps")
  (target-head
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "targetHead")
  (target-head-frame
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "targetHeadFrame")
  (target-head-url
   :index 11 :type cl:string :kind :scalar :label (:optional) :json-name "targetHeadUrl")
  (target-level
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "targetLevel")
  (monster-id
   :index 13 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "monsterId")
  (free-search-times
   :index 14 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "freeSearchTimes")
  (non-free-search-times
   :index 15 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "nonFreeSearchTimes"))

(pi:define-message game-island-buy-play-num-req
    ()
  ;; Fields
  (num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-island-start-battle-req
    ()
  ;; Fields
  (event-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eventType")
  (index
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index"))

(pi:define-message game-island-start-battle-res
    ()
  ;; Fields
  (event-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eventType")
  (index
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index")
  (defender-team
   :index 3 :type battle-team :kind :message :label (:optional) :json-name "defenderTeam")
  (battle-key
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-island-battle-result-req
    ()
  ;; Fields
  (event-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eventType")
  (index
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index")
  (result
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (battle-valid
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey")
  (battle-info
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo"))

(pi:define-message game-island-info-change-res
    ()
  ;; Fields
  (islands
   :index 1 :type island-info :kind :message :label (:repeated :list) :json-name "islands")
  (island-score
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "islandScore")
  (island-rank
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "islandRank")
  (play-num
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "playNum")
  (buy-play-num
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyPlayNum")
  (island-task-reward
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "islandTaskReward")
  (battle-filter
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "battleFilter")
  (caps
   :index 8 :type island-caps :kind :message :label (:repeated :list) :json-name "caps")
  (use-free-num
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "useFreeNum")
  (island-score-reward
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "islandScoreReward"))

(pi:define-message game-island-get-reward-req
    ()
  ;; Fields
  (index
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index"))

(pi:define-message game-island-get-task-reward-req
    ()
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-island-take-req
    ()
  ;; Fields
  (src-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "srcIndex")
  (dst-index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dstIndex"))

(pi:define-message game-island-take-res
    ())

(pi:define-message game-island-rank-list-req
    ())

(pi:define-message game-island-rank-list-res
    ()
  ;; Fields
  (players
   :index 1 :type island-rank-player :kind :message :label (:repeated :list) :json-name "players"))

(pi:define-message game-island-kid-reward-req
    ()
  ;; Fields
  (index
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index"))

(pi:define-message game-island-record-req
    ()
  ;; Fields
  (attack
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "attack"))

(pi:define-message game-island-record-res
    ()
  ;; Fields
  (records
   :index 1 :type island-record :kind :message :label (:repeated :list) :json-name "records"))

(pi:define-message game-island-record-battle-info-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-island-record-battle-info-res
    ()
  ;; Fields
  (battle-info
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo"))

(pi:define-message game-island-offline-info-req
    ())

(pi:define-message game-island-offline-info-res
    ()
  ;; Fields
  (offline-info
   :index 1 :type island-offline-info :kind :message :label (:optional) :json-name "offlineInfo"))

(pi:define-message game-island-get-score-reward-req
    ()
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-island-collection-req
    ())

(pi:define-message game-island-collection-res
    ()
  ;; Fields
  (reward-seconds
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardSeconds")
  (reward-num
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "rewardNum")
  (free-times
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "freeTimes")
  (level
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "level")
  (cooling-end-at
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "coolingEndAt"))

(pi:define-message game-island-collection-add-power-req
    ()
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "itemId")
  (times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message island-pack
    (
     :name "island_pack")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-island-pack-req
    ())

(pi:define-message game-island-pack-res
    ()
  ;; Fields
  (packs
   :index 1 :type island-pack :kind :message :label (:repeated :list) :json-name "packs"))

(pi:define-message game-island-collection-reward-req
    ())

(pi:define-message game-island-pack-buy-res
    ()
  ;; Fields
  (pack
   :index 1 :type island-pack :kind :message :label (:optional) :json-name "pack"))

(pi:define-message game-island-collection-level-up-req
    ())

(pi:define-message game-message-show-res
    ()
  ;; Fields
  (msg-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "msgType")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (params
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "params"))

(pi:define-message game-month-recharge-req
    ())

(pi:define-message game-month-recharge-res
    ()
  ;; Fields
  (month-recharge
   :index 37 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monthRecharge"))

(pi:define-message game-lamp-list-req
    ())

(pi:define-message game-lamp-list-res
    ()
  ;; Fields
  (lamps
   :index 1 :type lamp-info :kind :message :label (:repeated :list) :json-name "lamps"))

(pi:define-message game-lamp-change-res
    ()
  ;; Fields
  (lamps
   :index 1 :type lamp-info :kind :message :label (:repeated :list) :json-name "lamps"))

(pi:define-message game-horse-list-req
    ())

(pi:define-message game-horse-list-res
    ()
  ;; Fields
  (horse-list
   :index 1 :type horse :kind :message :label (:repeated :list) :json-name "horseList"))

(pi:define-message game-horse-levup-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-horse-levup-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-horse-slot-levup-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (ids
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "ids"))

(pi:define-message game-horse-slot-levup-res
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (soul-lev
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "soulLev")
  (exp
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "exp"))

(pi:define-message game-horse-reset-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-horse-reset-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-horse-dress-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (horse-id
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "horseId")
  (opt-code
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optCode"))

(pi:define-message game-horse-dress-res
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (horse-id
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "horseId")
  (opt-code
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optCode"))

(pi:define-message game-horse-draw-info-req
    ())

(pi:define-message game-horse-draw-info-res
    ()
  ;; Fields
  (info
   :index 1 :type horse-draw :kind :message :label (:optional) :json-name "info"))

(pi:define-message game-horse-draw-req
    ()
  ;; Fields
  (slot-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotIndex"))

(pi:define-message game-horse-draw-res
    ()
  ;; Fields
  (info
   :index 1 :type horse-draw :kind :message :label (:optional) :json-name "info"))

(pi:define-message game-horse-change-res
    ()
  ;; Fields
  (horse-list
   :index 1 :type horse :kind :message :label (:repeated :list) :json-name "horseList"))

(pi:define-message game-soul-dress-req
    ()
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "itemId")
  (horse-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "horseId")
  (idx
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-soul-dress-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-horse-exchange-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-horse-exchange-res
    ()
  ;; Fields
  (horse
   :index 1 :type horse :kind :message :label (:optional) :json-name "horse"))

(pi:define-message game-horse-lock-item-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-horse-lock-item-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-horse-v2-levup-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-horse-v2-levup-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-horse-v2-stage-up-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-horse-v2-stage-up-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-explore-req
    ())

(pi:define-message game-explore-res
    ()
  ;; Fields
  (map
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "map")
  (coordinate
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "coordinate")
  (remain-times
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "remainTimes")
  (usage-times
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "usageTimes")
  (buy-times
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyTimes")
  (refreshed-map
   :index 6 :type cl:boolean :kind :scalar :label (:optional) :json-name "refreshedMap")
  (chests
   :index 8 :type chest-item :kind :message :label (:repeated :list) :json-name "chests")
  (sellers
   :index 9 :type seller-item :kind :message :label (:repeated :list) :json-name "sellers")
  (today-usage-times
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "todayUsageTimes")
  (cycle
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cycle")
  (level-up
   :index 12 :type cl:boolean :kind :scalar :label (:optional) :json-name "levelUp")
  (level
   :index 13 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "level")
  (season-end-time
   :index 14 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "seasonEndTime")
  (new-season
   :index 15 :type cl:boolean :kind :scalar :label (:optional) :json-name "newSeason")
  (shops
   :index 16 :type mysterious-shop :kind :message :label (:repeated :list) :json-name "shops")
  (double-point
   :index 17 :type cl:boolean :kind :scalar :label (:optional) :json-name "doublePoint")
  (score
   :index 18 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "score"))

(pi:define-message mysterious-shop
    (
     :name "mysterious_shop")
  ;; Fields
  (leavel-time
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "leavelTime")
  (shop-item-list
   :index 2 :type shop-item :kind :message :label (:repeated :list) :json-name "shopItemList")
  (id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (pack-id
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "packId")
  (can-buy-num
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "canBuyNum"))

(pi:define-message game-explore-dice-req
    ()
  ;; Fields
  (times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times")
  (quick
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "quick"))

(pi:define-message chest-item
    (
     :name "chest_item")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (chest-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "chestId")
  (user-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userId")
  (receive-time
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "receiveTime")
  (is-received
   :index 5 :type cl:boolean :kind :scalar :label (:optional) :json-name "isReceived")
  (users
   :index 6 :type help-item :kind :message :label (:repeated :list) :json-name "users"))

(pi:define-message seller-item
    (
     :name "seller_item")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (seller-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "sellerId")
  (user-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userId")
  (leave-time
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "leaveTime")
  (users
   :index 5 :type help-item :kind :message :label (:repeated :list) :json-name "users")
  (is-unread
   :index 6 :type cl:boolean :kind :scalar :label (:optional) :json-name "isUnread"))

(pi:define-message help-item
    (
     :name "help_item")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userId")
  (username
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "username")
  (server-name
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "serverName"))

(pi:define-message game-explore-level-up-res
    ()
  ;; Fields
  (level
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "level")
  (coordinate
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "coordinate")
  (map
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "map"))

(pi:define-message game-explore-buy-dice-req
    ()
  ;; Fields
  (buy-times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyTimes"))

(pi:define-message game-explore-buy-dice-res
    ()
  ;; Fields
  (remain-times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "remainTimes"))

(pi:define-message game-explore-control-dice-req
    ()
  ;; Fields
  (dice
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dice"))

(pi:define-message game-explore-next-map-req
    ())

(pi:define-message game-explore-next-map-res
    ()
  ;; Fields
  (coordinate
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "coordinate")
  (map
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "map"))

(pi:define-message game-explore-open-chest-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-explore-open-chest-res
    ()
  ;; Fields
  (receive-time
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "receiveTime"))

(pi:define-message game-explore-chest-receive-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-explore-chest-receive-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-explore-seller-buy-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-explore-seller-buy-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-explore-random-event-req
    ()
  ;; Fields
  (random-event
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "randomEvent")
  (opt
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "opt"))

(pi:define-message game-explore-random-event-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-explore-roll-dice-res
    ()
  ;; Fields
  (dice
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dice")
  (random-event
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "randomEvent")
  (coordinate
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "coordinate")
  (chest
   :index 4 :type chest-item :kind :message :label (:optional) :json-name "chest")
  (seller
   :index 5 :type seller-item :kind :message :label (:optional) :json-name "seller")
  (add-point
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "addPoint")
  (special-event
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "specialEvent")
  (cycle
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cycle")
  (map
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "map")
  (shop
   :index 10 :type mysterious-shop :kind :message :label (:optional) :json-name "shop"))

(pi:define-message game-explore-help-chest-info-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-explore-help-chest-info-res
    ()
  ;; Fields
  (user-help-times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userHelpTimes")
  (chest-help-times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "chestHelpTimes")
  (chest
   :index 3 :type chest-item :kind :message :label (:optional) :json-name "chest"))

(pi:define-message game-explore-help-seller-info-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-explore-help-seller-info-res
    ()
  ;; Fields
  (user-help-times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userHelpTimes")
  (seller-help-times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "sellerHelpTimes")
  (seller
   :index 3 :type seller-item :kind :message :label (:optional) :json-name "seller"))

(pi:define-message game-explore-help-chest-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-explore-help-chest-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-explore-chest-helped-res
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (user
   :index 2 :type help-item :kind :message :label (:optional) :json-name "user")
  (chest-id
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "chestId"))

(pi:define-message game-explore-help-seller-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-explore-help-seller-res
    ()
  ;; Fields
  (status
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-explore-seller-helped-res
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (user
   :index 2 :type help-item :kind :message :label (:optional) :json-name "user")
  (seller-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "sellerId"))

(pi:define-message game-explore-seller-and-chest-req
    ())

(pi:define-message game-explore-seller-and-chest-res
    ()
  ;; Fields
  (chests
   :index 1 :type chest-item :kind :message :label (:repeated :list) :json-name "chests")
  (sellers
   :index 2 :type seller-item :kind :message :label (:repeated :list) :json-name "sellers")
  (shops
   :index 3 :type mysterious-shop :kind :message :label (:repeated :list) :json-name "shops"))

(pi:define-message game-explore-season-info-req
    ())

(pi:define-message game-explore-season-info-res
    ()
  ;; Fields
  (leader-board
   :index 1 :type explore-leader-board-item :kind :message :label (:repeated :list) :json-name "leaderBoard")
  (self
   :index 2 :type explore-leader-board-item :kind :message :label (:optional) :json-name "self")
  (season-end-time
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "seasonEndTime"))

(pi:define-message game-explore-quick-dice-res
    ()
  ;; Fields
  (records
   :index 1 :type game-explore-roll-dice-res :kind :message :label (:repeated :list) :json-name "records"))

(pi:define-message game-explore-mysterious-shop-buy-req
    ()
  ;; Fields
  (shop-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "shopId")
  (product-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "productId")
  (buy-num
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyNum"))

(pi:define-message game-explore-mysterious-shop-buy-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-explore-pack-buy-res
    ()
  ;; Fields
  (pack-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "packId")
  (shop-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "shopId"))

(pi:define-message explore-leader-board-item
    (
     :name "explore_leader_board_item")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userId")
  (username
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "username")
  (head
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (rank
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rank")
  (lev
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lev")
  (score
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "score")
  (fight-score
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "fightScore")
  (server-name
   :index 10 :type cl:string :kind :scalar :label (:optional) :json-name "serverName")
  (server-id
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "serverId")
  (explore-level
   :index 12 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "exploreLevel"))

(pi:define-message game-pet-info-req
    ())

(pi:define-message game-pet-info-res
    ()
  ;; Fields
  (pets
   :index 1 :type pet :kind :message :label (:repeated :list) :json-name "pets"))

(pi:define-message game-add-pet-res
    ()
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (num
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-pet-add-equip-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-pet-add-equip-res
    ()
  ;; Fields
  (pet
   :index 1 :type pet :kind :message :label (:optional) :json-name "pet"))

(pi:define-message game-pet-equip-combind-req
    ()
  ;; Fields
  (eqp-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqpId"))

(pi:define-message game-pet-equip-combind-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-pet-level-up-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-pet-level-up-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-pet-star-up-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-pet-star-up-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-pet-refine-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (consume-table
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "consumeTable")
  (consume-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "consumeId")
  (times
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times")
  (lock-idx
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "lockIdx"))

(pi:define-message game-pet-refine-res
    ()
  ;; Fields
  (wait-entry
   :index 1 :type entry-group :kind :message :label (:repeated :list) :json-name "waitEntry"))

(pi:define-message game-pet-refine-choose-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-pet-refine-choose-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-pet-star-entry-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-pet-star-entry-res
    ()
  ;; Fields
  (current-entry
   :index 1 :type entry-group :kind :message :label (:optional) :json-name "currentEntry"))

(pi:define-message game-pet-team-skills-req
    ()
  ;; Fields
  (team-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "teamType"))

(pi:define-message game-pet-team-skills-res
    ()
  ;; Fields
  (pet-skills
   :index 1 :type pet-skill :kind :message :label (:repeated :list) :json-name "petSkills"))

(pi:define-message game-world-boss-req
    ()
  ;; Fields
  (fp
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fp")
  (data-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-world-boss-res
    ()
  ;; Fields
  (bosss
   :index 1 :type world-boss :kind :message :label (:repeated :list) :json-name "bosss")
  (battle-num
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "battleNum")
  (had-rewards
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "hadRewards")
  (day-index
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dayIndex")
  (end-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (buy-num
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyNum")
  (battle-nums
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "battleNums")
  (buy-nums
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "buyNums"))

(pi:define-message game-world-boss-battle-start-req
    ()
  ;; Fields
  (boss-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossId")
  (data-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-world-boss-battle-start-res
    ()
  ;; Fields
  (battle-key
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey")
  (boss-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossId")
  (blood
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "blood"))

(pi:define-message game-world-boss-battle-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (boss-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossId")
  (hurt
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (battle-info
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo")
  (battle-valid
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-world-boss-battle-res
    ()
  ;; Fields
  (hurt
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (battle-key
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey")
  (blood
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "blood")
  (kill
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "kill"))

(pi:define-message game-world-boss-kill-reward-req
    ()
  ;; Fields
  (boss-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossId")
  (data-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-world-boss-rank-list-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (boss-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossId"))

(pi:define-message game-world-boss-rank-list-res
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (boss-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossId")
  (players
   :index 3 :type world-boss-player :kind :message :label (:repeated :list) :json-name "players"))

(pi:define-message game-world-boss-buy-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (num
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num")
  (boss-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossId"))

(pi:define-message game-world-boss-buy-res
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (num
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num")
  (boss-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossId"))

(pi:define-message game-online-req
    ())

(pi:define-message game-online-res
    ()
  ;; Fields
  (sys-open-time
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "sysOpenTime")
  (ol-time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "olTime")
  (begin-time
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "beginTime")
  (reward-time
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardTime")
  (index
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index")
  (big-reward
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bigReward"))

(pi:define-message game-online-reward-req
    ()
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message world-boss
    (
     :name "world_boss")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (blood
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "blood")
  (kill
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "kill")
  (refresh-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime"))

(pi:define-message world-boss-player
    (
     :name "world_boss_player")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userId")
  (server-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "serverId")
  (server-name
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "serverName")
  (name
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (head
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "head")
  (hurt
   :index 6 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (fp
   :index 7 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fp")
  (level
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "level"))

(pi:define-message pet
    (
     :name "pet")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (lev
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lev")
  (star
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "star")
  (num
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num")
  (eqp1
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp1")
  (eqp2
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp2")
  (eqp3
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp3")
  (eqp4
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp4")
  (eqp5
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp5")
  (eqp6
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp6")
  (star-entry
   :index 12 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "starEntry")
  (heros
   :index 13 :type hero-pos :kind :message :label (:repeated :list) :json-name "heros")
  (current-entry
   :index 14 :type entry-group :kind :message :label (:optional) :json-name "currentEntry")
  (wait-entries
   :index 15 :type entry-group :kind :message :label (:repeated :list) :json-name "waitEntries")
  (lock-idx
   :index 16 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "lockIdx"))

(pi:define-message entry-group
    (
     :name "entry_group")
  ;; Fields
  (entries
   :index 1 :type pet-entry :kind :message :label (:repeated :list) :json-name "entries"))

(pi:define-message pet-entry
    (
     :name "pet_entry")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (es-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "esId")
  (idx
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx")
  (value
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "value")
  (fight-point
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "fightPoint")
  (times
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-pet-v2-info-req
    ())

(pi:define-message game-pet-v2-info-res
    ()
  ;; Fields
  (pets
   :index 1 :type pet-v2 :kind :message :label (:repeated :list) :json-name "pets"))

(pi:define-message game-pet-v2-activate-req
    ()
  ;; Fields
  (pet-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "petId"))

(pi:define-message game-pet-v2-activate-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-pet-v2-level-up-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-pet-v2-level-up-res
    ()
  ;; Fields
  (level
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "level"))

(pi:define-message game-pet-v2-soul-level-up-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (pos
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message game-pet-v2-soul-level-up-res
    ()
  ;; Fields
  (star
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "star")
  (soul-level
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "soulLevel"))

(pi:define-message game-pet-v2-add-equip-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-pet-v2-add-equip-res
    ()
  ;; Fields
  (pet
   :index 1 :type pet-v2 :kind :message :label (:optional) :json-name "pet"))

(pi:define-message game-pet-v2-star-entry-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-pet-v2-star-entry-res
    ()
  ;; Fields
  (current-entry
   :index 1 :type entry-group :kind :message :label (:optional) :json-name "currentEntry"))

(pi:define-message game-pet-v2-refine-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-pet-v2-refine-res
    ()
  ;; Fields
  (entry
   :index 1 :type pet-entry :kind :message :label (:optional) :json-name "entry"))

(pi:define-message game-pet-v2-refine-choose-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-pet-v2-refine-choose-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-break-down-items-req
    ()
  ;; Fields
  (items
   :index 1 :type break-down-item :kind :message :label (:repeated :list) :json-name "items"))

(pi:define-message break-down-item
    (
     :name "break_down_item")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (num
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-break-down-items-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message pet-v2
    (
     :name "pet_v2")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (lev
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lev")
  (star
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "star")
  (eqp1
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp1")
  (eqp2
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp2")
  (eqp3
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp3")
  (eqp4
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp4")
  (eqp5
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp5")
  (eqp6
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eqp6")
  (star-entry
   :index 12 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "starEntry")
  (heros
   :index 13 :type hero-pos :kind :message :label (:repeated :list) :json-name "heros")
  (current-entry
   :index 14 :type entry-group :kind :message :label (:optional) :json-name "currentEntry")
  (wait-entry
   :index 15 :type entry-group :kind :message :label (:optional) :json-name "waitEntry")
  (soul-level
   :index 16 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "soulLevel"))

(pi:define-message game-pet-v2-add-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroId")
  (pet-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "petId")
  (pos
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message game-pet-v2-add-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-pet-v2-remove-req
    ()
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroId")
  (pet-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "petId"))

(pi:define-message game-pet-v2-remove-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-pet-v2-change-res
    ()
  ;; Fields
  (pet
   :index 1 :type pet-v2 :kind :message :label (:optional) :json-name "pet"))

(pi:define-message game-loop-activity-info-req
    ())

(pi:define-message game-loop-activity-info-res
    ()
  ;; Fields
  (loop-activities
   :index 1 :type loop-activity-item :kind :message :label (:repeated :list) :json-name "loopActivities"))

(pi:define-message loop-activity-item
    (
     :name "loop_activity_item")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (end-time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "endTime")
  (start-time
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "startTime"))

(pi:define-message game-pray-info-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-pray-info-res
    ()
  ;; Fields
  (integral
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "integral")
  (pool
   :index 2 :type pray-pool-item :kind :message :label (:repeated :list) :json-name "pool")
  (rewards
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "rewards"))

(pi:define-message game-do-pray-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-do-pray-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-pray-reward-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (reward-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardId"))

(pi:define-message game-pray-reward-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-pray-pool-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (idx
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-pray-pool-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-loop-exchange-info-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-loop-exchange-info-res
    ()
  ;; Fields
  (items
   :index 1 :type loop-exchange-item :kind :message :label (:repeated :list) :json-name "items")
  (server-items
   :index 2 :type loop-exchange-item :kind :message :label (:repeated :list) :json-name "serverItems"))

(pi:define-message game-do-exchange-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-do-exchange-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-loop-activity-pack-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-loop-activity-pack-res
    ()
  ;; Fields
  (list
   :index 1 :type loop-pack :kind :message :label (:repeated :list) :json-name "list")
  (day-idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dayIdx"))

(pi:define-message game-loop-activity-pack-batch-req
    ()
  ;; Fields
  (data-ids
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "dataIds"))

(pi:define-message loop-activity-batch-pack
    (
     :name "loop_activity_batch_pack")
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (pack
   :index 2 :type game-loop-activity-pack-res :kind :message :label (:optional) :json-name "pack"))

(pi:define-message game-loop-activity-pack-batch-res
    ()
  ;; Fields
  (loop-packs
   :index 1 :type loop-activity-batch-pack :kind :message :label (:repeated :list) :json-name "loopPacks"))

(pi:define-message game-loop-activity-pack-buy-res
    ()
  ;; Fields
  (pack
   :index 1 :type loop-pack :kind :message :label (:optional) :json-name "pack"))

(pi:define-message game-loop-activity-painter-info-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-loop-activity-painter-info-res
    ()
  ;; Fields
  (puzzle
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "puzzle"))

(pi:define-message game-loop-activity-painter-puzzle-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (pos
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message game-loop-activity-painter-puzzle-res
    ()
  ;; Fields
  (puzzle
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "puzzle"))

(pi:define-message game-loop-task-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-loop-task-res
    ()
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message game-loop-task-batch-req
    ()
  ;; Fields
  (data-ids
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "dataIds"))

(pi:define-message loop-activity-batch-task
    (
     :name "loop_activity_batch_task")
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (task
   :index 2 :type game-loop-task-res :kind :message :label (:optional) :json-name "task"))

(pi:define-message game-loop-task-batch-res
    ()
  ;; Fields
  (loop-tasks
   :index 1 :type loop-activity-batch-task :kind :message :label (:repeated :list) :json-name "loopTasks"))

(pi:define-message game-loop-task-reward-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-loop-task-reward-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-loop-task-mdy-res
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (tasks
   :index 2 :type task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message game-loop-task-buy-reward-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-loop-task-buy-reward-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-loop-sign-info-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-loop-sign-info-res
    ()
  ;; Fields
  (recharge
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "recharge")
  (day-idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dayIdx")
  (start-time
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "startTime")
  (end-time
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "endTime")
  (records
   :index 5 :type loop-sign :kind :message :label (:repeated :list) :json-name "records"))

(pi:define-message game-loop-sign-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-loop-sign-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-loop-shop-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-loop-shop-res
    ()
  ;; Fields
  (items
   :index 1 :type shop-item :kind :message :label (:repeated :list) :json-name "items"))

(pi:define-message game-loop-shop-buy-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (product-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "productId")
  (buy-num
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyNum"))

(pi:define-message game-loop-shop-buy-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message loop-sign
    (
     :name "loop_sign")
  ;; Fields
  (day-idx
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dayIdx")
  (status
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message loop-pack
    (
     :name "loop_pack")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message loop-exchange-item
    (
     :name "loop_exchange_item")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (num
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message pray-pool-item
    (
     :name "pray_pool_item")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-loop-seven-day-gift-info-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-loop-seven-day-gift-info-res
    ()
  ;; Fields
  (day-idx
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dayIdx")
  (start-time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "startTime")
  (end-time
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "endTime")
  (records
   :index 4 :type loop-serven-day-gift :kind :message :label (:repeated :list) :json-name "records"))

(pi:define-message loop-serven-day-gift
    (
     :name "loop_serven_day_gift")
  ;; Fields
  (day-idx
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dayIdx")
  (status
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-loop-seven-day-gift-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-loop-seven-day-gift-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-loop-blacksmith-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-loop-blacksmith-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-loop-boss-info-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-loop-boss-info-res
    ()
  ;; Fields
  (leader-board
   :index 1 :type boss-leader-board-item :kind :message :label (:repeated :list) :json-name "leaderBoard")
  (self
   :index 2 :type boss-leader-board-item :kind :message :label (:optional) :json-name "self")
  (times
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times")
  (today-buy-times
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "todayBuyTimes")
  (pos-list
   :index 5 :type loop-team-pos :kind :message :label (:repeated :list) :json-name "posList"))

(pi:define-message loop-team-pos
    (
     :name "loop_team_pos")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (pos
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message game-loop-start-boss-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (pos-list
   :index 2 :type loop-team-pos :kind :message :label (:repeated :list) :json-name "posList"))

(pi:define-message game-loop-start-boss-res
    ()
  ;; Fields
  (battle-key
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-loop-boss-battle-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (hurt
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (battle-info
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo")
  (battle-valid
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-loop-boss-battle-res
    ()
  ;; Fields
  (hurt
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (battle-key
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-loop-buy-boss-battle-times-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (times
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-loop-buy-boss-battle-times-res
    ()
  ;; Fields
  (times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "times"))

(pi:define-message game-loop-garden-info-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (next-cycle
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "nextCycle"))

(pi:define-message game-loop-garden-info-res
    ()
  ;; Fields
  (puzzle
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "puzzle")
  (cycle
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cycle")
  (idx
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx")
  (rh1
   :index 4 :type loop-garden-rh :kind :message :label (:repeated :list) :json-name "rh1")
  (primary-pos
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "primaryPos"))

(pi:define-message loop-garden-rh
    (
     :name "loop_garden_rh")
  ;; Fields
  (idx
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx")
  (num
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-loop-garden-choose-reward-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (idx
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message game-loop-garden-choose-reward-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-loop-garden-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (pos
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message game-loop-garden-res
    ()
  ;; Fields
  (puzzle
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "puzzle")
  (is-primary
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "isPrimary"))

(pi:define-message game-zero-go-info-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-zero-go-info-res
    ()
  ;; Fields
  (day-idx
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dayIdx")
  (start-time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "startTime")
  (end-time
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "endTime")
  (reward-index
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardIndex")
  (had-buy
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hadBuy")
  (had-reward
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hadReward"))

(pi:define-message game-zero-go-reward-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (day-index
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dayIndex"))

(pi:define-message game-zero-go-reward-res
    ()
  ;; Fields
  (reward-times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardTimes"))

(pi:define-message game-zero-go-buy-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-garden-npc-task-list-req
    ())

(pi:define-message game-garden-npc-task-list-res
    ()
  ;; Fields
  (tasks
   :index 1 :type garden-npc-task :kind :message :label (:repeated :list) :json-name "tasks")
  (day-reward-fetch
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "dayRewardFetch")
  (max-task-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxTaskNum")
  (cur-task-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "curTaskNum")
  (reset-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "resetTime")
  (refresh-time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime"))

(pi:define-message garden-npc-task-bag-req
    ())

(pi:define-message garden-npc-task-bag-res
    ()
  ;; Fields
  (bag-info
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "bagInfo"))

(pi:define-message garden-npc-task-bag-take-req
    ()
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId"))

(pi:define-message garden-npc-task-bag-change-res
    ()
  ;; Fields
  (item-changes
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "itemChanges")
  (item-deletes
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "itemDeletes"))

(pi:define-message garden-finish-npc-task-req
    ()
  ;; Fields
  (task-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskId")
  (float-list
   :index 2 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList")
  (npc-pos
   :index 3 :type grid-pos :kind :message :label (:optional) :json-name "npcPos"))

(pi:define-message garden-npc-task-change-res
    ()
  ;; Fields
  (tasks
   :index 1 :type garden-npc-task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message garden-npc-task-day-reward-req
    ()
  ;; Fields
  (reward-index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardIndex")
  (float-list
   :index 2 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message garden-npc-task-day-reward-res
    ()
  ;; Fields
  (day-reward-fetch
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "dayRewardFetch"))

(pi:define-message garden-npc-task-refresh-req
    ()
  ;; Fields
  (task-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskId"))

(pi:define-message garden-npc-task-num-change-res
    ()
  ;; Fields
  (max-task-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxTaskNum")
  (cur-task-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "curTaskNum"))

(pi:define-message garden-beast-fee-req
    ()
  ;; Fields
  (src-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "srcId")
  (dst-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dstId"))

(pi:define-message garden-beast-get-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message garden-beast-task-list-req
    ()
  ;; Fields
  (list-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "listType"))

(pi:define-message garden-beast-task-list-res
    ()
  ;; Fields
  (tasks
   :index 1 :type beast-task-info :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message garden-beast-task-push-req
    ()
  ;; Fields
  (fit-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fitType")
  (recv-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvType")
  (recv-params
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "recvParams")
  (beast-id
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "beastId"))

(pi:define-message garden-beast-task-finish-req
    ()
  ;; Fields
  (task-id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "taskId")
  (beast-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "beastId")
  (from
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "from"))

(pi:define-message garden-beast-task-change-res
    ()
  ;; Fields
  (add-tasks
   :index 1 :type beast-task-info :kind :message :label (:repeated :list) :json-name "addTasks")
  (change-tasks
   :index 2 :type beast-task-info :kind :message :label (:repeated :list) :json-name "changeTasks")
  (delete-tasks
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "deleteTasks"))

(pi:define-message garden-beast-task-is-finish-req
    ()
  ;; Fields
  (task-id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "taskId"))

(pi:define-message garden-beast-task-is-finish-res
    ()
  ;; Fields
  (task-id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "taskId")
  (finish
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "finish"))

(pi:define-message arena-puzzle-exchange-req
    ()
  ;; Fields
  (recv-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvType")
  (recv-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvId")
  (puzzle-type
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "puzzleType")
  (target-puzzle-type
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetPuzzleType"))

(pi:define-message arena-puzzle-exchange-res
    ()
  ;; Fields
  (info
   :index 1 :type puzzle-exchagne-info :kind :message :label (:optional) :json-name "info"))

(pi:define-message arena-puzzle-exchange-acc-req
    ()
  ;; Fields
  (exchange-id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "exchangeId"))

(pi:define-message arena-puzzle-exchange-acc-res
    ()
  ;; Fields
  (info
   :index 1 :type puzzle-exchagne-info :kind :message :label (:optional) :json-name "info"))

(pi:define-message arena-puzzle-provide-req
    ()
  ;; Fields
  (recv-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvType")
  (recv-uid
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvUid")
  (puzzle-type
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "puzzleType")
  (puzzle-num
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "puzzleNum"))

(pi:define-message arena-puzzle-provide-res
    ())

(pi:define-message arena-puzzle-put-req
    ()
  ;; Fields
  (puzzle-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "puzzleType"))

(pi:define-message arena-puzzle-put-res
    ()
  ;; Fields
  (puzzle-value
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "puzzleValue"))

(pi:define-message arena-puzzle-reward-req
    ()
  ;; Fields
  (index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index"))

(pi:define-message arena-puzzle-check-req
    ()
  ;; Fields
  (exchange-id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "exchangeId"))

(pi:define-message arena-puzzle-check-res
    ()
  ;; Fields
  (exchange-id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "exchangeId")
  (finish
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "finish"))

(pi:define-message gardend-item-comb-req
    ()
  ;; Fields
  (consu
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "consu")
  (reward
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "reward"))

(pi:define-message gardend-add-req
    ()
  ;; Fields
  (config-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "configId")
  (x
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "x")
  (y
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "y"))

(pi:define-message gardend-remove-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message gardend-link-reward-req
    ()
  ;; Fields
  (config-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "configId"))

(pi:define-message game-zans-req
    ())

(pi:define-message game-zans-res
    ()
  ;; Fields
  (zans
   :index 1 :type zan-info :kind :message :label (:repeated :list) :json-name "zans"))

(pi:define-message game-tie-req
    ()
  ;; Fields
  (hid
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hid"))

(pi:define-message game-tie-res
    ()
  ;; Fields
  (zans
   :index 1 :type tie-info :kind :message :label (:repeated :list) :json-name "zans"))

(pi:define-message game-send-tie-req
    ()
  ;; Fields
  (hid
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hid")
  (content
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "content"))

(pi:define-message game-send-tie-res
    ())

(pi:define-message game-zan-req
    ()
  ;; Fields
  (hid
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hid")
  (tid
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "tid"))

(pi:define-message game-zan-res
    ())

(pi:define-message game-roulette-info-req
    ())

(pi:define-message game-roulette-info-res
    ()
  ;; Fields
  (total-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "totalNum")
  (tody-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todyNum")
  (refresh-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime")
  (luck-score
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "luckScore")
  (rewards
   :index 5 :type roulette-reward :kind :message :label (:repeated :list) :json-name "rewards")
  (refresh-num
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshNum")
  (not-big-num
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "notBigNum")
  (roulettes
   :index 8 :type roulettes :kind :message :label (:repeated :list) :json-name "roulettes")
  (records
   :index 9 :type roulette-record :kind :message :label (:repeated :list) :json-name "records")
  (tody-single-num
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todySingleNum"))

(pi:define-message game-roulette-draw-req
    ()
  ;; Fields
  (draw-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "drawType"))

(pi:define-message game-roulette-draw-res
    ()
  ;; Fields
  (total-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "totalNum")
  (tody-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todyNum")
  (luck-score
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "luckScore")
  (not-big-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "notBigNum")
  (index
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "index")
  (reward
   :index 6 :type game-reward-res :kind :message :label (:repeated :list) :json-name "reward")
  (tody-single-num
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todySingleNum")
  (draw-score
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "drawScore")
  (refresh
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refresh")
  (roulettes
   :index 10 :type roulettes :kind :message :label (:repeated :list) :json-name "roulettes"))

(pi:define-message game-roulette-refresh-req
    ())

(pi:define-message game-roulette-refresh-res
    ()
  ;; Fields
  (refresh-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshNum")
  (roulettes
   :index 2 :type roulettes :kind :message :label (:repeated :list) :json-name "roulettes"))

(pi:define-message game-roulette-get-reward-req
    ()
  ;; Fields
  (score
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "score"))

(pi:define-message game-roulette-get-reward-res
    ()
  ;; Fields
  (rewards
   :index 1 :type roulette-reward :kind :message :label (:repeated :list) :json-name "rewards"))

(pi:define-message game-roulette-record-res
    ()
  ;; Fields
  (records
   :index 1 :type roulette-record :kind :message :label (:repeated :list) :json-name "records"))

(pi:define-message game-hero-star-info-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId"))

(pi:define-message game-hero-star-info-res
    ()
  ;; Fields
  (hero-ids
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "heroIds")
  (lock
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lock"))

(pi:define-message game-hero-star-select-req
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (hero-ids
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "heroIds")
  (lock
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lock"))

(pi:define-message game-hero-star-select-res
    ()
  ;; Fields
  (hero-ids
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "heroIds")
  (lock
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lock"))

(pi:define-message roulettes
    (
     :name "roulettes")
  ;; Fields
  (reward
   :index 1 :type game-reward-res :kind :message :label (:optional) :json-name "reward")
  (had-draw
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hadDraw"))

(pi:define-message roulette-reward
    (
     :name "roulette_reward")
  ;; Fields
  (score
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "score")
  (reward
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "reward"))

(pi:define-message roulette-record
    (
     :name "roulette_record")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (reward
   :index 3 :type game-reward-res :kind :message :label (:optional) :json-name "reward"))

(pi:define-message zan-info
    (
     :name "zan_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (num
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num")
  (self
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "self"))

(pi:define-message tie-info
    (
     :name "tie_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (uid
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "uid")
  (head
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "head")
  (name
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (zan
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "zan")
  (time
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "time")
  (hid
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hid")
  (level
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "level")
  (content
   :index 9 :type cl:string :kind :scalar :label (:optional) :json-name "content")
  (self
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "self"))

(pi:define-message puzzle-exchagne-info
    (
     :name "puzzle_exchagne_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (send-uid
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendUid")
  (send-server-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendServerId")
  (send-server-name
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "sendServerName")
  (send-name
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "sendName")
  (send-head
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendHead")
  (send-head-url
   :index 7 :type cl:string :kind :scalar :label (:optional) :json-name "sendHeadUrl")
  (recv-uid
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvUid")
  (recv-server-id
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvServerId")
  (recv-server-name
   :index 10 :type cl:string :kind :scalar :label (:optional) :json-name "recvServerName")
  (recv-name
   :index 11 :type cl:string :kind :scalar :label (:optional) :json-name "recvName")
  (recv-head
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvHead")
  (recv-head-url
   :index 13 :type cl:string :kind :scalar :label (:optional) :json-name "recvHeadUrl")
  (send-time
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendTime")
  (finish-time
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "finishTime")
  (recv-type
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvType")
  (puzzle-type
   :index 17 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "puzzleType")
  (target-puzzle-type
   :index 18 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetPuzzleType")
  (status
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message beast-task-info
    (
     :name "beast_task_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (send-uid
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendUid")
  (send-server-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendServerId")
  (send-server-name
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "sendServerName")
  (send-name
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "sendName")
  (send-head
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendHead")
  (send-head-url
   :index 7 :type cl:string :kind :scalar :label (:optional) :json-name "sendHeadUrl")
  (recv-uid
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvUid")
  (recv-server-id
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvServerId")
  (recv-server-name
   :index 10 :type cl:string :kind :scalar :label (:optional) :json-name "recvServerName")
  (recv-name
   :index 11 :type cl:string :kind :scalar :label (:optional) :json-name "recvName")
  (recv-head
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recvHead")
  (recv-head-url
   :index 13 :type cl:string :kind :scalar :label (:optional) :json-name "recvHeadUrl")
  (send-time
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendTime")
  (finish-time
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "finishTime")
  (fit-type
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fitType")
  (send-beast-id
   :index 17 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "sendBeastId")
  (recv-beast-id
   :index 18 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "recvBeastId")
  (status
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (rewards
   :index 20 :type game-reward-res :kind :message :label (:optional) :json-name "rewards")
  (guild-name
   :index 21 :type cl:string :kind :scalar :label (:optional) :json-name "guildName"))

(pi:define-message lamp-info
    (
     :name "lamp_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (status
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (start
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "start")
  (end
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "end")
  (msg
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "msg")
  (interval
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "interval"))

(pi:define-message horse
    (
     :name "horse")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (soul-lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "soulLev")
  (item-id1
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId1")
  (item-id2
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId2")
  (item-id3
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId3")
  (item-id4
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId4")
  (hero-id
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (exp
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "exp")
  (stage
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "stage")
  (level
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "level")
  (item-cfg-id1
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId1")
  (item-cfg-id2
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId2")
  (item-cfg-id3
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId3")
  (item-cfg-id4
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId4"))

(pi:define-message horse-draw
    (
     :name "horse_draw")
  ;; Fields
  (slot-time1
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotTime1")
  (slot-time2
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotTime2")
  (slot-time3
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotTime3")
  (slot-cfg1
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotCfg1")
  (slot-cfg2
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotCfg2")
  (slot-cfg3
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotCfg3")
  (slot-coin1
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotCoin1")
  (slot-coin2
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotCoin2")
  (slot-coin3
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slotCoin3")
  (exp
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "exp"))

(pi:define-message island-record
    (
     :name "island_record")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (peer-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "peerId")
  (peer-name
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "peerName")
  (peer-level
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "peerLevel")
  (head
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 7 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (be-defener
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "beDefener")
  (result
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (rewards
   :index 10 :type game-reward-res :kind :message :label (:optional) :json-name "rewards")
  (time
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "time")
  (peer-score
   :index 12 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "peerScore")
  (peer-score-add
   :index 13 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "peerScoreAdd")
  (score
   :index 14 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "score")
  (score-add
   :index 15 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "scoreAdd")
  (is-robot
   :index 16 :type cl:boolean :kind :scalar :label (:optional) :json-name "isRobot"))

(pi:define-message island-item-info
    (
     :name "island_item_info")
  ;; Fields
  (index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (status
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (defence-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defenceNum")
  (get
   :index 4 :type game-reward-res :kind :message :label (:optional) :json-name "get")
  (loss
   :index 5 :type game-reward-res :kind :message :label (:optional) :json-name "loss"))

(pi:define-message island-offline-info
    (
     :name "island_offline_info")
  ;; Fields
  (item-infos
   :index 1 :type island-item-info :kind :message :label (:repeated :list) :json-name "itemInfos")
  (score1
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "score1")
  (score2
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "score2"))

(pi:define-message island-caps
    (
     :name "island_caps")
  ;; Fields
  (index
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index")
  (event-type-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "eventTypeId")
  (had-take
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hadTake"))

(pi:define-message island-info
    (
     :name "island_info")
  ;; Fields
  (index
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index")
  (status
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status")
  (cfg-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (start-time
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "startTime")
  (end-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (grow-time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "growTime")
  (robot
   :index 7 :type robot-island :kind :message :label (:optional) :json-name "robot"))

(pi:define-message robot-island
    (
     :name "robot_island")
  ;; Fields
  (monster-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "monsterId")
  (resource
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "resource"))

(pi:define-message island-rank-player
    (
     :name "island_rank_player")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (head
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (index
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (lev
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (fight-score
   :index 8 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightScore")
  (score
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "score")
  (robot-cfg-id
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "robotCfgId"))

(pi:define-message level-time-gif
    (
     :name "level_time_gif")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (gif-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gifId")
  (end-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (task-cfg-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskCfgId")
  (garde
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "garde"))

(pi:define-message battle-equip
    (
     :name "battle_equip")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (level
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level")
  (index
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index"))

(pi:define-message battle-pet
    (
     :name "battle_pet")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (level
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level")
  (star
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "star")
  (pos
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "pos")
  (equips
   :index 6 :type battle-equip :kind :message :label (:repeated :list) :json-name "equips")
  (calpetentries
   :index 7 :type cal-pet-entries :kind :message :label (:repeated :list) :json-name "calpetentries")
  (calpetsouls
   :index 8 :type cal-pet-soul-item :kind :message :label (:repeated :list) :json-name "calpetsouls"))

(pi:define-message battle-manual
    (
     :name "battle_manual")
  ;; Fields
  (total-exp-level
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "totalExpLevel")
  (hero-level
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroLevel")
  (manual-list
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "manualList"))

(pi:define-message battle-hero
    (
     :name "battle_hero")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (pos
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "pos")
  (level
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level")
  (rank
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rank")
  (equips
   :index 6 :type battle-equip :kind :message :label (:repeated :list) :json-name "equips")
  (pet
   :index 7 :type battle-pet :kind :message :label (:optional) :json-name "pet")
  (manual
   :index 8 :type battle-manual :kind :message :label (:optional) :json-name "manual")
  (garden-level
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenLevel")
  (fight-point
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fightPoint")
  (garden-build
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "gardenBuild")
  (horse
   :index 12 :type battle-horse :kind :message :label (:optional) :json-name "horse")
  (player-title
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "playerTitle"))

(pi:define-message battle-horse
    (
     :name "battle_horse")
  ;; Fields
  (cfg
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfg")
  (soul-lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "soulLev")
  (item-id1
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId1")
  (item-id2
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId2")
  (item-id3
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId3")
  (item-id4
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId4")
  (level
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "level")
  (item-cfg-id1
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId1")
  (item-cfg-id2
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId2")
  (item-cfg-id3
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId3")
  (item-cfg-id4
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId4"))

(pi:define-message cal-pet
    (
     :name "cal_pet")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (lev
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lev")
  (star
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "star")
  (petequips
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "petequips")
  (calpetentries
   :index 6 :type cal-pet-entries :kind :message :label (:repeated :list) :json-name "calpetentries")
  (calpetsouls
   :index 7 :type cal-pet-soul-item :kind :message :label (:repeated :list) :json-name "calpetsouls"))

(pi:define-message cal-pet-entries
    (
     :name "cal_pet_entries")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (power
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "power")
  (propnum
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "propnum"))

(pi:define-message cal-pet-soul-item
    (
     :name "cal_pet_soulItem")
  ;; Fields
  (soul-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "soulId")
  (soul-lev
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "soulLev"))

(pi:define-message cal-pet-equip
    (
     :name "cal_pet_equip")
  ;; Fields
  (equip
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "equip"))

(pi:define-message cal-current-power
    (
     :name "cal_current_power")
  ;; Fields
  (power
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "power"))

(pi:define-message cal-hero
    (
     :name "cal_hero")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (pos
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "pos")
  (level
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level")
  (rank
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rank")
  (equips
   :index 6 :type battle-equip :kind :message :label (:repeated :list) :json-name "equips")
  (pet
   :index 7 :type cal-pet :kind :message :label (:optional) :json-name "pet")
  (manual
   :index 8 :type battle-manual :kind :message :label (:optional) :json-name "manual")
  (garden-level
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenLevel")
  (garden-build
   :index 11 :type cal-garden-build :kind :message :label (:repeated :list) :json-name "gardenBuild")
  (horse
   :index 12 :type cal-horse :kind :message :label (:optional) :json-name "horse")
  (player-title
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "playerTitle"))

(pi:define-message cal-garden-build
    (
     :name "cal_garden_build")
  ;; Fields
  (cfg
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfg")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message cal-horse
    (
     :name "cal_horse")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (cfg
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfg")
  (soul-lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "soulLev")
  (hero-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (item-id1
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId1")
  (item-id2
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId2")
  (item-id3
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId3")
  (item-id4
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId4")
  (level
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "level")
  (item-cfg-id1
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId1")
  (item-cfg-id2
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId2")
  (item-cfg-id3
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId3")
  (item-cfg-id4
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemCfgId4"))

(pi:define-message battle-team
    (
     :name "battle_team")
  ;; Fields
  (team-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamType")
  (hero
   :index 2 :type battle-hero :kind :message :label (:repeated :list) :json-name "hero")
  (helpers
   :index 3 :type maze-helper :kind :message :label (:repeated :list) :json-name "helpers")
  (maze-buffs
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "mazeBuffs")
  (guild-buffs
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "guildBuffs")
  (block-id
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blockId")
  (maze-monst-group
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mazeMonstGroup")
  (maze-bna
   :index 8 :type hero-bloodnanger :kind :message :label (:repeated :list) :json-name "mazeBna")
  (maze-bloods
   :index 9 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "mazeBloods")
  (map-idx
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIdx")
  (layer-idx
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIdx")
  (path
   :index 12 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "path")
  (cur-select-buff
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "curSelectBuff")
  (guard-id
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guardId")
  (guard-bloods
   :index 15 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "guardBloods")
  (boss-cfg-id
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "bossCfgId")
  (tower-level
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerLevel")
  (arena-robot-cfg-id
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaRobotCfgId")
  (island-evtent-cfg-id
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "islandEvtentCfgId")
  (garden-zone-id
   :index 20 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenZoneId")
  (garden-monster-index
   :index 21 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenMonsterIndex")
  (garden-monster-seq
   :index 22 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenMonsterSeq")
  (pets
   :index 23 :type battle-pet :kind :message :label (:repeated :list) :json-name "pets")
  (monster-group-id
   :index 24 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterGroupId")
  (world-boss-id
   :index 25 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "worldBossId")
  (buffs
   :index 26 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "buffs")
  (user-title-id
   :index 27 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userTitleId")
  (world-boss-blood
   :index 28 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "worldBossBlood")
  (guild-boss-inspire
   :index 29 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "guildBossInspire"))

(pi:define-message team-pos
    (
     :name "team_pos")
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (pos
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "pos")
  (hero-type
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroType"))

(pi:define-message pet-skill
    (
     :name "pet_skill")
  ;; Fields
  (pet-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "petId")
  (pos
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message gmt-charge-reward-item
    (
     :name "gmt_charge_reward_item")
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (money
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "money")
  (max-person-reward-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxPersonRewardNum")
  (max-server-reward-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxServerRewardNum")
  (items
   :index 5 :type reward-item :kind :message :label (:repeated :list) :json-name "items")
  (item-name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "itemName")
  (src
   :index 7 :type reward-resource :kind :message :label (:repeated :list) :json-name "src"))

(pi:define-message gmt-c2is-tpl
    (
     :name "gmt_c2is_tpl")
  ;; Fields
  (rewards
   :index 1 :type gmt-charge-reward-item :kind :message :label (:repeated :list) :json-name "rewards"))

(pi:define-message gmt-i2is-item
    (
     :name "gmt_i2is_item")
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (max-person-reward-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxPersonRewardNum")
  (max-server-reward-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxServerRewardNum")
  (src
   :index 4 :type reward-item :kind :message :label (:repeated :list) :json-name "src")
  (dst
   :index 5 :type reward-item :kind :message :label (:repeated :list) :json-name "dst")
  (item-name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "itemName"))

(pi:define-message gmt-i2is-tpl
    (
     :name "gmt_i2is_tpl")
  ;; Fields
  (rewards
   :index 1 :type gmt-i2is-item :kind :message :label (:repeated :list) :json-name "rewards"))

(pi:define-message gmt-r2is-item
    (
     :name "gmt_r2is_item")
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (max-person-reward-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxPersonRewardNum")
  (max-server-reward-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxServerRewardNum")
  (src
   :index 4 :type reward-resource :kind :message :label (:repeated :list) :json-name "src")
  (dst
   :index 5 :type reward-item :kind :message :label (:repeated :list) :json-name "dst")
  (item-name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "itemName"))

(pi:define-message gmt-r2is-tpl
    (
     :name "gmt_r2is_tpl")
  ;; Fields
  (rewards
   :index 1 :type gmt-r2is-item :kind :message :label (:repeated :list) :json-name "rewards"))

(pi:define-message gmt-c2gs-gif
    (
     :name "gmt_c2gs_gif")
  ;; Fields
  (gif-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gifId")
  (item-list
   :index 2 :type reward-item :kind :message :label (:repeated :list) :json-name "itemList")
  (resource-list
   :index 3 :type reward-resource :kind :message :label (:repeated :list) :json-name "resourceList"))

(pi:define-message gmt-c2gs-item
    (
     :name "gmt_c2gs_item")
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (max-person-reward-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxPersonRewardNum")
  (max-server-reward-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxServerRewardNum")
  (gif
   :index 4 :type gmt-c2gs-gif :kind :message :label (:optional) :json-name "gif")
  (recharge-id
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rechargeId")
  (item-name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "itemName"))

(pi:define-message gmt-c2gs-tpl
    (
     :name "gmt_c2gs_tpl")
  ;; Fields
  (rewards
   :index 1 :type gmt-c2gs-item :kind :message :label (:repeated :list) :json-name "rewards"))

(pi:define-message gmt-ggl-use
    (
     :name "gmt_ggl_use")
  ;; Fields
  (table
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "table")
  (id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (one-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "oneNum")
  (tem-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "temNum"))

(pi:define-message gmt-ggl-pool-item
    (
     :name "gmt_ggl_pool_item")
  ;; Fields
  (table
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "table")
  (id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num")
  (rate
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rate")
  (copies
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "copies"))

(pi:define-message gmt-ggl-tpl
    (
     :name "gmt_ggl_tpl")
  ;; Fields
  (use
   :index 1 :type gmt-ggl-use :kind :message :label (:optional) :json-name "use")
  (pool-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "poolId")
  (pool
   :index 3 :type gmt-ggl-pool-item :kind :message :label (:repeated :list) :json-name "pool"))

(pi:define-message gmt-t2i-reward
    (
     :name "gmt_t2i_reward")
  ;; Fields
  (table
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "table")
  (id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message gmt-t2i-tpl-task
    (
     :name "gmt_t2i_tpl_task")
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (condition
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "condition")
  (value1
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "value1")
  (value2
   :index 4 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "value2")
  (rewards
   :index 5 :type gmt-t2i-reward :kind :message :label (:repeated :list) :json-name "rewards")
  (item-name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "itemName"))

(pi:define-message gmt-t2i-tpl
    (
     :name "gmt_t2i_tpl")
  ;; Fields
  (tasks
   :index 1 :type gmt-t2i-tpl-task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message gmt-template
    (
     :name "gmt_template")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (bg
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "bg")
  (show-level
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "showLevel")
  (c2is-tpl
   :index 5 :type gmt-c2is-tpl :kind :message :label (:optional) :json-name "c2isTpl")
  (i2is-tpl
   :index 6 :type gmt-i2is-tpl :kind :message :label (:optional) :json-name "i2isTpl")
  (r2is-tpl
   :index 7 :type gmt-r2is-tpl :kind :message :label (:optional) :json-name "r2isTpl")
  (c2gs-tpl
   :index 8 :type gmt-c2gs-tpl :kind :message :label (:optional) :json-name "c2gsTpl")
  (ggl-tpl
   :index 9 :type gmt-ggl-tpl :kind :message :label (:optional) :json-name "gglTpl")
  (t2is-tpl
   :index 10 :type gmt-t2i-tpl :kind :message :label (:optional) :json-name "t2isTpl")
  (active-id
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "activeId"))

(pi:define-message gmt-c2is-data
    (
     :name "gmt_c2is_data")
  ;; Fields
  (has-person-reward-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasPersonRewardNum")
  (has-server-reward-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasServerRewardNum")
  (has-recharge
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hasRecharge"))

(pi:define-message gmt-i2is-data
    (
     :name "gmt_i2is_data")
  ;; Fields
  (has-person-reward-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasPersonRewardNum")
  (has-server-reward-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasServerRewardNum"))

(pi:define-message gmt-r2is-data
    (
     :name "gmt_r2is_data")
  ;; Fields
  (has-person-reward-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasPersonRewardNum")
  (has-server-reward-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasServerRewardNum"))

(pi:define-message gmt-c2gs-data
    (
     :name "gmt_c2gs_data")
  ;; Fields
  (has-person-reward-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasPersonRewardNum")
  (has-server-reward-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasServerRewardNum"))

(pi:define-message gmt-ggl-data
    (
     :name "gmt_ggl_data")
  ;; Fields
  (has-reward-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasRewardNum")
  (server-has-reward-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "serverHasRewardNum")
  (person-has-reward-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "personHasRewardNum"))

(pi:define-message gmt-t2i-progress
    (
     :name "gmt_t2i_progress")
  ;; Fields
  (item-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (progress
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "progress")
  (status
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message gmt-t2i-data
    (
     :name "gmt_t2i_data")
  ;; Fields
  (task-progress
   :index 1 :type gmt-t2i-progress :kind :message :label (:repeated :list) :json-name "taskProgress"))

(pi:define-message gmt-data
    (
     :name "gmt_data")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (c2is-data
   :index 2 :type gmt-c2is-data :kind :message :label (:optional) :json-name "c2isData")
  (i2is-data
   :index 3 :type gmt-i2is-data :kind :message :label (:optional) :json-name "i2isData")
  (r2is-data
   :index 4 :type gmt-r2is-data :kind :message :label (:optional) :json-name "r2isData")
  (c2gs-data
   :index 5 :type gmt-c2gs-data :kind :message :label (:optional) :json-name "c2gsData")
  (ggl-data
   :index 6 :type gmt-ggl-data :kind :message :label (:optional) :json-name "gglData")
  (t2i-data
   :index 7 :type gmt-t2i-data :kind :message :label (:optional) :json-name "t2iData"))

(pi:define-message gmt-schedule
    (
     :name "gmt_schedule")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (period-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "periodType")
  (period-param
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "periodParam")
  (start-time
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "startTime")
  (end-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (reward-keep-time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardKeepTime")
  (show-time
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "showTime")
  (duration
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "duration")
  (gmt-t
   :index 9 :type gmt-template :kind :message :label (:optional) :json-name "gmtT")
  (gmt-d
   :index 10 :type gmt-data :kind :message :label (:optional) :json-name "gmtD")
  (start-week
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "startWeek")
  (circle-week
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "circleWeek"))

(pi:define-message pet-trans
    (
     :name "pet_trans")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num")
  (trans-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "transNum"))

(pi:define-message helper-info
    (
     :name "helper_info")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (index
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (put-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "putTime")
  (hire-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hireNum")
  (hero
   :index 5 :type hero-base-info :kind :message :label (:optional) :json-name "hero")
  (id
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (org-put-time
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "orgPutTime")
  (org-hire-num
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "orgHireNum"))

(pi:define-message helper-history
    (
     :name "helper_history")
  ;; Fields
  (hire-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hireUserId")
  (hire-user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "hireUserName")
  (hire-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hireTime")
  (hero
   :index 4 :type hero-base-info :kind :message :label (:optional) :json-name "hero"))

(pi:define-message helper-history2
    (
     :name "helper_history2")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (hire-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hireTime")
  (hero-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId"))

(pi:define-message grid-pos
    (
     :name "grid_pos")
  ;; Fields
  (x
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x")
  (y
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y"))

(pi:define-message charge-info
    (
     :name "charge_info")
  ;; Fields
  (charge-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "chargeId")
  (charge-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "chargeNum"))

(pi:define-message garden-train-info
    (
     :name "garden_train_info")
  ;; Fields
  (train-property
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainProperty")
  (train-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainType")
  (level
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "level")
  (unlock-start
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "unlockStart")
  (unlock-end
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "unlockEnd")
  (index
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index"))

(pi:define-message hero-pos
    (
     :name "hero_pos")
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (pos
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message garden-virpet
    (
     :name "garden_virpet")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (max-lev
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxLev")
  (train-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainTime")
  (train-property
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainProperty")
  (train-type
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "trainType")
  (index
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (end-time
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (eqp-index1
   :index 11 :type item :kind :message :label (:optional) :json-name "eqpIndex1")
  (eqp-index2
   :index 12 :type item :kind :message :label (:optional) :json-name "eqpIndex2")
  (eqp-index3
   :index 13 :type item :kind :message :label (:optional) :json-name "eqpIndex3")
  (eqp-index4
   :index 14 :type item :kind :message :label (:optional) :json-name "eqpIndex4")
  (eqp-index5
   :index 15 :type item :kind :message :label (:optional) :json-name "eqpIndex5")
  (eqp-index6
   :index 16 :type item :kind :message :label (:optional) :json-name "eqpIndex6")
  (heros
   :index 17 :type hero-pos :kind :message :label (:repeated :list) :json-name "heros")
  (pet-star
   :index 18 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "petStar"))

(pi:define-message garden-npc-task
    (
     :name "garden_npc_task")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (require-items
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "requireItems")
  (cfg-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (create-time
   :index 4 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "createTime")
  (finish-create
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "finishCreate"))

(pi:define-message garden-task
    (
     :name "garden_task")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (gold-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "goldNum")
  (status
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (finish-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "finishTime")
  (share-type
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shareType")
  (share-user-id
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shareUserId")
  (count
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "count")
  (end-time
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (read
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "read")
  (fresh-level
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "freshLevel"))

(pi:define-message red-pack-recver
    (
     :name "red_pack_recver")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (server-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "serverId")
  (name
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (head
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (recve-time
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "recveTime")
  (reward-id
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardId")
  (reward-index
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardIndex"))

(pi:define-message red-pack-summary
    (
     :name "red_pack_summary")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "id")
  (type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (guild-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildId")
  (sender-server-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "senderServerId")
  (sender-id
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "senderId")
  (sender-name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "senderName")
  (sender-head
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "senderHead")
  (sender-head-frame
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "senderHeadFrame")
  (sender-head-url
   :index 9 :type cl:string :kind :scalar :label (:optional) :json-name "senderHeadUrl")
  (send-time
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendTime")
  (end-time
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (left-num
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "leftNum")
  (reward-id
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardId")
  (has-open
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hasOpen")
  (is-empty
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isEmpty")
  (has-click
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hasClick"))

(pi:define-message red-pack-detail
    (
     :name "red_pack_detail")
  ;; Fields
  (summary
   :index 1 :type red-pack-summary :kind :message :label (:optional) :json-name "summary")
  (recvers
   :index 2 :type red-pack-recver :kind :message :label (:repeated :list) :json-name "recvers"))

(pi:define-message task-serial
    (
     :name "task_serial")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (cfg-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (progress
   :index 4 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "progress")
  (status
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message task-active-reward-serial
    (
     :name "task_active_reward_serial")
  ;; Fields
  (active-num
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "activeNum")
  (has-fetch
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hasFetch")
  (rewards
   :index 3 :type game-reward-res :kind :message :label (:optional) :json-name "rewards"))

(pi:define-message tasks-serial
    (
     :name "tasks_serial")
  ;; Fields
  (day-tasks-refresh-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dayTasksRefreshTime")
  (day-tasks
   :index 2 :type task-serial :kind :message :label (:repeated :list) :json-name "dayTasks")
  (week-tasks-refresh-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "weekTasksRefreshTime")
  (week-tasks
   :index 4 :type task-serial :kind :message :label (:repeated :list) :json-name "weekTasks")
  (thread-tasks
   :index 5 :type task-serial :kind :message :label (:repeated :list) :json-name "threadTasks")
  (thread-start-time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "threadStartTime")
  (newer7-tasks
   :index 7 :type task-serial :kind :message :label (:repeated :list) :json-name "newer7Tasks")
  (newer7-start-time
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "newer7StartTime")
  (newer7-day-idx
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "newer7DayIdx")
  (func-tasks
   :index 10 :type task-serial :kind :message :label (:repeated :list) :json-name "funcTasks")
  (day-active-rewards
   :index 11 :type task-active-reward-serial :kind :message :label (:repeated :list) :json-name "dayActiveRewards")
  (week-active-rewards
   :index 12 :type task-active-reward-serial :kind :message :label (:repeated :list) :json-name "weekActiveRewards")
  (day-active
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dayActive")
  (week-active
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "weekActive")
  (task-id-index
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskIDIndex")
  (explore-day-tasks-refresh-time
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "exploreDayTasksRefreshTime")
  (fs-boss-day-tasks-refresh-time
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fsBossDayTasksRefreshTime")
  (fs-boss-week-tasks-refresh-time
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fsBossWeekTasksRefreshTime")
  (fs-day-tasks
   :index 19 :type task-serial :kind :message :label (:repeated :list) :json-name "fsDayTasks")
  (fs-week-tasks
   :index 20 :type task-serial :kind :message :label (:repeated :list) :json-name "fsWeekTasks"))

(pi:define-message tasks-stat
    (
     :name "tasks_stat")
  ;; Fields
  (stats
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "stats"))

(pi:define-message garden-serial-float-item
    (
     :name "garden_serial_float_item")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (pos-x
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posX")
  (pos-y
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posY")
  (get-from
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getFrom")
  (get-time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getTime"))

(pi:define-message garden-serial-float-items
    (
     :name "garden_serial_float_items")
  ;; Fields
  (float-item-id-counter
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "floatItemIdCounter")
  (float-itmes
   :index 2 :type garden-serial-float-item :kind :message :label (:repeated :list) :json-name "floatItmes"))

(pi:define-message garden-serial-item
    (
     :name "garden_serial_item")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (pos-x
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posX")
  (pos-y
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "posY")
  (get-from
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getFrom")
  (get-time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getTime")
  (collect-start-time
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "collectStartTime")
  (can-use-num
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "canUseNum")
  (reward-refresh-time
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardRefreshTime")
  (reward-num
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardNum")
  (reward-time
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardTime")
  (is-unlock
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isUnlock")
  (creator-id
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "creatorId")
  (create-index
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "createIndex")
  (start-time
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "startTime")
  (end-time
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (finish
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "finish")
  (acc-time
   :index 20 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "accTime")
  (open-gridgroup-id
   :index 21 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "openGridgroupId")
  (open-zone-id
   :index 22 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "openZoneId")
  (attack-num
   :index 23 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackNum")
  (monster-index
   :index 24 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterIndex")
  (sl-type
   :index 25 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "slType")
  (sl-cd-time
   :index 26 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slCdTime")
  (sl-get
   :index 27 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slGet")
  (sl-share
   :index 28 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "slShare")
  (stage
   :index 29 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "stage")
  (cap
   :index 30 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "cap")
  (max-monster-index
   :index 31 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxMonsterIndex"))

(pi:define-message garden-collect-stat
    (
     :name "garden_collect_stat")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (collect-num
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "collectNum"))

(pi:define-message garden-menual
    (
     :name "garden_menual")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (level
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "level"))

(pi:define-message garden-serial-items
    (
     :name "garden_serial_items")
  ;; Fields
  (item-id-counter
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemIdCounter")
  (itmes
   :index 2 :type garden-serial-item :kind :message :label (:repeated :list) :json-name "itmes")
  (stats
   :index 3 :type garden-collect-stat :kind :message :label (:repeated :list) :json-name "stats")
  (menual
   :index 4 :type garden-menual :kind :message :label (:repeated :list) :json-name "menual")
  (build-score
   :index 5 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "buildScore")
  (store-size
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "storeSize")
  (npc-rewards
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "npcRewards")
  (ship-buys
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "shipBuys")
  (ship-buy-time
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipBuyTime")
  (ship-buy-reward-num
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipBuyRewardNum")
  (ship-buy-reward-time
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shipBuyRewardTime"))

(pi:define-message garden-grid
    (
     :name "garden_grid")
  ;; Fields
  (x
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x")
  (y
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y")
  (active
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "active"))

(pi:define-message garden-item
    (
     :name "garden_item")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (float
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "float")
  (x
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "x")
  (y
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "y")
  (can-use-num
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "canUseNum")
  (collect-start-time
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "collectStartTime")
  (res-num
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "resNum")
  (is-unlock
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isUnlock")
  (get-from
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getFrom")
  (get-time
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "getTime")
  (creator-id
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "creatorId")
  (create-index
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "createIndex")
  (start-time
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "startTime")
  (end-time
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (finish
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "finish")
  (acc-time
   :index 20 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "accTime")
  (attack-num
   :index 21 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackNum")
  (monster-index
   :index 22 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterIndex")
  (sl-type
   :index 25 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "slType")
  (sl-cd-time
   :index 26 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slCdTime")
  (sl-get
   :index 27 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slGet")
  (sl-share
   :index 28 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "slShare")
  (stage
   :index 29 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "stage")
  (cap
   :index 30 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "cap"))

(pi:define-message garden-pet
    (
     :name "garden_pet")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message garden-pet-info
    (
     :name "garden_pet_info")
  ;; Fields
  (pets
   :index 1 :type garden-pet :kind :message :label (:repeated :list) :json-name "pets")
  (auto-convert
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "autoConvert"))

(pi:define-message helper-heros
    (
     :name "helper_heros")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (hero-list
   :index 2 :type hero-base-info :kind :message :label (:repeated :list) :json-name "heroList"))

(pi:define-message fund-info
    (
     :name "fund_info")
  ;; Fields
  (fund-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fundId")
  (buy-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyTime"))

(pi:define-message month-card-info
    (
     :name "month_card_info")
  ;; Fields
  (month-card-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monthCardId")
  (buy-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyTime")
  (end-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (can-get-today
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "canGetToday"))

(pi:define-message ext-gif-info
    (
     :name "ext_gif_info")
  ;; Fields
  (gif-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gifId")
  (had-buy-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hadBuyNum")
  (idx
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "idx"))

(pi:define-message hero-change-info
    (
     :name "hero_change_info")
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (lev
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lev")
  (lev-time
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "levTime")
  (slot
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "slot")
  (lev-bak
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "levBak")
  (fight-score
   :index 6 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightScore"))

(pi:define-message crystal-slot
    (
     :name "crystal_slot")
  ;; Fields
  (index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (lock-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lockTime"))

(pi:define-message archiev-info
    (
     :name "archiev_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (status
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (player
   :index 3 :type player-base-info :kind :message :label (:optional) :json-name "player"))

(pi:define-message manual
    (
     :name "manual")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (hero-config-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroConfigId")
  (level
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level")
  (max-rank
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxRank")
  (reward-stat
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardStat"))

(pi:define-message task
    (
     :name "task")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (config-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configId")
  (condition-value
   :index 4 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "conditionValue")
  (status
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message task-archive
    (
     :name "task_archive")
  ;; Fields
  (daily-point
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dailyPoint")
  (reward-res
   :index 2 :type game-reward-res :kind :message :label (:optional) :json-name "rewardRes")
  (fetch
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fetch"))

(pi:define-message mail-info
    (
     :name "mail_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (format
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "format")
  (main-type
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mainType")
  (sub-type
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "subType")
  (sender-id
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "senderId")
  (sender-name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "senderName")
  (end-time
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (status
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (content
   :index 9 :type cl:string :kind :scalar :label (:optional) :json-name "content")
  (reward-res
   :index 10 :type game-reward-res :kind :message :label (:optional) :json-name "rewardRes")
  (send-time
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sendTime"))

(pi:define-message mail-status
    (
     :name "mail_status")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (status
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message friend-apply-info
    (
     :name "friend_apply_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (user-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (user-name
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "userName")
  (server-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "serverId")
  (apply-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "applyTime")
  (msg
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "msg")
  (lev
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (fight-score
   :index 8 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightScore")
  (head
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 11 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (account-id
   :index 12 :type cl:string :kind :scalar :label (:optional) :json-name "accountId")
  (guild-id
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildId")
  (guild-name
   :index 14 :type cl:string :kind :scalar :label (:optional) :json-name "guildName")
  (guild-title
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTitle")
  (server-name
   :index 16 :type cl:string :kind :scalar :label (:optional) :json-name "serverName"))

(pi:define-message friend-apply-info-list
    (
     :name "friend_apply_info_list")
  ;; Fields
  (recv-applys
   :index 1 :type friend-apply-info :kind :message :label (:repeated :list) :json-name "recvApplys")
  (send-applys
   :index 2 :type friend-apply-info :kind :message :label (:repeated :list) :json-name "sendApplys"))

(pi:define-message friend-gif-info
    (
     :name "friend_gif_info")
  ;; Fields
  (friend-user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "friendUserId")
  (gif-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gifNum")
  (present-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "presentNum")
  (peer-present-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "peerPresentNum")
  (fetch-num
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fetchNum")
  (dead-line
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "deadLine"))

(pi:define-message guild-apply-cond
    (
     :name "guild_apply_cond")
  ;; Fields
  (need-review
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "needReview")
  (min-lev
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "minLev"))

(pi:define-message guild-boss-record
    (
     :name "guild_boss_record")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (user-name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "userName")
  (challenge-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "challengeTime")
  (attack-formations
   :index 4 :type formation :kind :message :label (:repeated :list) :json-name "attackFormations")
  (result
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (battle-info
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo")
  (hurt
   :index 7 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (be-quick-attack
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "beQuickAttack")
  (head
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 11 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (team-lev
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamLev"))

(pi:define-message guild-base-info
    (
     :name "guild_base_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (declar
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "declar")
  (notice
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "notice")
  (lev
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (exp
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "exp")
  (create-time
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "createTime")
  (president
   :index 8 :type player-base-info :kind :message :label (:optional) :json-name "president")
  (elder1
   :index 9 :type player-base-info :kind :message :label (:optional) :json-name "elder1")
  (elder2
   :index 10 :type player-base-info :kind :message :label (:optional) :json-name "elder2")
  (elder3
   :index 11 :type player-base-info :kind :message :label (:optional) :json-name "elder3")
  (apply-cond
   :index 12 :type guild-apply-cond :kind :message :label (:optional) :json-name "applyCond")
  (member-num
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "memberNum")
  (active
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "active")
  (contribute
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "contribute")
  (guild-boss-score
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildBossScore")
  (channel
   :index 17 :type cl:string :kind :scalar :label (:optional) :json-name "channel")
  (can-impeach
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "canImpeach")
  (candidates
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "candidates")
  (banner
   :index 20 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "banner")
  (impeach-deadline
   :index 21 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "impeachDeadline")
  (hasdidates
   :index 22 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasdidates"))

(pi:define-message guild-casting-reward
    (
     :name "guild_casting_reward")
  ;; Fields
  (index
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index")
  (user-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (user-name
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "userName")
  (reward
   :index 4 :type game-reward-res :kind :message :label (:optional) :json-name "reward"))

(pi:define-message guild-copy-reward
    (
     :name "guild_copy_reward")
  ;; Fields
  (index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (reward-res
   :index 2 :type game-reward-res :kind :message :label (:optional) :json-name "rewardRes")
  (user-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (user-name
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "userName")
  (user-head
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userHead")
  (user-head-frame
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userHeadFrame")
  (user-head-url
   :index 7 :type cl:string :kind :scalar :label (:optional) :json-name "userHeadUrl"))

(pi:define-message guild-copy-hurt
    (
     :name "guild_copy_hurt")
  ;; Fields
  (hurt
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (user-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (user-name
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "userName")
  (user-head
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userHead")
  (user-head-frame
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userHeadFrame")
  (user-head-url
   :index 7 :type cl:string :kind :scalar :label (:optional) :json-name "userHeadUrl")
  (user-lev
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userLev"))

(pi:define-message guild-guard-summary
    (
     :name "guild_guard_summary")
  ;; Fields
  (guard-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guardId")
  (status
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (curbloods
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "curbloods")
  (current-mvp
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "currentMvp")
  (has-mvp-reward
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hasMvpReward"))

(pi:define-message guild-copy-guard-detail
    (
     :name "guild_copy_guard_detail")
  ;; Fields
  (summary
   :index 1 :type guild-guard-summary :kind :message :label (:optional) :json-name "summary")
  (rewards
   :index 2 :type guild-copy-reward :kind :message :label (:repeated :list) :json-name "rewards")
  (hurts
   :index 3 :type guild-copy-hurt :kind :message :label (:repeated :list) :json-name "hurts"))

(pi:define-message guild-copy-summary
    (
     :name "guild_copy_summary")
  ;; Fields
  (copy-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "copyId")
  (guard-summary-list
   :index 2 :type guild-guard-summary :kind :message :label (:repeated :list) :json-name "guardSummaryList"))

(pi:define-message guild-copy-skill
    (
     :name "guild_copy_skill")
  ;; Fields
  (skill-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "skillType")
  (skill-lev
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "skillLev")
  (skill-exp
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "skillExp"))

(pi:define-message guild-copy-person-part
    (
     :name "guild_copy_person_part")
  ;; Fields
  (attack-num
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackNum")
  (attack-num-refresh
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackNumRefresh")
  (buy-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyNum")
  (guild-copy-formation
   :index 4 :type formation :kind :message :label (:optional) :json-name "guildCopyFormation")
  (has-reward-guards
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasRewardGuards")
  (has-reward-pass-guards
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasRewardPassGuards")
  (has-reward-mvp-guards
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "hasRewardMvpGuards"))

(pi:define-message guild-copy-public-part
    (
     :name "guild_copy_public_part")
  ;; Fields
  (copy-refresh
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "copyRefresh")
  (copy-summary-list
   :index 2 :type guild-copy-summary :kind :message :label (:repeated :list) :json-name "copySummaryList")
  (copy-skills
   :index 3 :type guild-copy-skill :kind :message :label (:repeated :list) :json-name "copySkills"))

(pi:define-message guild-copy-info
    (
     :name "guild_copy_info")
  ;; Fields
  (personl-part
   :index 1 :type guild-copy-person-part :kind :message :label (:optional) :json-name "personlPart")
  (public-part
   :index 2 :type guild-copy-public-part :kind :message :label (:optional) :json-name "publicPart"))

(pi:define-message guild-boss-info
    (
     :name "guild_boss_info")
  ;; Fields
  (boss-score
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "bossScore")
  (attack-num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackNum")
  (boss-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "bossId")
  (refresh
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refresh")
  (guild-boss-score
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildBossScore")
  (attack-num-refresh
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackNumRefresh")
  (had-win
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hadWin")
  (hurts
   :index 8 :type guild-copy-hurt :kind :message :label (:repeated :list) :json-name "hurts")
  (last-win
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lastWin")
  (last-hurt
   :index 10 :type cl-protobufs:uint64 :kind :scalar :label (:optional) :json-name "lastHurt")
  (challenge-unfree-times
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "challengeUnfreeTimes")
  (inspire-times
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "inspireTimes")
  (inspire-buy-left
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "inspireBuyLeft"))

(pi:define-message guild-casting-info
    (
     :name "guild_casting_info")
  ;; Fields
  (part1
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "part1")
  (part2
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "part2")
  (part3
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "part3")
  (part4
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "part4")
  (part5
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "part5")
  (part6
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "part6")
  (rewards
   :index 7 :type guild-casting-reward :kind :message :label (:repeated :list) :json-name "rewards"))

(pi:define-message guild-opt-log
    (
     :name "guild_opt_log")
  ;; Fields
  (time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "time")
  (opt-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "optType")
  (params
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "params"))

(pi:define-message guild-apply-info
    (
     :name "guild_apply_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "time")
  (uid
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "uid")
  (name
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (message
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "message")
  (level
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "level")
  (fight-point
   :index 7 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightPoint")
  (head
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame"))

(pi:define-message hero-bloodnanger
    (
     :name "hero_bloodnanger")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (config-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configId")
  (blood
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blood")
  (anger
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "anger")
  (hero-type
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroType"))

(pi:define-message maze-buff
    (
     :name "maze_buff")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "time")
  (map-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapId")
  (layer-id
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerId"))

(pi:define-message maze-monster
    (
     :name "maze_monster")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (property-list
   :index 2 :type property :kind :message :label (:repeated :list) :json-name "propertyList"))

(pi:define-message maze-monster-group
    (
     :name "maze_monster_group")
  ;; Fields
  (monster-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterType")
  (monsters
   :index 2 :type maze-monster :kind :message :label (:repeated :list) :json-name "monsters")
  (reward-buffs
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "rewardBuffs")
  (reward-res
   :index 4 :type game-reward-res :kind :message :label (:optional) :json-name "rewardRes")
  (monster-group-id
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "monsterGroupId"))

(pi:define-message maze-map-node
    (
     :name "maze_map_node")
  ;; Fields
  (index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (node-type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "nodeType")
  (monster-group
   :index 3 :type maze-monster-group :kind :message :label (:optional) :json-name "monsterGroup")
  (helpers
   :index 4 :type maze-helper :kind :message :label (:repeated :list) :json-name "helpers")
  (maze-shop
   :index 5 :type shop :kind :message :label (:optional) :json-name "mazeShop"))

(pi:define-message maze-map-layer
    (
     :name "maze_map_layer")
  ;; Fields
  (index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (nodes
   :index 2 :type maze-map-node :kind :message :label (:repeated :list) :json-name "nodes"))

(pi:define-message maze-map
    (
     :name "maze_map")
  ;; Fields
  (index
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (layers
   :index 2 :type maze-map-layer :kind :message :label (:repeated :list) :json-name "layers"))

(pi:define-message maze-helper
    (
     :name "maze_helper")
  ;; Fields
  (hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (cfg-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (pos
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message maze-scene
    (
     :name "maze_scene")
  ;; Fields
  (create-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "createTime")
  (refresh-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime")
  (map
   :index 3 :type maze-map :kind :message :label (:repeated :list) :json-name "map")
  (buffs
   :index 4 :type maze-buff :kind :message :label (:repeated :list) :json-name "buffs")
  (helpers
   :index 5 :type maze-helper :kind :message :label (:repeated :list) :json-name "helpers")
  (map-index
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mapIndex")
  (layer-index
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "layerIndex")
  (pos
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "pos")
  (bna
   :index 9 :type hero-bloodnanger :kind :message :label (:repeated :list) :json-name "bna")
  (status
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (select-buffs
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "selectBuffs")
  (path
   :index 12 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "path")
  (bloods
   :index 13 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "bloods")
  (select-buff
   :index 14 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "selectBuff")
  (finish-buff
   :index 15 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "finishBuff")
  (reward-buff
   :index 16 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "rewardBuff")
  (cur-select-buff
   :index 17 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "curSelectBuff")
  (start
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "start")
  (end
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "end")
  (fight-point
   :index 20 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightPoint"))

(pi:define-message rank-player
    (
     :name "rank_player")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (head
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (index
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (lev
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (fight-score
   :index 8 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightScore")
  (score
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "score")
  (server-name
   :index 10 :type cl:string :kind :scalar :label (:optional) :json-name "serverName")
  (guild-name
   :index 11 :type cl:string :kind :scalar :label (:optional) :json-name "guildName")
  (guild-title1
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTitle1")
  (guild-title2
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTitle2")
  (personal-content
   :index 14 :type cl:string :kind :scalar :label (:optional) :json-name "personalContent")
  (final-scene
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "finalScene")
  (fight-hero-list
   :index 16 :type hero-base-info :kind :message :label (:repeated :list) :json-name "fightHeroList"))

(pi:define-message card-wish
    (
     :name "card_wish")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (card-id-list
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "cardIdList"))

(pi:define-message shop-config
    (
     :name "shop_config")
  ;; Fields
  (shop-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shopType")
  (fresh-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "freshTime")
  (fresh-num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "freshNum")
  (shop-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shopId"))

(pi:define-message shop
    (
     :name "shop")
  ;; Fields
  (shop-type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shopType")
  (fresh-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "freshTime")
  (shop-item-list
   :index 3 :type shop-item :kind :message :label (:repeated :list) :json-name "shopItemList")
  (fresh-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "freshNum")
  (shop-id
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "shopId")
  (diamond-fresh-num
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "diamondFreshNum")
  (buy-nums
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:repeated :list) :json-name "buyNums"))

(pi:define-message shop-item
    (
     :name "shop_item")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (type
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (num
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num")
  (discount
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "discount")
  (price
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "price")
  (is-buyed
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isBuyed")
  (index
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (need-resource-type
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "needResourceType")
  (buy-num
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyNum")
  (product-id
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "productId")
  (table
   :index 11 :type cl:string :kind :scalar :label (:optional) :json-name "table")
  (single-sale
   :index 12 :type cl:boolean :kind :scalar :label (:optional) :json-name "singleSale")
  (max-buynum
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "maxBuynum"))

(pi:define-message item
    (
     :name "item")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (config-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configId")
  (lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num")
  (eqp-index
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "eqpIndex")
  (exp
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "exp")
  (fight-score
   :index 7 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightScore")
  (hero-id
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (race-active
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "raceActive")
  (mount-id
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mountId")
  (horse-id
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "horseId")
  (is-lock
   :index 12 :type cl:boolean :kind :scalar :label (:optional) :json-name "isLock"))

(pi:define-message reward-resource
    (
     :name "reward_resource")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message reward-hero
    (
     :name "reward_hero")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num")
  (lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (rank
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rank"))

(pi:define-message reward-item
    (
     :name "reward_item")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message reward-buff
    (
     :name "reward_buff")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message reward-pet
    (
     :name "reward_pet")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (num
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "num")
  (is-new
   :index 3 :type cl:boolean :kind :scalar :label (:optional) :json-name "isNew"))

(pi:define-message hero-base-info
    (
     :name "hero_base_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (config-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configId")
  (lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (rank
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rank")
  (fight-score
   :index 5 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightScore")
  (sub-type
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "subType")
  (blood
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blood")
  (anger
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "anger")
  (hero-type
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroType")
  (lev-time
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "levTime")
  (slot
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slot")
  (lev-bak
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "levBak")
  (eqp-index1
   :index 15 :type item :kind :message :label (:optional) :json-name "eqpIndex1")
  (eqp-index2
   :index 16 :type item :kind :message :label (:optional) :json-name "eqpIndex2")
  (eqp-index3
   :index 17 :type item :kind :message :label (:optional) :json-name "eqpIndex3")
  (eqp-index4
   :index 18 :type item :kind :message :label (:optional) :json-name "eqpIndex4")
  (eqp-index5
   :index 19 :type item :kind :message :label (:optional) :json-name "eqpIndex5")
  (eqp-index6
   :index 20 :type item :kind :message :label (:optional) :json-name "eqpIndex6")
  (team-pos
   :index 22 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "teamPos"))

(pi:define-message hero-info
    (
     :name "hero_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (config-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configId")
  (lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (rank
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rank")
  (fight-score
   :index 5 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightScore")
  (sub-type
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "subType")
  (uid
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "uid")
  (eqp-index1
   :index 8 :type item :kind :message :label (:optional) :json-name "eqpIndex1")
  (eqp-index2
   :index 9 :type item :kind :message :label (:optional) :json-name "eqpIndex2")
  (eqp-index3
   :index 10 :type item :kind :message :label (:optional) :json-name "eqpIndex3")
  (eqp-index4
   :index 11 :type item :kind :message :label (:optional) :json-name "eqpIndex4")
  (eqp-index5
   :index 12 :type item :kind :message :label (:optional) :json-name "eqpIndex5")
  (eqp-index6
   :index 13 :type item :kind :message :label (:optional) :json-name "eqpIndex6")
  (skil-list
   :index 15 :type skill :kind :message :label (:repeated :list) :json-name "skilList")
  (mount
   :index 17 :type mount-info :kind :message :label (:optional) :json-name "mount")
  (swing
   :index 18 :type swing-info :kind :message :label (:optional) :json-name "swing")
  (blood
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "blood")
  (anger
   :index 20 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "anger")
  (hero-type
   :index 21 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroType")
  (lev-time
   :index 22 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "levTime")
  (slot
   :index 23 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "slot")
  (lev-bak
   :index 24 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "levBak")
  (pet
   :index 25 :type garden-virpet :kind :message :label (:optional) :json-name "pet")
  (team-pos
   :index 26 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "teamPos")
  (horse
   :index 27 :type horse :kind :message :label (:optional) :json-name "horse")
  (pet-star
   :index 28 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "petStar")
  (pet-info
   :index 29 :type pet :kind :message :label (:optional) :json-name "petInfo")
  (pet-v2-info
   :index 30 :type pet-v2 :kind :message :label (:optional) :json-name "petV2Info"))

(pi:define-message formation
    (
     :name "formation")
  ;; Fields
  (hero-infos
   :index 1 :type hero-info :kind :message :label (:repeated :list) :json-name "heroInfos"))

(pi:define-message player-base-info
    (
     :name "player_base_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (head
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (index
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (lev
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (fight-score
   :index 8 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "fightScore")
  (score
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "score")
  (server-id
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "serverId")
  (server-name
   :index 11 :type cl:string :kind :scalar :label (:optional) :json-name "serverName")
  (guild-name
   :index 12 :type cl:string :kind :scalar :label (:optional) :json-name "guildName")
  (guild-title
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTitle")
  (final-scene
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "finalScene")
  (guild-id
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildId")
  (login-time
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "loginTime")
  (guild-limit-time
   :index 20 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildLimitTime")
  (logout-time
   :index 22 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "logoutTime")
  (guild-join-time
   :index 23 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildJoinTime")
  (vip-lev
   :index 24 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "vipLev")
  (human-point
   :index 25 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "humanPoint")
  (sprite-point
   :index 26 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "spritePoint")
  (devil-point
   :index 27 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "devilPoint")
  (tower-all-floor
   :index 28 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerAllFloor")
  (tower-human-floor
   :index 29 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerHumanFloor")
  (tower-sprite-floor
   :index 30 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerSpriteFloor")
  (tower-devil-floor
   :index 31 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerDevilFloor")
  (guild-boss-score
   :index 32 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildBossScore")
  (account-id
   :index 33 :type cl:string :kind :scalar :label (:optional) :json-name "accountId")
  (guild-exp
   :index 34 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildExp")
  (guild-today-exp
   :index 35 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTodayExp")
  (guild-today-exp-valid-time
   :index 36 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTodayExpValidTime")
  (guild-contribute
   :index 37 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildContribute")
  (guild-today-contribute
   :index 38 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTodayContribute")
  (guild-today-contribute-valid-time
   :index 39 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTodayContributeValidTime")
  (guild-active
   :index 40 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildActive")
  (guild-active-valid-time
   :index 41 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildActiveValidTime")
  (tower-all-floor-time
   :index 42 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerAllFloorTime")
  (tower-human-floor-time
   :index 43 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerHumanFloorTime")
  (tower-sprite-floor-time
   :index 44 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerSpriteFloorTime")
  (tower-devil-floor-time
   :index 45 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerDevilFloorTime")
  (is-robot
   :index 46 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "isRobot")
  (robot-cfg-id
   :index 47 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "robotCfgId")
  (tower-all-star
   :index 48 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerAllStar")
  (tower-human-star
   :index 49 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerHumanStar")
  (tower-sprite-star
   :index 50 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerSpriteStar")
  (tower-devil-star
   :index 51 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerDevilStar")
  (tower-all-cur-star
   :index 52 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerAllCurStar")
  (tower-human-cur-star
   :index 53 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerHumanCurStar")
  (tower-sprite-cur-star
   :index 54 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerSpriteCurStar")
  (tower-devil-cur-star
   :index 55 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "towerDevilCurStar"))

(pi:define-message arena-battle-record
    (
     :name "arena_battle_record")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (attack-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackId")
  (attack-name
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "attackName")
  (attack-head
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackHead")
  (attack-score
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackScore")
  (attack-score-change
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackScoreChange")
  (defend-id
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendId")
  (defend-name
   :index 8 :type cl:string :kind :scalar :label (:optional) :json-name "defendName")
  (defend-head
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendHead")
  (defend-score
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendScore")
  (defend-score-change
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendScoreChange")
  (challenge-time
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "challengeTime")
  (result
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "result")
  (battle-info
   :index 14 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo")
  (attack-lev
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "attackLev")
  (defend-lev
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendLev")
  (defend-is-robot
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendIsRobot")
  (defend-robot-cfg-id
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "defendRobotCfgId"))

(pi:define-message progress-reward
    (
     :name "progress_reward")
  ;; Fields
  (stage
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "stage")
  (received
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "received"))

(pi:define-message arena-progress-reward-info
    (
     :name "arena_progress_reward_info")
  ;; Fields
  (config-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configID")
  (refresh-time
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime")
  (progress-info
   :index 3 :type progress-reward :kind :message :label (:repeated :list) :json-name "progressInfo"))

(pi:define-message arena-info
    (
     :name "arena_info")
  ;; Fields
  (season-no
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "seasonNo")
  (score
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "score")
  (score-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "scoreTime")
  (challenge-today-num
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "challengeTodayNum")
  (challenge-season-num
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "challengeSeasonNum")
  (challenge-total-num
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "challengeTotalNum")
  (challenge-stage-num
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "challengeStageNum")
  (index
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "index")
  (end-time
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (buy-today-num
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyTodayNum")
  (season-is-end
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "seasonIsEnd")
  (next-start-time
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "nextStartTime")
  (puzzle-value
   :index 13 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "puzzleValue")
  (puzzle-share-num
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "puzzleShareNum")
  (puzzle-share-time
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "puzzleShareTime")
  (progress-info
   :index 16 :type arena-progress-reward-info :kind :message :label (:optional) :json-name "progressInfo"))

(pi:define-message property
    (
     :name "property")
  ;; Fields
  (property-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "propertyId")
  (value
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message skill
    (
     :name "skill")
  ;; Fields
  (skill-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "skillId")
  (lev
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev"))

(pi:define-message player
    (
     :name "player")
  ;; Fields
  (uid
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "uid")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (head
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (lev
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (vip-lev
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "vipLev"))

(pi:define-message resource
    (
     :name "resource")
  ;; Fields
  (gold-coin
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "goldCoin")
  (diamond
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "diamond")
  (guild-coin
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildCoin")
  (hero-soul-coin
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroSoulCoin")
  (maze-coin
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "mazeCoin")
  (activity-point
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "activityPoint")
  (week-activity-point
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "weekActivityPoint")
  (team-exp
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "teamExp")
  (hero-exp
   :index 9 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "heroExp")
  (friendship-point
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "friendshipPoint")
  (senior-arena-coin
   :index 12 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "seniorArenaCoin")
  (life-tree-resouce
   :index 13 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lifeTreeResouce")
  (vip-exp
   :index 14 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "vipExp")
  (crystal-coin
   :index 15 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "crystalCoin")
  (seven-day-coin
   :index 16 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sevenDayCoin")
  (guild-exp
   :index 17 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildExp")
  (guild-active
   :index 18 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildActive")
  (guild-active-valid-time
   :index 19 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildActiveValidTime")
  (guild-contribute
   :index 20 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildContribute")
  (reward-order-maze-coin
   :index 21 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardOrderMazeCoin")
  (reward-order-task-coin
   :index 22 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rewardOrderTaskCoin")
  (guild-today-contribute
   :index 23 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTodayContribute")
  (guild-today-contribute-valid-time
   :index 24 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTodayContributeValidTime")
  (guild-today-exp
   :index 25 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTodayExp")
  (guild-today-exp-valid-time
   :index 26 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildTodayExpValidTime")
  (guild-copy-skill-score
   :index 27 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildCopySkillScore")
  (guild-copy-skill-score-valid-time
   :index 28 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildCopySkillScoreValidTime")
  (wood
   :index 29 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "wood")
  (life-crystal
   :index 30 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lifeCrystal")
  (garden-tili
   :index 31 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenTili")
  (garden-tili-max
   :index 32 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenTiliMax")
  (garden-tili-recover
   :index 33 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenTiliRecover")
  (garden-task-num
   :index 34 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenTaskNum")
  (garden-task-num-time
   :index 35 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenTaskNumTime")
  (garden-task-buy-num
   :index 36 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenTaskBuyNum")
  (garden-task-buy-num-time
   :index 37 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenTaskBuyNumTime")
  (garden-tower-exp
   :index 38 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "gardenTowerExp")
  (pet-coin
   :index 39 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petCoin")
  (pet-force-coin
   :index 40 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petForceCoin")
  (pet-intelligence-coin
   :index 41 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petIntelligenceCoin")
  (pet-speed-coin
   :index 42 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "petSpeedCoin")
  (tili-buy-num
   :index 43 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "tiliBuyNum")
  (horse-coin
   :index 44 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "horseCoin")
  (campfire-wood
   :index 45 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "campfireWood")
  (campfire-meal
   :index 46 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "campfireMeal")
  (entry-item-1
   :index 47 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "entryItem1")
  (entry-item-2
   :index 48 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "entryItem2")
  (entry-item-3
   :index 49 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "entryItem3")
  (arena-puzzle1
   :index 50 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaPuzzle1")
  (arena-puzzle2
   :index 51 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaPuzzle2")
  (arena-puzzle3
   :index 52 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaPuzzle3")
  (arena-puzzle4
   :index 53 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaPuzzle4")
  (arena-puzzle5
   :index 54 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaPuzzle5")
  (arena-puzzle6
   :index 55 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaPuzzle6")
  (arena-puzzle7
   :index 56 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaPuzzle7")
  (arena-puzzle8
   :index 57 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaPuzzle8")
  (arena-puzzle9
   :index 58 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "arenaPuzzle9")
  (loop-water
   :index 59 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "loopWater")
  (loop-dewdrop
   :index 60 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "loopDewdrop")
  (loop-pigment
   :index 61 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "loopPigment")
  (loop-iron
   :index 62 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "loopIron")
  (loop-melting
   :index 63 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "loopMelting")
  (loop-potion
   :index 64 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "loopPotion")
  (loop-flour
   :index 65 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "loopFlour")
  (free-soul
   :index 66 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "freeSoul")
  (free-soul2
   :index 67 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "freeSoul2")
  (roulette-score
   :index 68 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rouletteScore")
  (big-map-coin
   :index 69 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "bigMapCoin")
  (bonfire-coin
   :index 70 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "bonfireCoin")
  (bonfire-coin2
   :index 71 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "bonfireCoin2"))

(pi:define-message guild-resource
    (
     :name "guild_resource")
  ;; Fields
  (guild-exp
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildExp")
  (guild-active
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildActive")
  (guild-contribute
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildContribute")
  (guild-boss-score
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildBossScore")
  (guild-lev
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "guildLev"))

(pi:define-message tower-record
    (
     :name "tower_record")
  ;; Fields
  (player-info
   :index 1 :type player :kind :message :label (:optional) :json-name "playerInfo")
  (pass-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "passTime")
  (battle-result
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "battleResult")
  (battle-info
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo"))

(pi:define-message put-hero
    (
     :name "put_hero")
  ;; Fields
  (player
   :index 1 :type player :kind :message :label (:optional) :json-name "player")
  (hero-info
   :index 2 :type hero-base-info :kind :message :label (:optional) :json-name "heroInfo"))

(pi:define-message reward-task
    (
     :name "reward_task")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (status
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status")
  (start-time
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "startTime")
  (create-time
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "createTime")
  (end-time
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "endTime")
  (heros
   :index 7 :type put-hero :kind :message :label (:repeated :list) :json-name "heros")
  (race1
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "race1")
  (race1-num
   :index 9 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "race1Num")
  (race2
   :index 10 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "race2")
  (race2-num
   :index 11 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "race2Num")
  (reward
   :index 12 :type game-reward-res :kind :message :label (:optional) :json-name "reward"))

(pi:define-message mount-info
    (
     :name "mount_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (uid
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "uid")
  (hero-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (config-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configId")
  (lev
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (eqp-index1
   :index 6 :type item :kind :message :label (:optional) :json-name "eqpIndex1")
  (eqp-index2
   :index 7 :type item :kind :message :label (:optional) :json-name "eqpIndex2")
  (eqp-index3
   :index 8 :type item :kind :message :label (:optional) :json-name "eqpIndex3")
  (eqp-index4
   :index 9 :type item :kind :message :label (:optional) :json-name "eqpIndex4"))

(pi:define-message swing-info
    (
     :name "swing_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "id")
  (uid
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "uid")
  (hero-id
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "heroId")
  (config-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "configId")
  (lev
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev"))

(pi:define-message start-task-info
    (
     :name "start_task_info")
  ;; Fields
  (task-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "taskId")
  (heros
   :index 2 :type put-hero :kind :message :label (:repeated :list) :json-name "heros"))

(pi:define-message empty
    (
     :name "empty"))

(pi:define-message fight-init-data
    (
     :name "fight_init_data")
  ;; Fields
  (random-seed
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "randomSeed")
  (limit-time
   :index 2 :type cl:float :kind :scalar :label (:optional) :json-name "limitTime")
  (sp-eff-able
   :index 3 :type cl:boolean :kind :scalar :label (:optional) :json-name "spEffAble")
  (limit-camp-suffer-dmg-able
   :index 4 :type cl:boolean :kind :scalar :label (:optional) :json-name "limitCampSufferDmgAble")
  (time-limit-camp-id
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "timeLimitCampId")
  (time-free-camp-id
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "timeFreeCampId")
  (guild-buff-list
   :index 7 :type guild-buff-msg :kind :message :label (:optional) :json-name "guildBuffList")
  (maze-msg
   :index 8 :type maze-curr-status :kind :message :label (:optional) :json-name "mazeMsg")
  (selected-buff-id
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "selectedBuffId")
  (ban-camp-buff
   :index 10 :type cl:boolean :kind :scalar :label (:optional) :json-name "banCampBuff")
  (station-euler
   :index 11 :type cl:float :kind :scalar :label (:optional) :json-name "stationEuler")
  (station-x
   :index 12 :type cl:float :kind :scalar :label (:optional) :json-name "stationX")
  (station-y
   :index 13 :type cl:float :kind :scalar :label (:optional) :json-name "stationY")
  (station-z
   :index 14 :type cl:float :kind :scalar :label (:optional) :json-name "stationZ")
  (init-power
   :index 15 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "initPower")
  (lock-props-hp-while-resulted
   :index 16 :type cl:boolean :kind :scalar :label (:optional) :json-name "lockPropsHpWhileResulted")
  (cfg-tag
   :index 17 :type cl:string :kind :scalar :label (:optional) :json-name "cfgTag")
  (account-tag
   :index 18 :type cl:string :kind :scalar :label (:optional) :json-name "accountTag")
  (enable-fight-suppress
   :index 19 :type cl:boolean :kind :scalar :label (:optional) :json-name "enableFightSuppress")
  (garden-building-list
   :index 20 :type kv-int-int :kind :message :label (:repeated :list) :json-name "gardenBuildingList")
  (station-type
   :index 21 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "stationType")
  (big-map-boss-buff-list
   :index 22 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "bigMapBossBuffList")
  (guild-boss-buff
   :index 23 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "guildBossBuff"))

(pi:define-message kv-int-int
    (
     :name "kv_int_int")
  ;; Fields
  (key
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "key")
  (val
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "val"))

(pi:define-message guild-buff-msg
    (
     :name "guild_buff_msg")
  ;; Fields
  (buff-list
   :index 1 :type guild-buff-item :kind :message :label (:repeated :list) :json-name "buffList"))

(pi:define-message guild-buff-item
    (
     :name "guild_buff_item")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "type")
  (lv
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lv"))

(pi:define-message maze-curr-status
    (
     :name "maze_curr_status")
  ;; Fields
  (current-level
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "currentLevel")
  (just-spring-count
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "justSpringCount")
  (battle-history
   :index 3 :type maze-battle-history :kind :message :label (:repeated :list) :json-name "battleHistory"))

(pi:define-message maze-battle-history
    (
     :name "maze_battle_history")
  ;; Fields
  (trace-index
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "traceIndex")
  (lose-count
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "loseCount")
  (spring-count
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "springCount")
  (prop-usage
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "propUsage")
  (got-relic
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "gotRelic"))

(pi:define-message fight-char-msg
    (
     :name "fight_char_msg")
  ;; Fields
  (transform
   :index 1 :type fight-char-msg-transform :kind :message :label (:optional) :json-name "transform")
  (core
   :index 2 :type fight-char-msg-core :kind :message :label (:optional) :json-name "core"))

(pi:define-message fight-char-msg-transform
    (
     :name "fight_char_msg_transform")
  ;; Fields
  (init-position-x
   :index 1 :type cl:float :kind :scalar :label (:optional) :json-name "initPositionX")
  (init-position-y
   :index 2 :type cl:float :kind :scalar :label (:optional) :json-name "initPositionY")
  (altitude
   :index 3 :type cl:float :kind :scalar :label (:optional) :json-name "altitude")
  (init-euler-rotation
   :index 4 :type cl:float :kind :scalar :label (:optional) :json-name "initEulerRotation")
  (mark-station
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "markStation"))

(pi:define-message fight-char-msg-core
    (
     :name "fight_char_msg_core")
  ;; Fields
  (caller-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "callerId")
  (camp-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "campId")
  (char-model-dir
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "charModelDir")
  (ordinary-skill-id
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "ordinarySkillId")
  (sp-skill-id
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "spSkillId")
  (addition-skill-id-list
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "additionSkillIdList")
  (init-hp-rate
   :index 7 :type cl:float :kind :scalar :label (:optional) :json-name "initHpRate")
  (init-mp-rate
   :index 8 :type cl:float :kind :scalar :label (:optional) :json-name "initMpRate")
  (char-type
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "charType")
  (profession
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "profession")
  (mark-table-id
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "markTableId")
  (mark-race
   :index 12 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "markRace")
  (mark-quality
   :index 13 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "markQuality")
  (char-attributes
   :index 14 :type fight-char-attribute :kind :message :label (:repeated :list) :json-name "charAttributes")
  (suffer-def-mp-inc-rate
   :index 15 :type cl:float :kind :scalar :label (:optional) :json-name "sufferDefMpIncRate")
  (mp-inc-per-ms
   :index 16 :type cl:float :kind :scalar :label (:optional) :json-name "mpIncPerMs")
  (mark-fight-score
   :index 17 :type cl:float :kind :scalar :label (:optional) :json-name "markFightScore")
  (mark-boss
   :index 18 :type cl:boolean :kind :scalar :label (:optional) :json-name "markBoss")
  (boss-type
   :index 19 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "bossType"))

(pi:define-message fight-char-attribute
    (
     :name "fight_char_attribute")
  ;; Fields
  (att-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "attId")
  (self-val
   :index 2 :type cl:float :kind :scalar :label (:optional) :json-name "selfVal")
  (add-val
   :index 3 :type cl:float :kind :scalar :label (:optional) :json-name "addVal"))

(pi:define-message fight-frame-time
    (
     :name "fight_frame_time")
  ;; Fields
  (frame-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "frameId")
  (lead-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "leadId"))

(pi:define-message op-add-char
    (
     :name "op_add_char")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (char-msg
   :index 2 :type fight-char-msg :kind :message :label (:optional) :json-name "charMsg"))

(pi:define-message fight-total-data
    (
     :name "fight_total_data")
  ;; Fields
  (init-data
   :index 1 :type fight-init-data :kind :message :label (:optional) :json-name "initData")
  (op-add-char-list
   :index 2 :type op-add-char :kind :message :label (:repeated :list) :json-name "opAddCharList")
  (op-force-skill-list
   :index 3 :type op-force-skill :kind :message :label (:repeated :list) :json-name "opForceSkillList")
  (op-set-sp-auto-list
   :index 4 :type op-set-skill-auto :kind :message :label (:repeated :list) :json-name "opSetSpAutoList")
  (op-set-camp-against-list
   :index 5 :type op-set-camp-against :kind :message :label (:repeated :list) :json-name "opSetCampAgainstList")
  (op-retarget-list
   :index 6 :type op-retarget :kind :message :label (:repeated :list) :json-name "opRetargetList")
  (op-set-action-able-list
   :index 7 :type op-set-action-able :kind :message :label (:repeated :list) :json-name "opSetActionAbleList")
  (op-rem-char-list
   :index 8 :type op-rem-char :kind :message :label (:repeated :list) :json-name "opRemCharList")
  (op-app-moving-speed-scale-list
   :index 9 :type op-app-moving-speed-scale :kind :message :label (:repeated :list) :json-name "opAppMovingSpeedScaleList")
  (op-cancel-moving-speed-scale-list
   :index 10 :type op-cancel-moving-speed-scale :kind :message :label (:repeated :list) :json-name "opCancelMovingSpeedScaleList")
  (op-kill-all-list
   :index 11 :type op-kill-all :kind :message :label (:repeated :list) :json-name "opKillAllList")
  (op-clear-scene-list
   :index 12 :type op-clear-scene :kind :message :label (:repeated :list) :json-name "opClearSceneList")
  (op-set-char-position-list
   :index 13 :type op-set-char-position :kind :message :label (:repeated :list) :json-name "opSetCharPositionList")
  (op-set-forward-euler-list
   :index 14 :type op-set-forward-euler-msg :kind :message :label (:repeated :list) :json-name "opSetForwardEulerList")
  (op-set-altitude-list
   :index 15 :type op-set-altitude-msg :kind :message :label (:repeated :list) :json-name "opSetAltitudeList")
  (op-app-attention-list
   :index 16 :type op-app-attention :kind :message :label (:repeated :list) :json-name "opAppAttentionList")
  (op-cancel-attention-list
   :index 17 :type op-cancel-attention :kind :message :label (:repeated :list) :json-name "opCancelAttentionList")
  (op-load-lev-list
   :index 18 :type op-load-lev :kind :message :label (:repeated :list) :json-name "opLoadLevList")
  (op-trigger-sp-skill-list
   :index 19 :type op-trigger-sp-skill :kind :message :label (:repeated :list) :json-name "opTriggerSpSkillList")
  (op-trigger-sp-for-station-list
   :index 20 :type op-trigger-sp-for-station :kind :message :label (:repeated :list) :json-name "opTriggerSpForStationList")
  (op-add-char-to-station-list
   :index 21 :type op-add-char-to-station :kind :message :label (:repeated :list) :json-name "opAddCharToStationList")
  (op-fill-monster-group-list
   :index 22 :type op-fill-monster-group :kind :message :label (:repeated :list) :json-name "opFillMonsterGroupList")
  (op-fill-maze-helper-list
   :index 23 :type op-fill-maze-helper :kind :message :label (:repeated :list) :json-name "opFillMazeHelperList")
  (op-fill-guild-boss-list
   :index 24 :type op-fill-guild-boss :kind :message :label (:repeated :list) :json-name "opFillGuildBossList")
  (op-fill-tower-list
   :index 25 :type op-fill-tower :kind :message :label (:repeated :list) :json-name "opFillTowerList")
  (op-fill-ruin-list
   :index 26 :type op-fill-ruin :kind :message :label (:repeated :list) :json-name "opFillRuinList")
  (op-re-set-station-list
   :index 27 :type op-re-set-station :kind :message :label (:repeated :list) :json-name "opReSetStationList")
  (op-change-station-list
   :index 28 :type op-change-station :kind :message :label (:repeated :list) :json-name "opChangeStationList")
  (op-rem-station-char-list
   :index 29 :type op-rem-station-char :kind :message :label (:repeated :list) :json-name "opRemStationCharList")
  (op-add-battle-hero-list
   :index 30 :type op-add-battle-hero :kind :message :label (:repeated :list) :json-name "opAddBattleHeroList")
  (op-fill-pvp-robot-list
   :index 31 :type op-fill-pvp-robot :kind :message :label (:repeated :list) :json-name "opFillPvpRobotList")
  (op-add-battle-group-list
   :index 32 :type op-add-battle-group :kind :message :label (:repeated :list) :json-name "opAddBattleGroupList")
  (op-all-inc-power-list
   :index 33 :type op-all-inc-power :kind :message :label (:repeated :list) :json-name "opAllIncPowerList")
  (op-fill-theme-boss-list
   :index 34 :type op-fill-theme-boss :kind :message :label (:repeated :list) :json-name "opFillThemeBossList")
  (op-fill-loop-boss-list
   :index 35 :type op-fill-loop-boss :kind :message :label (:repeated :list) :json-name "opFillLoopBossList")
  (op-fill-boss-list
   :index 36 :type op-fill-boss :kind :message :label (:repeated :list) :json-name "opFillBossList"))

(pi:define-message op-all-inc-power
    (
     :name "op_all_inc_power")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (inc-msg
   :index 2 :type all-inc-power :kind :message :label (:optional) :json-name "incMsg"))

(pi:define-message all-inc-power
    (
     :name "all_inc_power")
  ;; Fields
  (power-count
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "powerCount"))

(pi:define-message op-fill-pvp-robot
    (
     :name "op_fill_pvp_robot")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (robot-msg
   :index 2 :type fill-pvp-robot :kind :message :label (:optional) :json-name "robotMsg"))

(pi:define-message fill-pvp-robot
    (
     :name "fill_pvp_robot")
  ;; Fields
  (pvp-robot-group-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "pvpRobotGroupId"))

(pi:define-message op-add-battle-hero
    (
     :name "op_add_battle_hero")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (msg
   :index 2 :type battle-hero-msg :kind :message :label (:optional) :json-name "msg"))

(pi:define-message battle-hero-msg
    (
     :name "battle_hero_msg")
  ;; Fields
  (hero-msg
   :index 1 :type cal-hero :kind :message :label (:optional) :json-name "heroMsg")
  (camp
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "camp")
  (hp-rate
   :index 3 :type cl:float :kind :scalar :label (:optional) :json-name "hpRate")
  (mp-rate
   :index 4 :type cl:float :kind :scalar :label (:optional) :json-name "mpRate"))

(pi:define-message op-add-battle-group
    (
     :name "op_add_battle_group")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (battle-group
   :index 2 :type add-battle-group :kind :message :label (:optional) :json-name "battleGroup"))

(pi:define-message add-battle-group
    (
     :name "add_battle_group")
  ;; Fields
  (list
   :index 1 :type cal-hero :kind :message :label (:repeated :list) :json-name "list"))

(pi:define-message op-rem-station-char
    (
     :name "op_rem_station_char")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (station-msg
   :index 2 :type rem-station-char :kind :message :label (:optional) :json-name "stationMsg"))

(pi:define-message rem-station-char
    (
     :name "rem_station_char")
  ;; Fields
  (station
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "station"))

(pi:define-message op-re-set-station
    (
     :name "op_re_set_station")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (re-set-msg
   :index 2 :type re-set-station :kind :message :label (:optional) :json-name "reSetMsg"))

(pi:define-message re-set-station
    (
     :name "re_set_station")
  ;; Fields
  (curr-station
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "currStation")
  (target-station
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetStation"))

(pi:define-message op-change-station
    (
     :name "op_change_station")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (change-msg
   :index 2 :type change-station :kind :message :label (:optional) :json-name "changeMsg"))

(pi:define-message change-station
    (
     :name "change_station")
  ;; Fields
  (station-a
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "stationA")
  (station-b
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "stationB"))

(pi:define-message op-fill-ruin
    (
     :name "op_fill_ruin")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (ruin-msg
   :index 2 :type fill-ruin :kind :message :label (:optional) :json-name "ruinMsg"))

(pi:define-message fill-ruin
    (
     :name "fill_ruin")
  ;; Fields
  (ruin-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "ruinId")
  (index
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "index")
  (blood-arr
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:repeated :list) :json-name "bloodArr"))

(pi:define-message op-fill-tower
    (
     :name "op_fill_tower")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (tower-msg
   :index 2 :type fill-tower :kind :message :label (:optional) :json-name "towerMsg"))

(pi:define-message fill-tower
    (
     :name "fill_tower")
  ;; Fields
  (tower-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "towerId"))

(pi:define-message op-fill-guild-boss
    (
     :name "op_fill_guild_boss")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (guild-boss-msg
   :index 2 :type fill-guild-boss :kind :message :label (:optional) :json-name "guildBossMsg"))

(pi:define-message fill-guild-boss
    (
     :name "fill_guild_boss")
  ;; Fields
  (guild-boss-cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "guildBossCfgId"))

(pi:define-message op-fill-theme-boss
    (
     :name "op_fill_theme_boss")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (theme-boss-msg
   :index 2 :type fill-theme-boss :kind :message :label (:optional) :json-name "themeBossMsg"))

(pi:define-message fill-theme-boss
    (
     :name "fill_theme_boss")
  ;; Fields
  (theme-boss-cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "themeBossCfgId"))

(pi:define-message op-fill-loop-boss
    (
     :name "op_fill_loop_boss")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (loop-boss-msg
   :index 2 :type fill-loop-boss :kind :message :label (:optional) :json-name "loopBossMsg"))

(pi:define-message fill-loop-boss
    (
     :name "fill_loop_boss")
  ;; Fields
  (loop-boss-cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "loopBossCfgId"))

(pi:define-message op-fill-boss
    (
     :name "op_fill_boss")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (boss-msg
   :index 2 :type fill-boss :kind :message :label (:optional) :json-name "bossMsg"))

(pi:define-message fill-boss
    (
     :name "fill_boss")
  ;; Fields
  (boss-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossType")
  (boss-cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "bossCfgId")
  (boss-current-hp
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "bossCurrentHp"))

(pi:define-message op-fill-maze-helper
    (
     :name "op_fill_maze_helper")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (helper-msg
   :index 2 :type fill-maze-helper :kind :message :label (:optional) :json-name "helperMsg"))

(pi:define-message fill-maze-helper
    (
     :name "fill_maze_helper")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (station
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "station")
  (blood
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "blood")
  (anger
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "anger"))

(pi:define-message op-fill-monster-group
    (
     :name "op_fill_monster_group")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (monster-group-msg
   :index 2 :type fill-monster-group :kind :message :label (:optional) :json-name "monsterGroupMsg"))

(pi:define-message fill-monster-group
    (
     :name "fill_monster_group")
  ;; Fields
  (monster-group-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "monsterGroupId")
  (hp-rate-list
   :index 2 :type cl:float :kind :scalar :label (:repeated :list) :json-name "hpRateList"))

(pi:define-message op-add-char-to-station
    (
     :name "op_add_char_to_station")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (char-msg
   :index 2 :type add-char-to-station :kind :message :label (:optional) :json-name "charMsg"))

(pi:define-message add-char-to-station
    (
     :name "add_char_to_station")
  ;; Fields
  (station
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "station")
  (core
   :index 3 :type fight-char-msg-core :kind :message :label (:optional) :json-name "core"))

(pi:define-message op-force-skill
    (
     :name "op_force_skill")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (trigger-msg
   :index 2 :type skill-trigger-msg :kind :message :label (:optional) :json-name "triggerMsg"))

(pi:define-message skill-trigger-msg
    (
     :name "skill_trigger_msg")
  ;; Fields
  (char-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "charId")
  (skill-gen-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "skillGenId"))

(pi:define-message op-trigger-sp-skill
    (
     :name "op_trigger_sp_skill")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (trigger-msg
   :index 2 :type trigger-sp-skill :kind :message :label (:optional) :json-name "triggerMsg"))

(pi:define-message trigger-sp-skill
    (
     :name "trigger_sp_skill")
  ;; Fields
  (char-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "charId"))

(pi:define-message op-trigger-sp-for-station
    (
     :name "op_trigger_sp_for_station")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (station-msg
   :index 2 :type trigger-sp-for-station :kind :message :label (:optional) :json-name "stationMsg"))

(pi:define-message trigger-sp-for-station
    (
     :name "trigger_sp_for_station")
  ;; Fields
  (station
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "station"))

(pi:define-message op-set-skill-auto
    (
     :name "op_set_skill_auto")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (setting
   :index 2 :type skill-auto-setting :kind :message :label (:optional) :json-name "setting"))

(pi:define-message skill-auto-setting
    (
     :name "skill_auto_setting")
  ;; Fields
  (camp-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "campId")
  (auto
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "auto"))

(pi:define-message op-set-camp-against
    (
     :name "op_set_camp_against")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (camp-against
   :index 2 :type camp-against-msg :kind :message :label (:optional) :json-name "campAgainst"))

(pi:define-message camp-against-msg
    (
     :name "camp_against_msg")
  ;; Fields
  (camp-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "campId")
  (suffer-able-count-arr
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "sufferAbleCountArr"))

(pi:define-message op-retarget
    (
     :name "op_retarget")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (retarget-msg
   :index 2 :type retarget-msg :kind :message :label (:optional) :json-name "retargetMsg"))

(pi:define-message retarget-msg
    (
     :name "retarget_msg")
  ;; Fields
  (op-char-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "opCharId")
  (target-char-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "targetCharId"))

(pi:define-message op-set-action-able
    (
     :name "op_set_action_able")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (action-able-msg
   :index 2 :type action-able-msg :kind :message :label (:optional) :json-name "actionAbleMsg"))

(pi:define-message action-able-msg
    (
     :name "action_able_msg")
  ;; Fields
  (camp-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "campId")
  (able
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "able"))

(pi:define-message op-rem-char
    (
     :name "op_rem_char")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (rem-char
   :index 2 :type rem-char-msg :kind :message :label (:optional) :json-name "remChar"))

(pi:define-message rem-char-msg
    (
     :name "rem_char_msg")
  ;; Fields
  (char-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "charId"))

(pi:define-message op-app-moving-speed-scale
    (
     :name "op_app_moving_speed_scale")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (app-msg
   :index 2 :type app-moving-speed-scale-msg :kind :message :label (:optional) :json-name "appMsg"))

(pi:define-message app-moving-speed-scale-msg
    (
     :name "app_moving_speed_scale_msg")
  ;; Fields
  (camp-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "campId")
  (scale-count
   :index 2 :type cl:float :kind :scalar :label (:optional) :json-name "scaleCount"))

(pi:define-message op-cancel-moving-speed-scale
    (
     :name "op_cancel_moving_speed_scale")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (cancel-msg
   :index 2 :type cancel-moving-speed-scale-msg :kind :message :label (:optional) :json-name "cancelMsg"))

(pi:define-message cancel-moving-speed-scale-msg
    (
     :name "cancel_moving_speed_scale_msg")
  ;; Fields
  (camp-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "campId")
  (app-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "appId"))

(pi:define-message op-kill-all
    (
     :name "op_kill_all")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (kill-all-msg
   :index 2 :type kill-all-msg :kind :message :label (:optional) :json-name "killAllMsg"))

(pi:define-message kill-all-msg
    (
     :name "kill_all_msg")
  ;; Fields
  (camp-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "campId"))

(pi:define-message op-clear-scene
    (
     :name "op_clear_scene")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (clear-scene-msg
   :index 2 :type clear-scene-msg :kind :message :label (:optional) :json-name "clearSceneMsg"))

(pi:define-message clear-scene-msg
    (
     :name "clear_scene_msg"))

(pi:define-message op-set-char-position
    (
     :name "op_set_char_position")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (position
   :index 2 :type position-msg :kind :message :label (:optional) :json-name "position"))

(pi:define-message position-msg
    (
     :name "position_msg")
  ;; Fields
  (char-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "charId")
  (x
   :index 2 :type cl:float :kind :scalar :label (:optional) :json-name "x")
  (y
   :index 3 :type cl:float :kind :scalar :label (:optional) :json-name "y"))

(pi:define-message op-set-forward-euler-msg
    (
     :name "op_set_forward_euler_msg")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (forward-msg
   :index 2 :type forward-euler-msg :kind :message :label (:optional) :json-name "forwardMsg"))

(pi:define-message forward-euler-msg
    (
     :name "forward_euler_msg")
  ;; Fields
  (char-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "charId")
  (euler
   :index 2 :type cl:float :kind :scalar :label (:optional) :json-name "euler"))

(pi:define-message op-set-altitude-msg
    (
     :name "op_set_altitude_msg")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (altitude
   :index 2 :type altitude-msg :kind :message :label (:optional) :json-name "altitude"))

(pi:define-message altitude-msg
    (
     :name "altitude_msg")
  ;; Fields
  (char-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "charId")
  (altitude
   :index 2 :type cl:float :kind :scalar :label (:optional) :json-name "altitude"))

(pi:define-message op-app-attention
    (
     :name "op_app_attention")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (attention
   :index 2 :type app-attention-msg :kind :message :label (:optional) :json-name "attention"))

(pi:define-message app-attention-msg
    (
     :name "app_attention_msg")
  ;; Fields
  (char-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "charId"))

(pi:define-message op-cancel-attention
    (
     :name "op_cancel_attention")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (attention-cancel
   :index 2 :type cancel-attention-msg :kind :message :label (:optional) :json-name "attentionCancel"))

(pi:define-message cancel-attention-msg
    (
     :name "cancel_attention_msg")
  ;; Fields
  (char-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "charId")
  (app-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "appId"))

(pi:define-message op-load-lev
    (
     :name "op_load_lev")
  ;; Fields
  (frame-time
   :index 1 :type fight-frame-time :kind :message :label (:optional) :json-name "frameTime")
  (lev-load
   :index 2 :type load-lev :kind :message :label (:optional) :json-name "levLoad"))

(pi:define-message load-lev
    (
     :name "load_lev")
  ;; Fields
  (lev-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "levId"))

(pi:define-message cal-fight-result
    (
     :name "cal_fight_result")
  ;; Fields
  (win-camp
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "winCamp"))

(pi:define-message fight-key
    (
     :name "fight_key")
  ;; Fields
  (key
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "key"))

(pi:define-message fight-msg
    (
     :name "fight_msg")
  ;; Fields
  (msg
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "msg"))

(pi:define-message fight-hero-info
    (
     :name "fight_hero_info")
  ;; Fields
  (hero-gen-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroGenId")
  (hp-rate
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "hpRate")
  (mp-rate
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "mpRate")
  (cfg-id
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (is-helper
   :index 5 :type cl:boolean :kind :scalar :label (:optional) :json-name "isHelper"))

(pi:define-message fight-monster-info
    (
     :name "fight_monster_info")
  ;; Fields
  (hp
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hp")
  (suffered-dmg
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "sufferedDmg"))

(pi:define-message fight-result
    (
     :name "fight_result")
  ;; Fields
  (ordinary
   :index 1 :type cl:boolean :kind :scalar :label (:optional) :json-name "ordinary")
  (player-win
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "playerWin")
  (hero-info-list
   :index 3 :type fight-hero-info :kind :message :label (:repeated :list) :json-name "heroInfoList")
  (monster-info-list
   :index 4 :type fight-monster-info :kind :message :label (:repeated :list) :json-name "monsterInfoList")
  (star
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "star"))

(pi:define-message rp-team-input
    (
     :name "rp_team_input")
  ;; Fields
  (self-team
   :index 2 :type battle-team :kind :message :label (:optional) :json-name "selfTeam")
  (target-team
   :index 3 :type battle-team :kind :message :label (:optional) :json-name "targetTeam"))

(pi:define-message rp-arena-battle-valid
    (
     :name "rp_arena_battle_valid")
  ;; Fields
  (battle-key
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey")
  (battle-info
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo"))

(pi:define-message rp-battle-valid
    (
     :name "rp_battle_valid")
  ;; Fields
  (input
   :index 1 :type rp-team-input :kind :message :label (:optional) :json-name "input")
  (battle-info
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo"))

(pi:define-message player-hero
    (
     :name "player_hero")
  ;; Fields
  (hero-server-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroServerId")
  (station
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "station"))

(pi:define-message player-operation
    (
     :name "player_operation")
  ;; Fields
  (random-seed
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "randomSeed")
  (station-sp-list
   :index 2 :type op-trigger-sp-for-station :kind :message :label (:repeated :list) :json-name "stationSpList")
  (op-set-skill-auto-list
   :index 3 :type op-set-skill-auto :kind :message :label (:repeated :list) :json-name "opSetSkillAutoList")
  (origin-msg
   :index 4 :type fight-total-data :kind :message :label (:optional) :json-name "originMsg")
  (station-euler
   :index 5 :type cl:float :kind :scalar :label (:optional) :json-name "stationEuler")
  (station-x
   :index 6 :type cl:float :kind :scalar :label (:optional) :json-name "stationX")
  (station-y
   :index 7 :type cl:float :kind :scalar :label (:optional) :json-name "stationY")
  (station-z
   :index 8 :type cl:float :kind :scalar :label (:optional) :json-name "stationZ")
  (account-tag
   :index 9 :type cl:string :kind :scalar :label (:optional) :json-name "accountTag"))

(pi:define-message cal-service-config
    (
     :name "cal_service_config")
  ;; Fields
  (port
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "port")
  (ip
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "ip")
  (record-msg
   :index 3 :type cl:boolean :kind :scalar :label (:optional) :json-name "recordMsg"))

(pi:define-message cal-service-record
    (
     :name "cal_service_record")
  ;; Fields
  (pre-cal-gen-id
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "preCalGenId")
  (cal-tag
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "calTag"))

(pi:define-message user-data-vo
    (
     :name "user_data_vo")
  ;; Fields
  (guide-target-record-list
   :index 1 :type uint-bool-dict-vo :kind :message :label (:repeated :list) :json-name "guideTargetRecordList")
  (story-record-dict
   :index 2 :type uint-bool-dict-vo :kind :message :label (:repeated :list) :json-name "storyRecordDict")
  (is-arena-fighted
   :index 3 :type cl:boolean :kind :scalar :label (:optional) :json-name "isArenaFighted")
  (rechage-first-dict
   :index 4 :type int32-string-dict-vo :kind :message :label (:repeated :list) :json-name "rechageFirstDict")
  (level-switch-record-dict
   :index 5 :type uint-bool-dict-vo :kind :message :label (:repeated :list) :json-name "levelSwitchRecordDict")
  (chat-forbidden-dict
   :index 6 :type string-int32-dict-vo :kind :message :label (:repeated :list) :json-name "chatForbiddenDict")
  (chat-last-close-time
   :index 7 :type cl:string :kind :scalar :label (:optional) :json-name "chatLastCloseTime")
  (is-losed
   :index 8 :type cl:boolean :kind :scalar :label (:optional) :json-name "isLosed")
  (anti-addiction
   :index 9 :type string-int32-dict-vo :kind :message :label (:repeated :list) :json-name "antiAddiction")
  (laby-dict-lev-dict
   :index 10 :type int32-int32-dict-vo :kind :message :label (:repeated :list) :json-name "labyDictLevDict")
  (mount-id
   :index 11 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "mountId")
  (is-showed-boss
   :index 12 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "isShowedBoss")
  (is-auto-collection-botany
   :index 13 :type cl:boolean :kind :scalar :label (:optional) :json-name "isAutoCollectionBotany")
  (island-rank-level
   :index 14 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "islandRankLevel")
  (is-auto-collection-pet
   :index 15 :type cl:boolean :kind :scalar :label (:optional) :json-name "isAutoCollectionPet")
  (have-hero-list
   :index 16 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "haveHeroList")
  (red-open-list
   :index 17 :type cl:string :kind :scalar :label (:repeated :list) :json-name "redOpenList")
  (is-garden-onbook
   :index 18 :type cl:boolean :kind :scalar :label (:optional) :json-name "isGardenOnbook")
  (is-tree-house
   :index 19 :type cl:boolean :kind :scalar :label (:optional) :json-name "isTreeHouse")
  (is-pet-train
   :index 20 :type cl:boolean :kind :scalar :label (:optional) :json-name "isPetTrain")
  (is-get-ship
   :index 21 :type cl:boolean :kind :scalar :label (:optional) :json-name "isGetShip")
  (is-maze-fast-battle
   :index 22 :type cl:boolean :kind :scalar :label (:optional) :json-name "isMazeFastBattle")
  (garden-package-gen-id
   :index 23 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "gardenPackageGenId")
  (garden-package-list
   :index 24 :type garden-package-info :kind :message :label (:repeated :list) :json-name "gardenPackageList")
  (garden-enter-count
   :index 25 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "gardenEnterCount")
  (garden-battle-num
   :index 26 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "gardenBattleNum")
  (finished-flower-guide
   :index 27 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "finishedFlowerGuide")
  (curr-garden-focus-x
   :index 28 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "currGardenFocusX")
  (curr-garden-focus-z
   :index 29 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "currGardenFocusZ")
  (friend-del-time-dic
   :index 30 :type string-int32-dict-vo :kind :message :label (:repeated :list) :json-name "friendDelTimeDic")
  (open-friend-chat-list
   :index 31 :type cl:string :kind :scalar :label (:repeated :list) :json-name "openFriendChatList")
  (is-garden-first-battle
   :index 32 :type cl:boolean :kind :scalar :label (:optional) :json-name "isGardenFirstBattle")
  (is-building
   :index 33 :type cl:boolean :kind :scalar :label (:optional) :json-name "isBuilding")
  (pet-get-list
   :index 34 :type cl:string :kind :scalar :label (:repeated :list) :json-name "petGetList")
  (finished-selectable-flower-guide-list
   :index 35 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "finishedSelectableFlowerGuideList")
  (begined-selectable-flower-guide-group-list
   :index 36 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "beginedSelectableFlowerGuideGroupList")
  (select-able-guide-group-1086-target
   :index 37 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "selectAbleGuideGroup1086Target")
  (select-able-guide-group-1088-target
   :index 38 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "selectAbleGuideGroup1088Target")
  (select-able-guide-group-10040-target
   :index 39 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "selectAbleGuideGroup10040Target")
  (select-able-guide-group-10041-target
   :index 40 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "selectAbleGuideGroup10041Target")
  (is-altar
   :index 41 :type cl:boolean :kind :scalar :label (:optional) :json-name "isAltar")
  (is-maze-fast-battle-lock
   :index 42 :type cl:boolean :kind :scalar :label (:optional) :json-name "isMazeFastBattleLock")
  (is-fist-create
   :index 43 :type cl:boolean :kind :scalar :label (:optional) :json-name "isFistCreate")
  (is-first-explore
   :index 44 :type cl:boolean :kind :scalar :label (:optional) :json-name "isFirstExplore")
  (is-open-loop-garden
   :index 45 :type cl:boolean :kind :scalar :label (:optional) :json-name "isOpenLoopGarden")
  (soul-setting-dic
   :index 46 :type string-bool-dict-vo :kind :message :label (:repeated :list) :json-name "soulSettingDic")
  (draw-card-select-type
   :index 47 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "drawCardSelectType")
  (beast-boss-battle-score
   :index 48 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "beastBossBattleScore")
  (is-roulette-shop
   :index 49 :type cl:boolean :kind :scalar :label (:optional) :json-name "isRouletteShop")
  (auto-buy-dic
   :index 50 :type int32-string-dict-vo :kind :message :label (:repeated :list) :json-name "autoBuyDic")
  (auto-buy-config-dic
   :index 51 :type int32-string-dict-vo :kind :message :label (:repeated :list) :json-name "autoBuyConfigDic")
  (next-day-time-dic
   :index 52 :type int32-string-dict-vo :kind :message :label (:repeated :list) :json-name "nextDayTimeDic")
  (garden-challenge-fast
   :index 53 :type cl:boolean :kind :scalar :label (:optional) :json-name "gardenChallengeFast"))

(pi:define-message garden-package-info
    (
     :name "garden_package_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (x
   :index 2 :type cl:float :kind :scalar :label (:optional) :json-name "x")
  (z
   :index 3 :type cl:float :kind :scalar :label (:optional) :json-name "z"))

(pi:define-message uint-bool-dict-vo
    (
     :name "uint_bool_dict_vo")
  ;; Fields
  (key
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "key")
  (value
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message string-int32-dict-vo
    (
     :name "string_int32_dict_vo")
  ;; Fields
  (key
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "key")
  (value
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message int32-string-dict-vo
    (
     :name "int32_string_dict_vo")
  ;; Fields
  (key
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "key")
  (value
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message int32-int32-dict-vo
    (
     :name "int32_int32_dict_vo")
  ;; Fields
  (key
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "key")
  (value
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message string-bool-dict-vo
    (
     :name "string_bool_dict_vo")
  ;; Fields
  (key
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "key")
  (value
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "value"))

(pi:define-message battle-info-vo
    (
     :name "battle_info_vo")
  ;; Fields
  (out-side-total-battle-info-item
   :index 1 :type battle-info-item-vo :kind :message :label (:optional) :json-name "outSideTotalBattleInfoItem")
  (other-side-total-battle-info-item
   :index 2 :type battle-info-item-vo :kind :message :label (:optional) :json-name "otherSideTotalBattleInfoItem")
  (fight-total-data
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "fightTotalData")
  (out-side-battle-formation
   :index 4 :type battle-formation-vo :kind :message :label (:repeated :list) :json-name "outSideBattleFormation")
  (other-side-battle-formation
   :index 5 :type battle-formation-vo :kind :message :label (:repeated :list) :json-name "otherSideBattleFormation")
  (battle-info-items
   :index 6 :type battle-info-item-dict :kind :message :label (:repeated :list) :json-name "battleInfoItems")
  (fight-time
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "fightTime")
  (star-count
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "starCount")
  (self-pet-info-item
   :index 9 :type battle-info-item-vo :kind :message :label (:optional) :json-name "selfPetInfoItem")
  (other-pet-info-item
   :index 10 :type battle-info-item-vo :kind :message :label (:optional) :json-name "otherPetInfoItem"))

(pi:define-message battle-info-item-dict
    (
     :name "battle_Info_item_dict")
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (list
   :index 2 :type battle-info-item-vo :kind :message :label (:repeated :list) :json-name "list"))

(pi:define-message battle-info-item-vo
    (
     :name "battle_info_item_vo")
  ;; Fields
  (damage-value
   :index 1 :type cl:float :kind :scalar :label (:optional) :json-name "damageValue")
  (cure-value
   :index 2 :type cl:float :kind :scalar :label (:optional) :json-name "cureValue")
  (hurt-value
   :index 3 :type cl:float :kind :scalar :label (:optional) :json-name "hurtValue"))

(pi:define-message battle-formation-vo
    (
     :name "battle_formation_vo")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "cfgId")
  (rank
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rank")
  (lev
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev")
  (fight-score
   :index 4 :type cl:float :kind :scalar :label (:optional) :json-name "fightScore"))

(pi:define-message boss-leader-board-item
    (
     :name "boss_leader_board_item")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "userId")
  (username
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "username")
  (head
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (rank
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "rank")
  (hurt
   :index 7 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "hurt")
  (lev
   :index 8 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "lev"))

(pi:define-message game-fire-party-hall-info-req
    ()
  ;; Fields
  (page
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "page"))

(pi:define-message game-fire-party-hall-info-res
    ()
  ;; Fields
  (rooms
   :index 1 :type room-item :kind :message :label (:repeated :list) :json-name "rooms")
  (joined-ids
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "joinedIds"))

(pi:define-message joined-time-item
    (
     :name "joined_time_item")
  ;; Fields
  (party-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "partyType")
  (time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "time"))

(pi:define-message game-join-fire-party-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-join-fire-party-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-create-fire-party-req
    ()
  ;; Fields
  (party-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "partyType"))

(pi:define-message game-create-fire-party-res
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-fire-party-change-res
    ()
  ;; Fields
  (room
   :index 1 :type room-item :kind :message :label (:optional) :json-name "room"))

(pi:define-message game-fire-party-add-player-res
    ()
  ;; Fields
  (player
   :index 1 :type fire-party-player :kind :message :label (:optional) :json-name "player")
  (fire-party-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "firePartyId"))

(pi:define-message game-wait-join-fire-party-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-wait-join-fire-party-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-fire-party-info-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-fire-party-info-res
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (creator-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "creatorId")
  (party-type
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "partyType")
  (player-num
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "playerNum")
  (end-time
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "endTime")
  (players
   :index 6 :type fire-party-player :kind :message :label (:repeated :list) :json-name "players"))

(pi:define-message game-leave-fire-party-hall-req
    ())

(pi:define-message game-leave-fire-party-hall-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-leave-fire-party-room-hall-req
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id"))

(pi:define-message game-leave-fire-party-room-hall-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-fire-party-help-req
    ()
  ;; Fields
  (player-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "playerId")
  (room-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "roomId"))

(pi:define-message game-fire-party-help-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-fire-party-self-req
    ())

(pi:define-message game-fire-party-self-res
    ()
  ;; Fields
  (player-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "playerId")
  (room-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "roomId")
  (joined-time
   :index 3 :type joined-time-item :kind :message :label (:repeated :list) :json-name "joinedTime")
  (creator-id
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "creatorId")
  (daily-info
   :index 5 :type fp-daily-item :kind :message :label (:repeated :list) :json-name "dailyInfo"))

(pi:define-message fp-daily-item
    (
     :name "fp_daily_item")
  ;; Fields
  (party-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "partyType")
  (joined-time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "joinedTime")
  (create-times
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "createTimes")
  (buy-times
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyTimes")
  (additional-time
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "additionalTime"))

(pi:define-message game-fire-party-self-rooms-req
    ()
  ;; Fields
  (page
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "page"))

(pi:define-message game-fire-party-self-rooms-res
    ()
  ;; Nested messages
  ;; Fields
  (rooms
   :index 1 :type room-item :kind :message :label (:repeated :list) :json-name "rooms")
  (pi:define-map join-at
     :key-type cl-protobufs:int32
     :value-type cl-protobufs:int32
     :json-name "joinAt"
     :value-kind :scalar
     :index 2))

(pi:define-message room-item
    (
     :name "room_item")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (creator
   :index 2 :type fire-party-player :kind :message :label (:optional) :json-name "creator")
  (party-type
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "partyType")
  (player-num
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "playerNum")
  (end-time
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "endTime"))

(pi:define-message fire-party-player
    (
     :name "fire_party_player")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (name
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "name")
  (head
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (lev
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lev")
  (join-time
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "joinTime")
  (joined-time
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "joinedTime")
  (helped-player-ids
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "helpedPlayerIds")
  (from-server
   :index 10 :type cl:string :kind :scalar :label (:optional) :json-name "fromServer"))

(pi:define-message game-join-fire-party-newly-req
    ())

(pi:define-message game-join-fire-party-newly-res
    ()
  ;; Fields
  (help
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "help")
  (end-time
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "endTime"))

(pi:define-message game-fire-party-help-newly-req
    ()
  ;; Fields
  (pos
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message game-fire-party-help-newly-res
    ()
  ;; Fields
  (help
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "help"))

(pi:define-message game-fire-party-buy-reward-time-req
    ()
  ;; Fields
  (party-type
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "partyType"))

(pi:define-message game-fire-party-buy-reward-time-res
    ()
  ;; Fields
  (buy-times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "buyTimes"))

(pi:define-message game-cs-user-info-req
    (
     :name "GameCSUserInfoReq")
  ;; Fields
  (server-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "serverId")
  (user-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userId")
  (account-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "accountId"))

(pi:define-message game-cs-user-info-res
    (
     :name "GameCSUserInfoRes")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userId")
  (username
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "username")
  (head
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "head")
  (head-frame
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "headFrame")
  (head-url
   :index 5 :type cl:string :kind :scalar :label (:optional) :json-name "headUrl")
  (guild-name
   :index 6 :type cl:string :kind :scalar :label (:optional) :json-name "guildName")
  (lev
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lev")
  (fight-score
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "fightScore")
  (server-name
   :index 9 :type cl:string :kind :scalar :label (:optional) :json-name "serverName")
  (server-id
   :index 10 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "serverId")
  (heros
   :index 11 :type battle-hero :kind :message :label (:repeated :list) :json-name "heros"))

(pi:define-message game-fs-boss-join-room-req
    (
     :name "GameFSBossJoinRoomReq"))

(pi:define-message game-fs-boss-join-room-res
    (
     :name "GameFSBossJoinRoomRes")
  ;; Fields
  (room-info
   :index 1 :type fs-room-info :kind :message :label (:optional) :json-name "roomInfo")
  (off-day-at
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "offDayAt"))

(pi:define-message fs-room-info
    (
     :name "fs_room_info")
  ;; Fields
  (id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "id")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (players
   :index 3 :type fs-player :kind :message :label (:repeated :list) :json-name "players")
  (next-change-map-at
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "nextChangeMapAt")
  (next-refresh-stronghold-at
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "nextRefreshStrongholdAt")
  (start-at
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "startAt")
  (chests
   :index 7 :type fs-chest :kind :message :label (:repeated :list) :json-name "chests")
  (monsters
   :index 8 :type fs-monster :kind :message :label (:repeated :list) :json-name "monsters")
  (self-chests
   :index 9 :type fs-chest :kind :message :label (:repeated :list) :json-name "selfChests")
  (self-monsters
   :index 10 :type fs-monster :kind :message :label (:repeated :list) :json-name "selfMonsters")
  (boss
   :index 11 :type fs-boss :kind :message :label (:optional) :json-name "boss")
  (hang-up
   :index 12 :type hang-up-info :kind :message :label (:repeated :list) :json-name "hangUp")
  (self
   :index 13 :type fs-player-self :kind :message :label (:optional) :json-name "self")
  (fighting-boss-players
   :index 14 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "fightingBossPlayers"))

(pi:define-message fs-player
    (
     :name "fs_player")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userId")
  (server-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "serverId")
  (username
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "username")
  (hero-cfg-id
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroCfgId")
  (last-stronghold-id
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lastStrongholdId"))

(pi:define-message hang-up-info
    (
     :name "hang_up_info")
  ;; Fields
  (monster
   :index 1 :type fs-monster :kind :message :label (:optional) :json-name "monster")
  (pos
   :index 2 :type team-pos :kind :message :label (:repeated :list) :json-name "pos")
  (cfg-id
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (start-at
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "startAt")
  (reward-hour
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardHour")
  (reward-rate
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardRate"))

(pi:define-message fs-player-self
    (
     :name "fs_player_self")
  ;; Fields
  (player
   :index 1 :type fs-player :kind :message :label (:optional) :json-name "player")
  (hurt
   :index 2 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (today-boss-free-times
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "todayBossFreeTimes")
  (today-boss-pay-times
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "todayBossPayTimes")
  (today-monster-times
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "todayMonsterTimes")
  (today-chest-times
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "todayChestTimes")
  (buffs
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "buffs")
  (damage-reward
   :index 8 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "damageReward")
  (last-boss-hurt
   :index 9 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "lastBossHurt"))

(pi:define-message fs-chest
    (
     :name "fs_chest")
  ;; Nested enums

  (pi:define-enum fs-chest.reward-levels
      ()
    (humble :index 0)
    (normal :index 1)
    (luxury :index 2))
  ;; Fields
  (stronghold-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (received
   :index 3 :type cl:boolean :kind :scalar :label (:optional) :json-name "received")
  (level
   :index 4 :type fs-chest.reward-levels :kind :enum :label (:optional) :json-name "level" :default :humble))

(pi:define-message fs-boss
    (
     :name "fs_boss")
  ;; Fields
  (stronghold-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (hurt
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (challenge-times
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "challengeTimes"))

(pi:define-message fs-monster
    (
     :name "fs_monster")
  ;; Nested enums

  (pi:define-enum fs-monster.difficulty-levels
      ()
    (easy :index 0)
    (normal :index 1)
    (hard :index 2))
  ;; Fields
  (stronghold-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId")
  (cfg-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (challenged
   :index 3 :type cl:boolean :kind :scalar :label (:optional) :json-name "challenged")
  (level
   :index 4 :type fs-monster.difficulty-levels :kind :enum :label (:optional) :json-name "level" :default :easy)
  (reward-treasure-id
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardTreasureId"))

(pi:define-message game-fs-boss-start-battle-req
    (
     :name "GameFSBossStartBattleReq")
  ;; Fields
  (stronghold-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId"))

(pi:define-message game-fs-boss-start-battle-res
    (
     :name "GameFSBossStartBattleRes")
  ;; Fields
  (battle-key
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-fs-boss-battle-req
    (
     :name "GameFSBossBattleReq")
  ;; Fields
  (hurt
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (battle-info
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "battleInfo")
  (battle-valid
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "battleValid")
  (battle-key
   :index 4 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey")
  (stronghold-id
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId")
  (result
   :index 6 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "result"))

(pi:define-message game-fs-boss-battle-res
    (
     :name "GameFSBossBattleRes")
  ;; Fields
  (hurt
   :index 1 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt")
  (battle-key
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "battleKey"))

(pi:define-message game-fs-boss-receive-chest-req
    (
     :name "GameFSBossReceiveChestReq")
  ;; Fields
  (stronghold-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId"))

(pi:define-message game-fs-boss-receive-chest-res
    (
     :name "GameFSBossReceiveChestRes")
  ;; Fields
  (today-chest-times
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "todayChestTimes"))

(pi:define-message game-fs-boss-refresh-chest-req
    (
     :name "GameFSBossRefreshChestReq")
  ;; Fields
  (stronghold-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId"))

(pi:define-message game-fs-boss-refresh-chest-res
    (
     :name "GameFSBossRefreshChestRes")
  ;; Fields
  (chest
   :index 1 :type fs-chest :kind :message :label (:optional) :json-name "chest"))

(pi:define-message game-fs-boss-refresh-monster-req
    (
     :name "GameFSBossRefreshMonsterReq")
  ;; Fields
  (stronghold-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId"))

(pi:define-message game-fs-boss-refresh-monster-res
    (
     :name "GameFSBossRefreshMonsterRes")
  ;; Fields
  (monster
   :index 1 :type fs-monster :kind :message :label (:optional) :json-name "monster"))

(pi:define-message game-fs-boss-receive-hangup-req
    (
     :name "GameFSBossReceiveHangupReq")
  ;; Fields
  (stronghold-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId"))

(pi:define-message game-fs-boss-receive-handup-res
    (
     :name "GameFSBossReceiveHandupRes")
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-fs-boss-change-hangup-pos-req
    (
     :name "GameFSBossChangeHangupPosReq")
  ;; Fields
  (pos
   :index 1 :type team-pos :kind :message :label (:repeated :list) :json-name "pos")
  (stronghold-id
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId")
  (reward-hour
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardHour"))

(pi:define-message game-fs-boss-change-handup-pos-res
    (
     :name "GameFSBossChangeHandupPosRes")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-fs-boss-change-hero-req
    (
     :name "GameFSBossChangeHeroReq")
  ;; Fields
  (hero-cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "heroCfgId"))

(pi:define-message game-fs-boss-change-hero-res
    (
     :name "GameFSBossChangeHeroRes")
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-fs-boss-leader-board-req
    (
     :name "GameFSBossLeaderBoardReq")
  ;; Fields
  (room-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "roomId"))

(pi:define-message game-fs-boss-leader-board-res
    (
     :name "GameFSBossLeaderBoardRes")
  ;; Fields
  (leader-board
   :index 1 :type cs-leader-board-item :kind :message :label (:repeated :list) :json-name "leaderBoard")
  (self
   :index 2 :type cs-leader-board-item :kind :message :label (:optional) :json-name "self"))

(pi:define-message game-fs-boss-leave-room-req
    (
     :name "GameFSBossLeaveRoomReq"))

(pi:define-message game-fs-boss-leave-room-res
    (
     :name "GameFSBossLeaveRoomRes")
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-fs-boss-stronghold-change-res
    (
     :name "GameFSBossStrongholdChangeRes")
  ;; Fields
  (stronghold-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "strongholdId")
  (event
   :index 2 :type fs-boss-stronghold-event :kind :enum :label (:optional) :json-name "event" :default :ready)
  (hurt
   :index 3 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "hurt"))

(pi:define-message game-fs-boss-tasks-req
    (
     :name "GameFSBossTasksReq"))

(pi:define-message game-fs-boss-tasks-res
    (
     :name "GameFSBossTasksRes")
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message game-fs-boss-task-reward-req
    (
     :name "GameFSBossTaskRewardReq")
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId")
  (reward-all
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "rewardAll"))

(pi:define-message game-fs-boss-task-reward-res
    (
     :name "GameFSBossTaskRewardRes")
  ;; Fields
  (buffs
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:repeated :list) :json-name "buffs"))

(pi:define-message game-fs-boss-task-change-res
    (
     :name "GameFSBossTaskChangeRes")
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message game-fs-boss-damage-reward-req
    (
     :name "GameFSBossDamageRewardReq")
  ;; Fields
  (pos
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "pos"))

(pi:define-message game-fs-boss-damage-reward-res
    (
     :name "GameFSBossDamageRewardRes")
  ;; Fields
  (damage-reward
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "damageReward"))

(pi:define-message game-fs-boss-info-req
    (
     :name "GameFSBossInfoReq"))

(pi:define-message game-fs-boss-info-res
    (
     :name "GameFSBossInfoRes")
  ;; Fields
  (off-day-at
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "offDayAt")
  (hang-up
   :index 2 :type hang-up-info :kind :message :label (:repeated :list) :json-name "hangUp")
  (next-refresh-stronghold-at
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "nextRefreshStrongholdAt"))

(pi:define-message game-fs-boss-quick-attack-req
    (
     :name "GameFSBossQuickAttackReq"))

(pi:define-message game-fs-boss-quick-attack-res
    (
     :name "GameFSBossQuickAttackRes")
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message cs-leader-board-item
    (
     :name "cs_leader_board_item")
  ;; Fields
  (user-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "userId")
  (username
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "username")
  (head
   :index 3 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "head")
  (rank
   :index 4 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rank")
  (lev
   :index 5 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "lev")
  (integral
   :index 6 :type cl-protobufs:int64 :kind :scalar :label (:optional) :json-name "integral")
  (fight-score
   :index 7 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "fightScore")
  (server-name
   :index 8 :type cl:string :kind :scalar :label (:optional) :json-name "serverName")
  (server-id
   :index 9 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "serverId"))

(pi:define-message game-leader-board-first-req
    ())

(pi:define-message game-leader-board-first-res
    ()
  ;; Fields
  (leader-board
   :index 1 :type cs-leader-board-item :kind :message :label (:repeated :list) :json-name "leaderBoard"))

(pi:define-message game-leader-board-fire-party-req
    ())

(pi:define-message game-leader-board-fire-party-res
    ()
  ;; Fields
  (leader-board
   :index 1 :type cs-leader-board-item :kind :message :label (:repeated :list) :json-name "leaderBoard")
  (self
   :index 2 :type cs-leader-board-item :kind :message :label (:optional) :json-name "self"))

(pi:define-message game-leader-board-help-req
    ())

(pi:define-message game-leader-board-help-res
    ()
  ;; Fields
  (leader-board
   :index 1 :type cs-leader-board-item :kind :message :label (:repeated :list) :json-name "leaderBoard")
  (self
   :index 2 :type cs-leader-board-item :kind :message :label (:optional) :json-name "self"))

(pi:define-message game-lucky-gashapon-info-req
    ())

(pi:define-message lucky-gashapon-progess
    ()
  ;; Fields
  (step
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "step")
  (received
   :index 2 :type cl:boolean :kind :scalar :label (:optional) :json-name "received"))

(pi:define-message game-lucky-gashapon-info-res
    ()
  ;; Fields
  (daily-first-draw
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dailyFirstDraw")
  (today-draw-count
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayDrawCount")
  (refresh-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime")
  (draw-count
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "drawCount")
  (diamond-use-count
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "diamondUseCount")
  (sum-count
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sumCount")
  (progress-info
   :index 7 :type lucky-gashapon-progess :kind :message :label (:repeated :list) :json-name "progressInfo"))

(pi:define-message game-lucky-gashapon-draw-req
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type"))

(pi:define-message lucky-gashapon-reward-item
    ()
  ;; Fields
  (source-table
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "sourceTable")
  (item-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (reward-pool-type
   :index 3 :type cl:string :kind :scalar :label (:optional) :json-name "rewardPoolType")
  (nums
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "nums"))

(pi:define-message game-lucky-gashapon-draw-res
    ()
  ;; Fields
  (daily-first-draw
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dailyFirstDraw")
  (today-draw-count
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayDrawCount")
  (draw-count
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "drawCount")
  (diamond-use-count
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "diamondUseCount")
  (rewards
   :index 5 :type lucky-gashapon-reward-item :kind :message :label (:repeated :list) :json-name "rewards")
  (sum-count
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "sumCount"))

(pi:define-message game-lucky-gashapon-progess-reward-req
    ()
  ;; Fields
  (step
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "step"))

(pi:define-message game-lucky-gashapon-progess-reward-res
    ()
  ;; Fields
  (progress-info
   :index 1 :type lucky-gashapon-progess :kind :message :label (:repeated :list) :json-name "progressInfo"))

(pi:define-message game-permanent-pack-purchased-info-req
    ()
  ;; Fields
  (activity-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "activityId"))

(pi:define-message permanent-pack-purchased-info
    ()
  ;; Fields
  (pack-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "packId")
  (purchased-count
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "purchasedCount"))

(pi:define-message game-permanent-pack-purchased-info-res
    ()
  ;; Fields
  (refresh-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime")
  (purchased-info
   :index 2 :type permanent-pack-purchased-info :kind :message :label (:repeated :list) :json-name "purchasedInfo"))

(pi:define-message game-permanent-pack-purchase-res
    ()
  ;; Fields
  (pack-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "packId")
  (purchase-state
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "purchaseState"))

(pi:define-message game-hero-conscription-info-req
    ())

(pi:define-message game-hero-conscription-info-res
    ()
  ;; Fields
  (daily-first-draw
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dailyFirstDraw")
  (today-draw-count
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayDrawCount")
  (refresh-time
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "refreshTime")
  (draw-count
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "drawCount")
  (diamond-use-count
   :index 5 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "diamondUseCount")
  (current-choosed-hero
   :index 6 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "currentChoosedHero"))

(pi:define-message game-hero-conscription-choose-hero-req
    ()
  ;; Fields
  (choosed-hero-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "choosedHeroId"))

(pi:define-message game-hero-conscription-choose-hero-res
    ()
  ;; Fields
  (statu
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "statu"))

(pi:define-message game-hero-conscription-draw-req
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type"))

(pi:define-message hero-conscription-reward-item
    ()
  ;; Fields
  (source-table
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "sourceTable")
  (item-id
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "itemId")
  (nums
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "nums"))

(pi:define-message game-hero-conscription-draw-res
    ()
  ;; Fields
  (daily-first-draw
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "dailyFirstDraw")
  (today-draw-count
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "todayDrawCount")
  (draw-count
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "drawCount")
  (diamond-use-count
   :index 4 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "diamondUseCount")
  (rewards
   :index 5 :type hero-conscription-reward-item :kind :message :label (:repeated :list) :json-name "rewards"))

(pi:define-message option-hero-reward-item
    ()
  ;; Fields
  (id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "ID")
  (source
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "source")
  (nums
   :index 3 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "nums"))

(pi:define-message optional-hero-pool
    ()
  ;; Fields
  (pool
   :index 1 :type option-hero-reward-item :kind :message :label (:repeated :list) :json-name "Pool"))

(pi:define-message game-optional-hero-info-req
    ())

(pi:define-message game-optional-hero-info-res
    ()
  ;; Fields
  (reward-stat
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "rewardStat")
  (pools
   :index 2 :type optional-hero-pool :kind :message :label (:repeated :list) :json-name "pools"))

(pi:define-message game-optional-hero-lottery-req
    ()
  ;; Fields
  (choosed
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "choosed"))

(pi:define-message game-optional-hero-lottery-res
    ()
  ;; Fields
  (pools
   :index 1 :type optional-hero-pool :kind :message :label (:repeated :list) :json-name "pools"))

(pi:define-message game-optional-hero-reward-req
    ()
  ;; Fields
  (choosed
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "choosed"))

(pi:define-message game-optional-hero-reward-res
    ())

(pi:define-message user-title
    (
     :name "user_title")
  ;; Fields
  (level
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "level")
  (exp
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "exp")
  (can-receive-daily-reward
   :index 3 :type cl:boolean :kind :scalar :label (:optional) :json-name "canReceiveDailyReward"))

(pi:define-message game-user-title-tasks-req
    ())

(pi:define-message game-user-title-tasks-res
    ()
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks")
  (title
   :index 2 :type user-title :kind :message :label (:optional) :json-name "title"))

(pi:define-message game-user-title-task-reward-req
    ()
  ;; Fields
  (cfg-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "cfgId"))

(pi:define-message game-user-title-task-reward-res
    ()
  ;; Fields
  (title
   :index 1 :type user-title :kind :message :label (:optional) :json-name "title"))

(pi:define-message game-user-title-task-change-res
    ()
  ;; Fields
  (tasks
   :index 1 :type task :kind :message :label (:repeated :list) :json-name "tasks"))

(pi:define-message game-user-title-level-up-req
    ())

(pi:define-message game-user-title-level-up-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-user-title-daily-reward-req
    ())

(pi:define-message game-user-title-daily-reward-res
    ()
  ;; Fields
  (title
   :index 1 :type user-title :kind :message :label (:optional) :json-name "title"))

(pi:define-message shop-buy-item
    (
     :name "shop_buy_item")
  ;; Fields
  (product-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "productId")
  (num
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "num"))

(pi:define-message game-batch-buy-req
    ()
  ;; Fields
  (items
   :index 1 :type shop-buy-item :kind :message :label (:repeated :list) :json-name "items")
  (shop-type
   :index 2 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "shopType")
  (float-list
   :index 3 :type grid-pos :kind :message :label (:repeated :list) :json-name "floatList"))

(pi:define-message game-credit-info-req
    ())

(pi:define-message game-credit-info-res
    ()
  ;; Fields
  (online-dur-added
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "onlineDurAdded")
  (online-dur-refresh
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "onlineDurRefresh"))

(pi:define-message game-credit-check-redine-req
    ())

(pi:define-message game-credit-check-redine-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-credit-sub-score-req
    ()
  ;; Fields
  (type
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "type")
  (statement
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "statement"))

(pi:define-message game-credit-sub-score-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-credit-online-dur-add-score-req
    ())

(pi:define-message game-credit-online-dur-add-score-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message game-credit-manual-login-req
    ())

(pi:define-message game-credit-manual-login-res
    ())

(pi:define-message green-hand-pack
    ()
  ;; Fields
  (pack-id
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "packID")
  (buy-times
   :index 2 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "buyTimes"))

(pi:define-message game-green-hand-gift-info-req
    ())

(pi:define-message game-green-hand-gift-info-res
    ()
  ;; Fields
  (create-time
   :index 1 :type cl-protobufs:uint32 :kind :scalar :label (:optional) :json-name "createTime")
  (pack-info
   :index 2 :type green-hand-pack :kind :message :label (:repeated :list) :json-name "packInfo"))

(pi:define-message game-weekend-party-req
    ())

(pi:define-message game-weekend-party-res
    ()
  ;; Fields
  (data-id
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "dataId")
  (today
   :index 2 :type weekend-day :kind :enum :label (:optional) :json-name "today" :default :unknown)
  (gifts
   :index 3 :type weekend-party-gift :kind :message :label (:repeated :list) :json-name "gifts"))

(pi:define-message game-weekend-party-gift-receive-req
    ()
  ;; Fields
  (day
   :index 1 :type weekend-day :kind :enum :label (:optional) :json-name "day" :default :unknown))

(pi:define-message game-weekend-party-gift-receive-res
    ()
  ;; Fields
  (status
   :index 1 :type cl-protobufs:int32 :kind :scalar :label (:optional) :json-name "status"))

(pi:define-message weekend-party-gift
    ()
  ;; Fields
  (day
   :index 1 :type weekend-day :kind :enum :label (:optional) :json-name "day" :default :unknown)
  (status
   :index 2 :type weekend-party-gift-status :kind :enum :label (:optional) :json-name "status" :default :unreceived))

;;; Services
(pi:define-service fight-calculator
    (:source-location #P"game.proto"
     :name "fight_calculator")
  (pre-battle-push (
    (rp-team-input :name "game.rp_team_input") =>
    (fight-key :name "game.fight_key"))
    :name "pre_battle_push")
  (pre-battle-valid (
    (rp-arena-battle-valid :name "game.rp_arena_battle_valid") =>
    (fight-result :name "game.fight_result"))
    :name "pre_battle_valid")
  (battle-valid (
    (rp-battle-valid :name "game.rp_battle_valid") =>
    (fight-result :name "game.fight_result"))
    :name "battle_valid"))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:add-file-descriptor #P"game.proto" 'game)
)

(cl:export '(able
             acc-time
             acce-time
             account
             account-id
             account-tag
             action
             action-able-msg
             active
             active-groups
             active-id
             active-num
             active-zones
             activity-id
             activity-id-list
             activity-point
             add-battle-group
             add-char-to-station
             add-day-active
             add-flag
             add-item-ist
             add-items
             add-list
             add-point
             add-task-list
             add-tasks
             add-val
             addition
             addition-skill-id-list
             additional-time
             adds
             all-inc-power
             altitude
             altitude-msg
             anger
             anti-addiction
             app-attention-msg
             app-id
             app-moving-speed-scale-msg
             app-msg
             apply-cond
             apply-id
             apply-id-list
             apply-infos
             apply-name
             apply-time
             applys
             archiev-info
             archiev-infos
             archives
             arena-battle-record
             arena-check-battle-req
             arena-check-battle-res
             arena-info
             arena-progress-reward-info
             arena-puzzle-check-req
             arena-puzzle-check-res
             arena-puzzle-exchange-acc-req
             arena-puzzle-exchange-acc-res
             arena-puzzle-exchange-req
             arena-puzzle-exchange-res
             arena-puzzle-provide-req
             arena-puzzle-provide-res
             arena-puzzle-put-req
             arena-puzzle-put-res
             arena-puzzle-reward-req
             arena-puzzle1
             arena-puzzle2
             arena-puzzle3
             arena-puzzle4
             arena-puzzle5
             arena-puzzle6
             arena-puzzle7
             arena-puzzle8
             arena-puzzle9
             arena-robot-cfg-id
             arena-type
             arg-list
             att-id
             attack
             attack-formations
             attack-head
             attack-id
             attack-lev
             attack-name
             attack-num
             attack-num-refresh
             attack-score
             attack-score-change
             attack-team
             attack-time
             attacker-formation
             attention
             attention-cancel
             auto
             auto-buy-config-dic
             auto-buy-dic
             auto-convert
             auto-dismiss
             bag-info
             ban-camp-buff
             ban-flag
             ban-msg
             ban-time
             ban-type
             banner
             base-info
             batch
             battle-equip
             battle-filter
             battle-formation-vo
             battle-group
             battle-hero
             battle-hero-msg
             battle-history
             battle-horse
             battle-info
             battle-info-item-dict
             battle-info-item-vo
             battle-info-items
             battle-info-vo
             battle-key
             battle-manual
             battle-num
             battle-nums
             battle-pet
             battle-result
             battle-team
             battle-valid
             be-black-list
             be-defener
             be-quick-attack
             be-win
             beast-boss-battle-score
             beast-id
             beast-task-info
             begin-time
             begined-selectable-flower-guide-group-list
             bg
             big-map-boss-buff-list
             big-map-coin
             big-reward
             black-list
             block-flag
             block-id
             block-msg
             block-time
             block-type
             blood
             blood-arr
             bloods
             bna
             bonfire-coin
             bonfire-coin2
             boss
             boss-cfg-id
             boss-current-hp
             boss-id
             boss-info
             boss-leader-board-item
             boss-msg
             boss-score
             boss-type
             bosss
             break-down-item
             buff-id
             buff-list
             buffs
             build-score
             buy-infos
             buy-item-req
             buy-item-res
             buy-num
             buy-nums
             buy-play-num
             buy-time
             buy-times
             buy-today-num
             c2gs-data
             c2gs-tpl
             c2is-data
             c2is-tpl
             cal-current-power
             cal-fight-result
             cal-garden-build
             cal-hero
             cal-horse
             cal-pet
             cal-pet-entries
             cal-pet-equip
             cal-pet-soul-item
             cal-service-config
             cal-service-record
             cal-tag
             caller-id
             calpetentries
             calpetsouls
             camp
             camp-against
             camp-against-msg
             camp-id
             campfire-meal
             campfire-wood
             can-buy-num
             can-get-today
             can-impeach
             can-receive-additional-reward
             can-receive-daily-reward
             can-use-num
             cancel-attention-msg
             cancel-moving-speed-scale-msg
             cancel-msg
             cancel-order-req
             cancel-order-res
             candidates
             cap
             caps
             card-id-list
             card-list-list
             card-type
             card-wish
             casting-info
             casting-num
             cfg
             cfg-id
             cfg-tag
             challenge-season-num
             challenge-stage-num
             challenge-time
             challenge-times
             challenge-today-num
             challenge-total-num
             challenge-unfree-times
             challenged
             change-infos
             change-msg
             change-station
             change-tasks
             channel
             chapter
             char-attributes
             char-id
             char-model-dir
             char-msg
             char-type
             charge-id
             charge-info
             charge-infos
             charge-num
             chat-forbidden-dict
             chat-last-close-time
             chest
             chest-help-times
             chest-id
             chest-item
             chests
             choosed
             choosed-hero-id
             circle-week
             clear-scene-msg
             client-ver
             code
             collect-num
             collect-start-time
             comb-num
             comb-type
             condition
             condition-value
             config-id
             consu
             consume-id
             consume-table
             content
             contribute
             cooling-end-at
             coordinate
             copies
             copy-detail
             copy-id
             copy-info
             copy-refresh
             copy-skills
             copy-summary-list
             core
             count
             create-index
             create-order-req
             create-order-res
             create-time
             create-times
             creator
             creator-id
             crystal-coin
             crystal-level
             crystal-slot
             crystal-stage
             cs-leader-board-item
             cur-bloods
             cur-select-buff
             cur-task-num
             curbloods
             cure-value
             curr-garden-focus-x
             curr-garden-focus-z
             curr-station
             current-choosed-hero
             current-entry
             current-level
             current-mvp
             cycle
             daily-first-draw
             daily-info
             daily-point
             damage-reward
             damage-value
             data
             data-id
             data-ids
             day
             day-active
             day-active-rewards
             day-archives
             day-idx
             day-index
             day-refresh-time
             day-reward-fetch
             day-tasks
             day-tasks-refresh-time
             dead-line
             declar
             defence-num
             defend-head
             defend-id
             defend-is-robot
             defend-lev
             defend-name
             defend-robot-cfg-id
             defend-score
             defend-score-change
             defender-team
             del-items
             del-list
             del-task-list
             del-tasks
             delay-time
             delete-hero-ids
             delete-item-id-list
             delete-tasks
             detail
             devil-point
             dia-buy-gold
             diamond
             diamond-buy
             diamond-fresh-num
             diamond-use-count
             dice
             discount
             double-point
             draw-card-select-type
             draw-count
             draw-score
             draw-type
             dst
             dst-id
             dst-index
             duration
             elder1
             elder2
             elder3
             emp-lev
             empty
             enable-fight-suppress
             end
             end-time
             entrance
             entries
             entry
             entry-group
             entry-item-1
             entry-item-2
             entry-item-3
             eqp-id
             eqp-index
             eqp-index1
             eqp-index2
             eqp-index3
             eqp-index4
             eqp-index5
             eqp-index6
             eqp1
             eqp2
             eqp3
             eqp4
             eqp5
             eqp6
             equip
             equip-cfgid
             equip-id
             equip-index
             equip-update-info
             equips
             equp-index
             equp1-index
             equp2-index
             es-id
             euler
             event
             event-type
             event-type-id
             exchange-id
             exp
             explore-day-tasks-refresh-time
             explore-leader-board-item
             explore-level
             ext-gif
             ext-gif-info
             fetch
             fetch-num
             fetch-type
             fight-calculator
             fight-char-attribute
             fight-char-msg
             fight-char-msg-core
             fight-char-msg-transform
             fight-frame-time
             fight-hero-info
             fight-hero-list
             fight-init-data
             fight-key
             fight-monster-info
             fight-msg
             fight-point
             fight-result
             fight-score
             fight-time
             fight-total-data
             fighting-boss-players
             fill-boss
             fill-guild-boss
             fill-loop-boss
             fill-maze-helper
             fill-monster-group
             fill-pvp-robot
             fill-ruin
             fill-theme-boss
             fill-tower
             filter
             final-scene
             finish
             finish-buff
             finish-create
             finish-time
             finished-flower-guide
             finished-selectable-flower-guide-list
             fire-party-id
             fire-party-player
             first-charge-reward
             first-cleaned
             fit-type
             flag-apply-info
             flag-base-info
             flag-boss
             flag-casting-info
             flag-copy
             flag-has-open
             flag-member
             flag-not-empty
             flag-opt-log
             flag-type
             float
             float-item-id-counter
             float-itmes
             float-list
             force
             format
             formation
             formations
             forward-euler-msg
             forward-msg
             fp
             fp-daily-item
             frame-id
             frame-time
             free-search-times
             free-soul
             free-soul2
             free-times
             fresh-level
             fresh-num
             fresh-time
             friend-apply-info
             friend-apply-info-list
             friend-del-time-dic
             friend-gif-info
             friend-user-id
             friends
             friendship-num-tody
             friendship-point
             from
             from-server
             fs-boss
             fs-boss-day-tasks-refresh-time
             fs-boss-stronghold-event
             fs-boss-stronghold-event-int-to-keyword
             fs-boss-stronghold-event-keyword-to-int
             fs-boss-week-tasks-refresh-time
             fs-chest
             fs-chest.reward-levels
             fs-chest.reward-levels-int-to-keyword
             fs-chest.reward-levels-keyword-to-int
             fs-day-refresh-time
             fs-day-tasks
             fs-monster
             fs-monster.difficulty-levels
             fs-monster.difficulty-levels-int-to-keyword
             fs-monster.difficulty-levels-keyword-to-int
             fs-player
             fs-player-self
             fs-room-info
             fs-week-refresh-time
             fs-week-tasks
             func-tasks
             fund-id
             fund-info
             fund-list
             game
             game-active-code-req
             game-activity-entrence-req
             game-activity-entrence-res
             game-activity-theme-boss-battle-req
             game-activity-theme-boss-battle-res
             game-activity-theme-boss-info-req
             game-activity-theme-boss-info-res
             game-activity-theme-boss-task-req
             game-activity-theme-boss-task-res
             game-activity-theme-boss-task-reward-req
             game-activity-theme-boss-task-reward-res
             game-activity-theme-elite-pack-buy-res
             game-activity-theme-elite-pack-req
             game-activity-theme-elite-pack-res
             game-activity-theme-info-req
             game-activity-theme-info-res
             game-activity-theme-pack-buy-res
             game-activity-theme-pack-req
             game-activity-theme-pack-res
             game-activity-theme-play-quest-req
             game-activity-theme-play-quest-res
             game-activity-theme-play-quest-reward-req
             game-activity-theme-play-quest-reward-res
             game-activity-theme-prize-info-req
             game-activity-theme-prize-info-res
             game-activity-theme-prize-lottery-req
             game-activity-theme-prize-lottery-res
             game-activity-theme-task-mdy-res
             game-activity-theme7-day-reward-req
             game-activity-theme7-day-reward-res
             game-activity-theme7-day-task-list-req
             game-activity-theme7-day-task-list-res
             game-add-friend-req
             game-add-friend-res
             game-add-pet-res
             game-arch-detail-req
             game-arch-detail-res
             game-arch-list-req
             game-arch-list-res
             game-arch-reward-change-res
             game-arch-reward-list-req
             game-arch-reward-list-res
             game-arch-reward-req
             game-arch-reward-res
             game-arena-battle-result-req
             game-arena-battle-start-req
             game-arena-battle-start-res
             game-arena-buy-req
             game-arena-buy-res
             game-arena-challenge-list-req
             game-arena-challenge-list-res
             game-arena-info-req
             game-arena-info-res
             game-arena-list-req
             game-arena-list-res
             game-arena-open-res
             game-arena-progress-reward-req
             game-arena-progress-reward-res
             game-arena-rank-change-res
             game-arena-record-req
             game-arena-record-res
             game-batch-buy-req
             game-batch-hero-rank-up-req
             game-batch-hero-rank-up-res
             game-battle-team-req-req
             game-battle-team-res
             game-black-list-req
             game-black-list-res
             game-break-down-items-req
             game-break-down-items-res
             game-buy-hero-bag-grid-req
             game-buy-hero-bag-grid-res
             game-buy-level-time-gif-req
             game-buy-level-time-gif-res
             game-buy-req
             game-create-fire-party-req
             game-create-fire-party-res
             game-create-guild-req
             game-create-guild-res
             game-credit-check-redine-req
             game-credit-check-redine-res
             game-credit-info-req
             game-credit-info-res
             game-credit-manual-login-req
             game-credit-manual-login-res
             game-credit-online-dur-add-score-req
             game-credit-online-dur-add-score-res
             game-credit-sub-score-req
             game-credit-sub-score-res
             game-crystal-advance-req
             game-crystal-advance-res
             game-crystal-level-up-req
             game-crystal-level-up-res
             game-crystal-list-req
             game-crystal-list-res
             game-crystal-pop-req
             game-crystal-push-req
             game-cs-user-info-req
             game-cs-user-info-res
             game-del-friend-req
             game-del-friend-res
             game-dia-buy-gold-receive-req
             game-dia-buy-gold-receive-res
             game-dia-buy-gold-req
             game-dia-buy-gold-res
             game-do-exchange-req
             game-do-exchange-res
             game-do-pray-req
             game-do-pray-res
             game-draw-buy-pool-req
             game-draw-buy-pool-res
             game-end-garden-level-req
             game-end-garden-level-res
             game-equip-rank-up-req
             game-equip-rank-up-res
             game-equip-up-lev-req
             game-equip-up-lev-res
             game-error-report-res
             game-explore-buy-dice-req
             game-explore-buy-dice-res
             game-explore-chest-helped-res
             game-explore-chest-receive-req
             game-explore-chest-receive-res
             game-explore-control-dice-req
             game-explore-dice-req
             game-explore-help-chest-info-req
             game-explore-help-chest-info-res
             game-explore-help-chest-req
             game-explore-help-chest-res
             game-explore-help-seller-info-req
             game-explore-help-seller-info-res
             game-explore-help-seller-req
             game-explore-help-seller-res
             game-explore-level-up-res
             game-explore-mysterious-shop-buy-req
             game-explore-mysterious-shop-buy-res
             game-explore-next-map-req
             game-explore-next-map-res
             game-explore-open-chest-req
             game-explore-open-chest-res
             game-explore-pack-buy-res
             game-explore-quick-dice-res
             game-explore-random-event-req
             game-explore-random-event-res
             game-explore-req
             game-explore-res
             game-explore-roll-dice-res
             game-explore-season-info-req
             game-explore-season-info-res
             game-explore-seller-and-chest-req
             game-explore-seller-and-chest-res
             game-explore-seller-buy-req
             game-explore-seller-buy-res
             game-explore-seller-helped-res
             game-ext-gif-buy-res
             game-ext-gif-choose-req
             game-ext-gif-choose-res
             game-ext-gif-info-req
             game-ext-gif-info-res
             game-finish-garden-level-req
             game-finish-garden-level-res
             game-finish-rewar-task-req
             game-finish-scene-block-req
             game-finish-task-req
             game-finish-task-res
             game-fire-party-add-player-res
             game-fire-party-buy-reward-time-req
             game-fire-party-buy-reward-time-res
             game-fire-party-change-res
             game-fire-party-hall-info-req
             game-fire-party-hall-info-res
             game-fire-party-help-newly-req
             game-fire-party-help-newly-res
             game-fire-party-help-req
             game-fire-party-help-res
             game-fire-party-info-req
             game-fire-party-info-res
             game-fire-party-self-req
             game-fire-party-self-res
             game-fire-party-self-rooms-req
             game-fire-party-self-rooms-res
             game-fire-party-self-rooms-res.join-at-entry
             game-first-charge-reward-info-req
             game-first-charge-reward-info-res
             game-first-charge-reward-req
             game-first-charge-reward-res
             game-free-hero-reset-req
             game-free-hero-reset-res
             game-friend-accept-gif-req
             game-friend-accept-gif-res
             game-friend-apply-handle-req
             game-friend-apply-handle-res
             game-friend-find-req
             game-friend-find-res
             game-friend-list-req
             game-friend-list-res
             game-friend-present-gif-req
             game-friend-present-gif-res
             game-friends-recommend-req
             game-friends-recommend-res
             game-fs-boss-battle-req
             game-fs-boss-battle-res
             game-fs-boss-change-handup-pos-res
             game-fs-boss-change-hangup-pos-req
             game-fs-boss-change-hero-req
             game-fs-boss-change-hero-res
             game-fs-boss-damage-reward-req
             game-fs-boss-damage-reward-res
             game-fs-boss-info-req
             game-fs-boss-info-res
             game-fs-boss-join-room-req
             game-fs-boss-join-room-res
             game-fs-boss-leader-board-req
             game-fs-boss-leader-board-res
             game-fs-boss-leave-room-req
             game-fs-boss-leave-room-res
             game-fs-boss-quick-attack-req
             game-fs-boss-quick-attack-res
             game-fs-boss-receive-chest-req
             game-fs-boss-receive-chest-res
             game-fs-boss-receive-handup-res
             game-fs-boss-receive-hangup-req
             game-fs-boss-refresh-chest-req
             game-fs-boss-refresh-chest-res
             game-fs-boss-refresh-monster-req
             game-fs-boss-refresh-monster-res
             game-fs-boss-start-battle-req
             game-fs-boss-start-battle-res
             game-fs-boss-stronghold-change-res
             game-fs-boss-task-change-res
             game-fs-boss-task-reward-req
             game-fs-boss-task-reward-res
             game-fs-boss-tasks-req
             game-fs-boss-tasks-res
             game-fund-buy-res
             game-fund-info-req
             game-fund-info-res
             game-game-hero-change-res
             game-garden-active-grid-group-req
             game-garden-add-store-grid-req
             game-garden-add-store-grid-res
             game-garden-add-task-coin-req
             game-garden-add2-store-req
             game-garden-build-add2-store-req
             game-garden-buy-tili-req
             game-garden-combine-req
             game-garden-combine-res
             game-garden-day-reward-req
             game-garden-exchange-req
             game-garden-exchange-res
             game-garden-get-change-res
             game-garden-get-pet-res
             game-garden-grid-change-res
             game-garden-guo-acce-req
             game-garden-guo-cancel-req
             game-garden-guo-create-req
             game-garden-info-req
             game-garden-info-res
             game-garden-info-res.gifinfo-entry
             game-garden-item-change-res
             game-garden-monster-buy-req
             game-garden-monster-buy-res
             game-garden-move-req
             game-garden-move-res
             game-garden-npc-task-list-req
             game-garden-npc-task-list-res
             game-garden-on-hook-items-req
             game-garden-on-hook-items-res
             game-garden-pet-change-res
             game-garden-pet-collect-req
             game-garden-pet-combine-req
             game-garden-pet-combine-res
             game-garden-pet-leve-up-req
             game-garden-pet-leve-up-res
             game-garden-pet-list-req
             game-garden-pet-list-res
             game-garden-pet-train-req
             game-garden-pos-change-req
             game-garden-receive-on-hook-reward-req
             game-garden-receive-on-hook-reward-res
             game-garden-share-task-list-req
             game-garden-share-task-list-res
             game-garden-ship-change-res
             game-garden-ship-req
             game-garden-store-acc-req
             game-garden-task-change-res
             game-garden-task-hz-req
             game-garden-task-hz-res
             game-garden-task-list-req
             game-garden-task-list-res
             game-garden-task-num-buy-req
             game-garden-task-read-req
             game-garden-task-share-req
             game-garden-tool-collect-req
             game-garden-tool-exchange-collect-req
             game-garden-train-export-req
             game-garden-train-reward-req
             game-garden-train-upgrade-req
             game-garden-unfloat-req
             game-garden-upgrade-req
             game-garden-use-item-req
             game-get-card-req
             game-get-card-res
             game-get-card-reward-req
             game-get-card-reward-res
             game-get-cardwish-req
             game-get-cardwish-res
             game-get-mount-info-req
             game-get-mount-info-res
             game-get-plays-req
             game-get-plays-res
             game-get-red-pack-res
             game-get-top-heros-req
             game-get-top-heros-res
             game-gm-req
             game-gm-res
             game-gmt-ban-res
             game-gmt-block-res
             game-gmt-c2-is-reward-req
             game-gmt-ggl-reward-req
             game-gmt-i2-is-reward-req
             game-gmt-kick-res
             game-gmt-r2-is-reward-req
             game-gmt-schedule-data-change-res
             game-gmt-schedule-list-req
             game-gmt-schedule-list-res
             game-gmt-task-reward-req
             game-gmt-un-block-res
             game-green-hand-gift-info-req
             game-green-hand-gift-info-res
             game-guild-apply-list-req
             game-guild-apply-list-res
             game-guild-apply-reply-req
             game-guild-apply-reply-res
             game-guild-apply-req
             game-guild-apply-res
             game-guild-boss-attack-req
             game-guild-boss-attack-res
             game-guild-boss-challenge-num-buy-req
             game-guild-boss-challenge-num-buy-res
             game-guild-boss-inspire-buy-req
             game-guild-boss-inspire-buy-res
             game-guild-boss-quick-attack-req
             game-guild-boss-rank-req
             game-guild-boss-rank-res
             game-guild-boss-record-req
             game-guild-boss-record-res
             game-guild-casting-buy-req
             game-guild-casting-buy-res
             game-guild-casting-info-req
             game-guild-casting-info-res
             game-guild-casting-req
             game-guild-casting-res
             game-guild-casting-reward-req
             game-guild-casting-reward-res
             game-guild-copy-battle-result-req
             game-guild-copy-battle-start-req
             game-guild-copy-battle-start-res
             game-guild-copy-buy-num-req
             game-guild-copy-change-res
             game-guild-copy-guard-change-res
             game-guild-copy-mvp-reward-req
             game-guild-copy-pass-reward-req
             game-guild-copy-reward-req
             game-guild-copy-skill-change-res
             game-guild-copy-skill-upgrade-req
             game-guild-detail-req
             game-guild-detail-res
             game-guild-dissolve-req
             game-guild-dissolve-res
             game-guild-guard-detail-req
             game-guild-guard-detail-res
             game-guild-helper-hero-list-req
             game-guild-helper-hero-list-res
             game-guild-helper-list-req
             game-guild-helper-list-res
             game-guild-helper-select-req
             game-guild-helper-select-res
             game-guild-impeach-change-res
             game-guild-impeach-req
             game-guild-impeach-res
             game-guild-impeach-result-res
             game-guild-level-leader-board-req
             game-guild-level-leader-board-res
             game-guild-list-req
             game-guild-list-res
             game-guild-quit-req
             game-guild-quit-res
             game-guild-remove-member-req
             game-guild-remove-member-res
             game-guild-resource-upadte-res
             game-guild-setting-req
             game-guild-setting-res
             game-guild-signed-info-req
             game-guild-signed-info-res
             game-guild-signed-req
             game-guild-signed-res
             game-guild-signed-reward-req
             game-guild-signed-reward-res
             game-guild-title-set-req
             game-guild-title-set-res
             game-guild-upgrade-req
             game-guild-upgrade-res
             game-helper-change-res
             game-helper-drop-req
             game-helper-history-req
             game-helper-history-res
             game-helper-list-req
             game-helper-list-res
             game-helper-put-req
             game-helper-reward-req
             game-hero-auto-dismiss-req
             game-hero-auto-dismiss-res
             game-hero-back-req
             game-hero-conscription-choose-hero-req
             game-hero-conscription-choose-hero-res
             game-hero-conscription-draw-req
             game-hero-conscription-draw-res
             game-hero-conscription-info-req
             game-hero-conscription-info-res
             game-hero-detail-list-req
             game-hero-detail-list-res
             game-hero-detail-req
             game-hero-detail-res
             game-hero-dismiss-req
             game-hero-dismiss-res
             game-hero-dismiss-reward-req
             game-hero-dismiss-reward-res
             game-hero-exchage-equp-req
             game-hero-list-req
             game-hero-list-res
             game-hero-rank-up-req
             game-hero-rank-up-res
             game-hero-req
             game-hero-res
             game-hero-reset-req
             game-hero-star-info-req
             game-hero-star-info-res
             game-hero-star-select-req
             game-hero-star-select-res
             game-hero-up-lev-req
             game-hero-update-res
             game-heroadd-equp-req
             game-hook-change-req
             game-hook-change-res
             game-hook-reward-req
             game-hook-reward-res
             game-hook-reward-show-req
             game-horse-change-res
             game-horse-draw-info-req
             game-horse-draw-info-res
             game-horse-draw-req
             game-horse-draw-res
             game-horse-dress-req
             game-horse-dress-res
             game-horse-exchange-req
             game-horse-exchange-res
             game-horse-levup-req
             game-horse-levup-res
             game-horse-list-req
             game-horse-list-res
             game-horse-lock-item-req
             game-horse-lock-item-res
             game-horse-reset-req
             game-horse-reset-res
             game-horse-slot-levup-req
             game-horse-slot-levup-res
             game-horse-v2-levup-req
             game-horse-v2-levup-res
             game-horse-v2-stage-up-req
             game-horse-v2-stage-up-res
             game-island-battle-result-req
             game-island-buy-play-num-req
             game-island-collection-add-power-req
             game-island-collection-level-up-req
             game-island-collection-req
             game-island-collection-res
             game-island-collection-reward-req
             game-island-get-reward-req
             game-island-get-score-reward-req
             game-island-get-task-reward-req
             game-island-info-change-res
             game-island-kid-reward-req
             game-island-list-req
             game-island-list-res
             game-island-offline-info-req
             game-island-offline-info-res
             game-island-pack-buy-res
             game-island-pack-req
             game-island-pack-res
             game-island-rank-list-req
             game-island-rank-list-res
             game-island-record-battle-info-req
             game-island-record-battle-info-res
             game-island-record-req
             game-island-record-res
             game-island-search-req
             game-island-search-res
             game-island-start-battle-req
             game-island-start-battle-res
             game-island-take-req
             game-island-take-res
             game-item-req
             game-item-res
             game-item-upadte-res
             game-join-fire-party-newly-req
             game-join-fire-party-newly-res
             game-join-fire-party-req
             game-join-fire-party-res
             game-lamp-change-res
             game-lamp-list-req
             game-lamp-list-res
             game-leader-board-fire-party-req
             game-leader-board-fire-party-res
             game-leader-board-first-req
             game-leader-board-first-res
             game-leader-board-help-req
             game-leader-board-help-res
             game-leave-fire-party-hall-req
             game-leave-fire-party-hall-res
             game-leave-fire-party-room-hall-req
             game-leave-fire-party-room-hall-res
             game-level-time-gif-req
             game-level-time-gif-res
             game-log-out-req
             game-log-out-res
             game-login-req
             game-login-res
             game-loop-activity-info-req
             game-loop-activity-info-res
             game-loop-activity-pack-batch-req
             game-loop-activity-pack-batch-res
             game-loop-activity-pack-buy-res
             game-loop-activity-pack-req
             game-loop-activity-pack-res
             game-loop-activity-painter-info-req
             game-loop-activity-painter-info-res
             game-loop-activity-painter-puzzle-req
             game-loop-activity-painter-puzzle-res
             game-loop-blacksmith-req
             game-loop-blacksmith-res
             game-loop-boss-battle-req
             game-loop-boss-battle-res
             game-loop-boss-info-req
             game-loop-boss-info-res
             game-loop-buy-boss-battle-times-req
             game-loop-buy-boss-battle-times-res
             game-loop-exchange-info-req
             game-loop-exchange-info-res
             game-loop-garden-choose-reward-req
             game-loop-garden-choose-reward-res
             game-loop-garden-info-req
             game-loop-garden-info-res
             game-loop-garden-req
             game-loop-garden-res
             game-loop-seven-day-gift-info-req
             game-loop-seven-day-gift-info-res
             game-loop-seven-day-gift-req
             game-loop-seven-day-gift-res
             game-loop-shop-buy-req
             game-loop-shop-buy-res
             game-loop-shop-req
             game-loop-shop-res
             game-loop-sign-info-req
             game-loop-sign-info-res
             game-loop-sign-req
             game-loop-sign-res
             game-loop-start-boss-req
             game-loop-start-boss-res
             game-loop-task-batch-req
             game-loop-task-batch-res
             game-loop-task-buy-reward-req
             game-loop-task-buy-reward-res
             game-loop-task-mdy-res
             game-loop-task-req
             game-loop-task-res
             game-loop-task-reward-req
             game-loop-task-reward-res
             game-lucky-gashapon-draw-req
             game-lucky-gashapon-draw-res
             game-lucky-gashapon-info-req
             game-lucky-gashapon-info-res
             game-lucky-gashapon-progess-reward-req
             game-lucky-gashapon-progess-reward-res
             game-mail-del-all-readed-req
             game-mail-del-all-readed-res
             game-mail-del-req
             game-mail-del-res
             game-mail-fetch-all-req
             game-mail-fetch-all-res
             game-mail-fetch-req
             game-mail-fetch-res
             game-mail-list-req
             game-mail-list-res
             game-mail-read-req
             game-mail-read-res
             game-mail-sys-send-req
             game-manual-diamond-reward-req
             game-manual-list-req
             game-manual-list-res
             game-manual-upgrade-req
             game-manual-upgrade-res
             game-maze-attack-result-req
             game-maze-buy-req
             game-maze-info-req
             game-maze-info-res
             game-maze-load-req
             game-maze-load-res
             game-maze-map-select-req
             game-maze-pass-req
             game-maze-pass-reward-req
             game-maze-revive-req
             game-maze-select-buff-req
             game-maze-select-helper-req
             game-maze-stage-res
             game-maze-store-req
             game-maze-store-res
             game-maze-trail-reward-req
             game-maze-trail-select-req
             game-maze-treat-req
             game-message-show-res
             game-month-card-buy-res
             game-month-card-info-req
             game-month-card-info-res
             game-month-card-reward-req
             game-month-card-reward-res
             game-month-re-sign-req
             game-month-re-sign-res
             game-month-recharge-req
             game-month-recharge-res
             game-month-sign-info-req
             game-month-sign-info-res
             game-month-sign-req
             game-month-sign-res
             game-month-sign-reward-req
             game-month-sign-reward-res
             game-mount-add-equip-req
             game-mount-batch-add-equip-req
             game-mount-equip-combind-req
             game-mount-levup-req
             game-new-level-time-gif-res
             game-new-mail-res
             game-new-red-pack-res
             game-online-req
             game-online-res
             game-online-reward-req
             game-open-red-pack-req
             game-open-red-pack-res
             game-open-slot-req
             game-open-slot-res
             game-optional-hero-info-req
             game-optional-hero-info-res
             game-optional-hero-lottery-req
             game-optional-hero-lottery-res
             game-optional-hero-reward-req
             game-optional-hero-reward-res
             game-permanent-pack-purchase-res
             game-permanent-pack-purchased-info-req
             game-permanent-pack-purchased-info-res
             game-pet-add-equip-req
             game-pet-add-equip-res
             game-pet-add-req
             game-pet-equip-combind-req
             game-pet-equip-combind-res
             game-pet-info-req
             game-pet-info-res
             game-pet-level-up-req
             game-pet-level-up-res
             game-pet-refine-choose-req
             game-pet-refine-choose-res
             game-pet-refine-req
             game-pet-refine-res
             game-pet-remove-req
             game-pet-star-entry-req
             game-pet-star-entry-res
             game-pet-star-up-req
             game-pet-star-up-res
             game-pet-team-skills-req
             game-pet-team-skills-res
             game-pet-v2-activate-req
             game-pet-v2-activate-res
             game-pet-v2-add-equip-req
             game-pet-v2-add-equip-res
             game-pet-v2-add-req
             game-pet-v2-add-res
             game-pet-v2-change-res
             game-pet-v2-info-req
             game-pet-v2-info-res
             game-pet-v2-level-up-req
             game-pet-v2-level-up-res
             game-pet-v2-refine-choose-req
             game-pet-v2-refine-choose-res
             game-pet-v2-refine-req
             game-pet-v2-refine-res
             game-pet-v2-remove-req
             game-pet-v2-remove-res
             game-pet-v2-soul-level-up-req
             game-pet-v2-soul-level-up-res
             game-pet-v2-star-entry-req
             game-pet-v2-star-entry-res
             game-ping-req
             game-pray-info-req
             game-pray-info-res
             game-pray-pool-req
             game-pray-pool-res
             game-pray-reward-req
             game-pray-reward-res
             game-query-friend-heros-req
             game-query-friend-heros-res
             game-quick-hook-reward-show-req
             game-quik-hook-reward-req
             game-quik-hook-reward-res
             game-rank-list-pk-base-info-req
             game-rank-list-pk-base-info-res
             game-rank-list-pk-req
             game-rank-list-pk-res
             game-rank-list-req
             game-rank-list-res
             game-recharge-req
             game-recharge-res
             game-red-pack-detail-req
             game-red-pack-detail-res
             game-red-pack-impl-req
             game-red-pack-list-req
             game-red-pack-list-res
             game-red-pack-share-req
             game-red-pack-share-res
             game-red-point-chagne-res
             game-red-point-clean-req
             game-red-point-req
             game-red-point-res
             game-rename-req
             game-rename-res
             game-resource-upadte-res
             game-rewar-task-change-res
             game-rewar-task-refresh-req
             game-rewar-task-req
             game-rewar-task-res
             game-reward-res
             game-reward-show-res
             game-roulette-draw-req
             game-roulette-draw-res
             game-roulette-get-reward-req
             game-roulette-get-reward-res
             game-roulette-info-req
             game-roulette-info-res
             game-roulette-record-res
             game-roulette-refresh-req
             game-roulette-refresh-res
             game-save-user-data-req
             game-scene-block-req
             game-scene-block-res
             game-send-tie-req
             game-send-tie-res
             game-server-info-req
             game-server-info-res
             game-seven-days-pack-buy-res
             game-seven-days-pack-req
             game-seven-days-pack-res
             game-ship-buy-req
             game-ship-buy-res
             game-ship-buy-reward-req
             game-ship-buy-reward-res
             game-shop-config-req
             game-shop-config-res
             game-shop-fresh-req
             game-shop-req
             game-shop-res
             game-sign-req
             game-sign-res
             game-sign-reward-req
             game-sign-reward-res
             game-slot-change-res
             game-slot-time-clean-req
             game-soul-dress-req
             game-soul-dress-res
             game-special-pack-buy-res
             game-special-pack-info-req
             game-special-pack-info-res
             game-special-pack-set-req
             game-special-pack-set-res
             game-start-activity-theme-boss-req
             game-start-activity-theme-boss-res
             game-start-garden-level-req
             game-start-garden-level-res
             game-start-guild-boss-req
             game-start-guild-boss-res
             game-start-maze-req
             game-start-maze-res
             game-start-rewar-task-req
             game-start-scene-block-req
             game-start-scene-block-res
             game-start-tower-req
             game-start-tower-res
             game-sub-task-list-req
             game-sub-task-list-res
             game-swing-add-req
             game-swing-add-res
             game-swing-create-res
             game-swing-levup-req
             game-swing-levup-res
             game-swing-list-req
             game-swing-list-res
             game-swing-remove-req
             game-swing-remove-res
             game-sys-open-res
             game-task-active-reward-req
             game-task-active-reward-res
             game-task-list-req
             game-task-list-res
             game-task-mdy-res
             game-task-req
             game-task-res
             game-task-reward-req
             game-team-level-upgrade-res
             game-teamp-pos-change-req
             game-teamp-pos-change-res
             game-tie-req
             game-tie-res
             game-tower-battle-req
             game-tower-battle-res
             game-tower-info-req
             game-tower-info-res
             game-tower-record-req
             game-tower-record-res
             game-tower-reward-req
             game-tower-reward-res
             game-tower-sd-buy-req
             game-tower-sd-buy-res
             game-tower-sd-req
             game-tower-sd-res
             game-un-black-list-req
             game-un-black-list-res
             game-update-cardwish-req
             game-update-star-hero-req
             game-update-star-hero-res
             game-update-task-res
             game-use-item-req
             game-user-info-change-req
             game-user-info-change-res
             game-user-title-daily-reward-req
             game-user-title-daily-reward-res
             game-user-title-level-up-req
             game-user-title-level-up-res
             game-user-title-task-change-res
             game-user-title-task-reward-req
             game-user-title-task-reward-res
             game-user-title-tasks-req
             game-user-title-tasks-res
             game-usr-card-info-req
             game-usr-card-info-res
             game-vip-gif-list-req
             game-vip-gif-list-res
             game-vip-gif-req
             game-vip-level-upgrade-res
             game-wait-join-fire-party-req
             game-wait-join-fire-party-res
             game-weekend-party-gift-receive-req
             game-weekend-party-gift-receive-res
             game-weekend-party-req
             game-weekend-party-res
             game-world-boss-battle-req
             game-world-boss-battle-res
             game-world-boss-battle-start-req
             game-world-boss-battle-start-res
             game-world-boss-buy-req
             game-world-boss-buy-res
             game-world-boss-kill-reward-req
             game-world-boss-rank-list-req
             game-world-boss-rank-list-res
             game-world-boss-req
             game-world-boss-res
             game-xs-buy-res
             game-xs-finish-req
             game-xs-finish-res
             game-xs-list-req
             game-xs-list-res
             game-xs-reward-get-req
             game-xs-reward-get-res
             game-zan-req
             game-zan-res
             game-zans-req
             game-zans-res
             game-zero-go-buy-req
             game-zero-go-info-req
             game-zero-go-info-res
             game-zero-go-reward-req
             game-zero-go-reward-res
             game7-day-info-req
             game7-day-info-res
             game7-day-reward-get-req
             game7-day-reward-get-res
             garde
             garden-battle-num
             garden-beast-fee-req
             garden-beast-get-req
             garden-beast-task-change-res
             garden-beast-task-finish-req
             garden-beast-task-is-finish-req
             garden-beast-task-is-finish-res
             garden-beast-task-list-req
             garden-beast-task-list-res
             garden-beast-task-push-req
             garden-build
             garden-building-list
             garden-challenge-fast
             garden-collect-stat
             garden-enter-count
             garden-finish-npc-task-req
             garden-grid
             garden-item
             garden-item-list
             garden-level
             garden-menual
             garden-menual-active-req
             garden-menual-change-res
             garden-monster-index
             garden-monster-seq
             garden-npc-task
             garden-npc-task-bag-change-res
             garden-npc-task-bag-req
             garden-npc-task-bag-res
             garden-npc-task-bag-take-req
             garden-npc-task-change-res
             garden-npc-task-day-reward-req
             garden-npc-task-day-reward-res
             garden-npc-task-num-change-res
             garden-npc-task-refresh-req
             garden-package-gen-id
             garden-package-info
             garden-package-list
             garden-pet
             garden-pet-info
             garden-pet-trans-res
             garden-serial-float-item
             garden-serial-float-items
             garden-serial-item
             garden-serial-items
             garden-shop
             garden-shop1-refresh
             garden-task
             garden-task-buy-num
             garden-task-buy-num-time
             garden-task-num
             garden-task-num-time
             garden-tili
             garden-tili-max
             garden-tili-recover
             garden-tower-exp
             garden-train-info
             garden-virpet
             garden-zone-id
             gardend-add-req
             gardend-item-comb-req
             gardend-link-reward-req
             gardend-remove-req
             get
             get-apply-info-flag
             get-base-info-flag
             get-from
             get-gif-info-flag
             get-num
             get-pets
             get-reward-progress
             get-time
             get-type
             get-unfinish-order-req
             get-unfinish-order-res
             ggl-data
             ggl-tpl
             gif
             gif-id
             gif-info-list
             gif-list
             gif-num
             gifinfo
             gifs
             gifts
             gm-string
             gmt-c2gs-data
             gmt-c2gs-gif
             gmt-c2gs-item
             gmt-c2gs-tpl
             gmt-c2is-data
             gmt-c2is-tpl
             gmt-charge-reward-item
             gmt-d
             gmt-data
             gmt-ggl-data
             gmt-ggl-pool-item
             gmt-ggl-tpl
             gmt-ggl-use
             gmt-i2is-data
             gmt-i2is-item
             gmt-i2is-tpl
             gmt-r2is-data
             gmt-r2is-item
             gmt-r2is-tpl
             gmt-schedule
             gmt-t
             gmt-t2i-data
             gmt-t2i-progress
             gmt-t2i-reward
             gmt-t2i-tpl
             gmt-t2i-tpl-task
             gmt-template
             gold-coin
             gold-num
             got-relic
             green-hand-pack
             grid-num
             grid-pos
             grids
             grow-time
             guard-bloods
             guard-id
             guard-summary-list
             guide-target-record-list
             guild
             guild-active
             guild-active-valid-time
             guild-apply-cond
             guild-apply-info
             guild-base-info
             guild-boss-buff
             guild-boss-cfg-id
             guild-boss-info
             guild-boss-inspire
             guild-boss-msg
             guild-boss-record
             guild-boss-score
             guild-buff-item
             guild-buff-list
             guild-buff-msg
             guild-buffs
             guild-casting-info
             guild-casting-reward
             guild-coin
             guild-contribute
             guild-copy-formation
             guild-copy-guard-detail
             guild-copy-hurt
             guild-copy-info
             guild-copy-person-part
             guild-copy-public-part
             guild-copy-reward
             guild-copy-skill
             guild-copy-skill-score
             guild-copy-skill-score-valid-time
             guild-copy-summary
             guild-exp
             guild-guard-summary
             guild-id
             guild-id-list
             guild-join-time
             guild-lev
             guild-level-leader-board-item
             guild-limit-time
             guild-name
             guild-opt-log
             guild-resource
             guild-title
             guild-title1
             guild-title2
             guild-today-contribute
             guild-today-contribute-valid-time
             guild-today-exp
             guild-today-exp-valid-time
             guilds
             had-buy
             had-buy-num
             had-buy-xs
             had-draw
             had-get-rewards
             had-reward
             had-rewards
             had-take
             had-win
             handle-type
             hang-up
             hang-up-info
             has-click
             has-fetch
             has-mvp-reward
             has-open
             has-person-reward-num
             has-recharge
             has-reward-guards
             has-reward-mvp-guards
             has-reward-num
             has-reward-pass-guards
             has-server-reward-num
             hasdidates
             have-hero-list
             head
             head-frame
             head-url
             help
             help-item
             helped-player-ids
             helper-heros
             helper-history
             helper-history2
             helper-id
             helper-info
             helper-msg
             helpers
             hero
             hero-bag-buy-num
             hero-bag-ext-num
             hero-base-info
             hero-bloodnanger
             hero-cfg-id
             hero-change-info
             hero-config-id
             hero-conscription-reward-item
             hero-exp
             hero-gen-id
             hero-id
             hero-id-list
             hero-ids
             hero-index
             hero-info
             hero-info-list
             hero-infos
             hero-level
             hero-list
             hero-msg
             hero-pos
             hero-server-id
             hero-soul-coin
             hero-type
             hero1-id
             hero2-id
             heros
             hezuo-num
             hid
             hire-num
             hire-time
             hire-user-id
             hire-user-name
             history
             history2
             horse
             horse-coin
             horse-draw
             horse-id
             horse-list
             hp
             hp-rate
             hp-rate-list
             human-point
             hurt
             hurt-value
             hurts
             i2is-data
             i2is-tpl
             id
             id-list
             id1
             id2
             ids
             idx
             impeach-deadline
             inc-msg
             index
             info
             infos
             init-data
             init-euler-rotation
             init-hp-rate
             init-mp-rate
             init-position-x
             init-position-y
             init-power
             input
             inspire-buy-left
             inspire-times
             inspired-times
             int32-int32-dict-vo
             int32-string-dict-vo
             integral
             interval
             ip
             is-altar
             is-arena-fighted
             is-auto
             is-auto-collection-botany
             is-auto-collection-pet
             is-battle
             is-building
             is-buyed
             is-crit
             is-empty
             is-first-explore
             is-first-time
             is-fist-create
             is-float
             is-garden-first-battle
             is-garden-onbook
             is-get-ship
             is-helper
             is-lock
             is-losed
             is-maze-fast-battle
             is-maze-fast-battle-lock
             is-new
             is-open-loop-garden
             is-pet
             is-pet-train
             is-primary
             is-received
             is-robot
             is-roulette-shop
             is-sd
             is-showed-boss
             is-ten
             is-tree-house
             is-unlock
             is-unread
             island-caps
             island-evtent-cfg-id
             island-index
             island-info
             island-item-info
             island-max-score
             island-offline-info
             island-pack
             island-rank
             island-rank-level
             island-rank-player
             island-record
             island-score
             island-score-reward
             island-target-user-id
             island-task-reward
             islands
             item
             item-buy-num
             item-cfg-id1
             item-cfg-id2
             item-cfg-id3
             item-cfg-id4
             item-changes
             item-deletes
             item-id
             item-id-counter
             item-id1
             item-id2
             item-id3
             item-id4
             item-infos
             item-list
             item-name
             items
             itmes
             join-at
             join-time
             joined-ids
             joined-time
             joined-time-item
             just-spring-count
             key
             kick-type
             kill
             kill-all-msg
             kv-int-int
             laby-dict-lev-dict
             lamp-info
             lamps
             last-boss-hurt
             last-hook-time
             last-hurt
             last-stronghold-id
             last-win
             layer-id
             layer-idx
             layer-index
             layers
             lead-id
             leader-board
             leave-time
             leavel-time
             left-buy-times
             left-challenge-times
             left-inspire-times
             left-num
             lev
             lev-bak
             lev-id
             lev-load
             lev-time
             level
             level-num
             level-switch-record-dict
             level-time-gif
             level-up
             level1
             level2
             life-crystal
             life-tree-resouce
             like-name
             limit-camp-suffer-dmg-able
             limit-time
             list
             list-type
             load-lev
             lock
             lock-idx
             lock-props-hp-while-resulted
             lock-time
             login-time
             logout-time
             logs
             loop-activities
             loop-activity-batch-pack
             loop-activity-batch-task
             loop-activity-item
             loop-boss-cfg-id
             loop-boss-msg
             loop-dewdrop
             loop-exchange-item
             loop-flour
             loop-garden-rh
             loop-iron
             loop-melting
             loop-pack
             loop-packs
             loop-pigment
             loop-potion
             loop-serven-day-gift
             loop-sign
             loop-tasks
             loop-team-pos
             loop-water
             lose-count
             loss
             luck-score
             lucky-gashapon-progess
             lucky-gashapon-reward-item
             lv
             mail-id
             mail-id-list
             mail-info
             mail-list
             mail-status
             mail-status-list
             mail-type
             main-type
             manual
             manual-info
             manual-list
             map
             map-id
             map-idx
             map-index
             mark-boss
             mark-fight-score
             mark-quality
             mark-race
             mark-station
             mark-table-id
             max-buynum
             max-lev
             max-monster-index
             max-person-reward-num
             max-rank
             max-server-reward-num
             max-task-num
             maze-battle-history
             maze-bloods
             maze-bna
             maze-buff
             maze-buffs
             maze-coin
             maze-curr-status
             maze-helper
             maze-map
             maze-map-layer
             maze-map-node
             maze-monst-group
             maze-monster
             maze-monster-group
             maze-msg
             maze-refresh
             maze-scene
             maze-shop
             mdy
             mdy-get-rewards
             mdy-items
             mdy-list
             mdy-pets
             mdy-task-list
             mdy-tasks
             member-num
             members
             menual
             message
             min-lev
             mine-id
             mine-id-1
             mine-id-2
             money
             monster
             monster-buy-num-refresh-time
             monster-group
             monster-group-id
             monster-group-msg
             monster-id
             monster-index
             monster-info-list
             monster-item-refresh-time
             monster-num-refresh-time
             monster-type
             monsters
             month-card
             month-card-id
             month-card-info
             month-card-list
             month-recharge
             month-refresh-time
             month-sign-item
             mount
             mount-batch-add
             mount-id
             mount-info
             mp-inc-per-ms
             mp-rate
             msg
             msg-type
             multi-args
             my-rank-info
             mysterious-shop
             name
             name1
             name2
             need-resource-type
             need-review
             new-heros
             new-president
             new-season
             newer-id
             newer-name
             newer-title
             newer-user-id
             newer-user-name
             newer7-day-idx
             newer7-start-time
             newer7-tasks
             next-change-map-at
             next-cycle
             next-day-time-dic
             next-fresh-time
             next-refresh-stronghold-at
             next-start-time
             no-limit-times
             node-type
             nodes
             non-free-search-times
             normal-num-tody
             not-big-num
             not-purple-num
             notice
             npc-pos
             npc-rewards
             num
             nums
             off-day-at
             offline-info
             ol-time
             old-bloods
             old-president
             old-x
             old-y
             older-id
             older-name
             one-num
             online-dur-added
             online-dur-refresh
             op-add-battle-group
             op-add-battle-group-list
             op-add-battle-hero
             op-add-battle-hero-list
             op-add-char
             op-add-char-list
             op-add-char-to-station
             op-add-char-to-station-list
             op-all-inc-power
             op-all-inc-power-list
             op-app-attention
             op-app-attention-list
             op-app-moving-speed-scale
             op-app-moving-speed-scale-list
             op-cancel-attention
             op-cancel-attention-list
             op-cancel-moving-speed-scale
             op-cancel-moving-speed-scale-list
             op-change-station
             op-change-station-list
             op-char-id
             op-clear-scene
             op-clear-scene-list
             op-fill-boss
             op-fill-boss-list
             op-fill-guild-boss
             op-fill-guild-boss-list
             op-fill-loop-boss
             op-fill-loop-boss-list
             op-fill-maze-helper
             op-fill-maze-helper-list
             op-fill-monster-group
             op-fill-monster-group-list
             op-fill-pvp-robot
             op-fill-pvp-robot-list
             op-fill-ruin
             op-fill-ruin-list
             op-fill-theme-boss
             op-fill-theme-boss-list
             op-fill-tower
             op-fill-tower-list
             op-force-skill
             op-force-skill-list
             op-kill-all
             op-kill-all-list
             op-load-lev
             op-load-lev-list
             op-re-set-station
             op-re-set-station-list
             op-rem-char
             op-rem-char-list
             op-rem-station-char
             op-rem-station-char-list
             op-retarget
             op-retarget-list
             op-set-action-able
             op-set-action-able-list
             op-set-altitude-list
             op-set-altitude-msg
             op-set-camp-against
             op-set-camp-against-list
             op-set-char-position
             op-set-char-position-list
             op-set-forward-euler-list
             op-set-forward-euler-msg
             op-set-skill-auto
             op-set-skill-auto-list
             op-set-sp-auto-list
             op-trigger-sp-for-station
             op-trigger-sp-for-station-list
             op-trigger-sp-skill
             op-trigger-sp-skill-list
             open-friend-chat-list
             open-gridgroup-id
             open-id
             open-race
             open-time
             open-zone-id
             oprator-id
             opt
             opt-code
             opt-title
             opt-type
             opt-user-id
             opt-user-name
             option-hero-reward-item
             optional-hero-pool
             order-id
             order-seq
             order-type
             ordinary
             ordinary-skill-id
             org-hire-num
             org-put-time
             origin-msg
             other-pet-info-item
             other-side-battle-formation
             other-side-total-battle-info-item
             out-side-battle-formation
             out-side-total-battle-info-item
             pack
             pack-id
             pack-info
             packs
             page
             params
             part
             part1
             part2
             part3
             part4
             part5
             part6
             party-type
             pass-time
             path
             pay-id
             peer-id
             peer-level
             peer-name
             peer-present-num
             peer-score
             peer-score-add
             period-param
             period-type
             permanent-pack-purchased-info
             person-has-reward-num
             personal-content
             personal-num
             personl-part
             pet
             pet-coin
             pet-entry
             pet-force-coin
             pet-get-list
             pet-id
             pet-ids
             pet-info
             pet-infos
             pet-intelligence-coin
             pet-list
             pet-not-js-num
             pet-not-zs-num
             pet-reward-num
             pet-skill
             pet-skills
             pet-speed-coin
             pet-star
             pet-today-num
             pet-total-num
             pet-trans
             pet-v2
             pet-v2-info
             petequips
             pets
             platform
             play-num
             player
             player-base-info
             player-hero
             player-id
             player-info
             player-infos
             player-num
             player-operation
             player-title
             player-win
             players
             pool
             pool-id
             pools
             port
             pos
             pos-change
             pos-index
             pos-list
             pos-x
             pos-y
             position
             position-msg
             power
             power-count
             pray-pool-item
             pre-cal-gen-id
             present-num
             present-type
             president
             price
             primary-pos
             product-id
             profession
             progress
             progress-info
             progress-reward
             prop-usage
             property
             property-id
             property-list
             propnum
             public-part
             purchase-state
             purchased-count
             purchased-info
             put-hero
             put-time
             puzzle
             puzzle-exchagne-info
             puzzle-num
             puzzle-share-num
             puzzle-share-time
             puzzle-type
             puzzle-value
             pvp-robot-group-id
             quick
             quik-hook-fresh-time
             quik-hook-num
             r2is-data
             r2is-tpl
             race-active
             race-num-tody
             race1
             race1-num
             race2
             race2-num
             random-event
             random-seed
             rank
             rank-player
             rank-player-list
             rank-type
             rate
             re-set-msg
             re-set-station
             reach-time-list
             read
             receive-time
             received
             received-limit
             received-times
             rechage-first-dict
             recharge
             recharge-cfg-id
             recharge-id
             recharge-type
             record-msg
             records
             recover-add-items
             recover-del-items
             recv-applys
             recv-beast-id
             recv-head
             recv-head-url
             recv-id
             recv-name
             recv-params
             recv-server-id
             recv-server-name
             recv-type
             recv-uid
             recv-user-id
             recve-time
             recvers
             red-open-list
             red-pack-cfg-id
             red-pack-detail
             red-pack-id
             red-pack-recver
             red-pack-summary
             red-pack-type
             red-point-types
             redpoint-list
             redpoint-set
             redpoint-unset
             refresh
             refresh-num
             refresh-race
             refresh-race-time
             refresh-time
             refreshed-map
             rem-char
             rem-char-msg
             rem-station-char
             remain-times
             rename-num
             reply-user-id
             reply-user-name
             reply-user-title
             report-id
             require-items
             res-num
             reset-time
             resource
             resource-info
             resource-list
             result
             retarget-msg
             reward
             reward-all
             reward-boss-score
             reward-buff
             reward-buffs
             reward-contribute
             reward-exp
             reward-from
             reward-gold
             reward-hero
             reward-hour
             reward-id
             reward-idx
             reward-index
             reward-item
             reward-keep-time
             reward-link
             reward-list
             reward-num
             reward-order-maze-coin
             reward-order-task-coin
             reward-pet
             reward-pool-type
             reward-rate
             reward-refresh-time
             reward-res
             reward-resource
             reward-seconds
             reward-stat
             reward-task
             reward-time
             reward-times
             reward-treasure-id
             rewards
             rh1
             robot
             robot-cfg-id
             robot-island
             robot-msg
             room
             room-id
             room-info
             room-item
             rooms
             roulette-record
             roulette-reward
             roulette-score
             roulettes
             rp-arena-battle-valid
             rp-battle-valid
             rp-team-input
             ruin-id
             ruin-msg
             scale-count
             scene
             scene-block
             schedule-id
             schedule-item-id
             schedules
             score
             score-add
             score-time
             score1
             score2
             sd-buy-num
             sd-num
             season-end-time
             season-is-end
             season-no
             season-start-time
             select-able-guide-group-10040-target
             select-able-guide-group-10041-target
             select-able-guide-group-1086-target
             select-able-guide-group-1088-target
             select-buff
             select-buffs
             select-helper-list
             selected-buff-id
             self
             self-chests
             self-id
             self-monsters
             self-pet-info-item
             self-team
             self-val
             sell
             seller
             seller-help-times
             seller-id
             seller-item
             sellers
             send-applys
             send-beast-id
             send-head
             send-head-url
             send-name
             send-server-id
             send-server-name
             send-time
             send-uid
             send-user-id
             sender-head
             sender-head-frame
             sender-head-url
             sender-id
             sender-name
             sender-server-id
             senior-arena-coin
             server-has-reward-num
             server-id
             server-items
             server-name
             server-start-time
             server-time
             server-time-zone
             setting
             seven-day-coin
             share-type
             share-user-id
             ship-buy-num
             ship-buy-reward-num
             ship-buy-reward-time
             ship-buy-rewrd-num
             ship-buy-time
             ship-buys
             ship-end-time
             ship-flag
             ship-num
             ship-reward-id
             shop
             shop-buy-item
             shop-config
             shop-config-list
             shop-id
             shop-info
             shop-item
             shop-item-id
             shop-item-list
             shop-name
             shop-type
             shops
             show-level
             show-time
             sign-index
             sign-today
             signed-num
             signed-num-1
             signed-num-2
             signed-num-3
             signed-type
             single-friendship-num-tody
             single-normal-num-tody
             single-sale
             skil-list
             skill
             skill-auto-setting
             skill-exp
             skill-gen-id
             skill-id
             skill-lev
             skill-trigger-msg
             skill-type
             skip-battle
             sl-cd-time
             sl-get
             sl-share
             sl-type
             slot
             slot-cfg1
             slot-cfg2
             slot-cfg3
             slot-coin1
             slot-coin2
             slot-coin3
             slot-index
             slot-time1
             slot-time2
             slot-time3
             slots
             soul-id
             soul-lev
             soul-level
             soul-setting-dic
             source
             source-table
             sp-eff-able
             sp-skill-id
             special-event
             spring-count
             sprite-point
             src
             src-id
             src-index
             stage
             star
             star-count
             star-entry
             star-hero
             star-refresh-items
             start
             start-at
             start-task-info
             start-time
             start-week
             statement
             station
             station-a
             station-b
             station-euler
             station-msg
             station-sp-list
             station-type
             station-x
             station-y
             station-z
             stats
             statu
             status
             step
             store
             store-size
             story-record-dict
             string-bool-dict-vo
             string-int32-dict-vo
             stronghold-id
             sub-type
             suffer-able-count-arr
             suffer-def-mp-inc-rate
             suffered-dmg
             sum-count
             summary
             summary-list
             swing
             swing-id
             swing-info
             swings
             sys-open-time
             system-id-list
             t2i-data
             t2is-tpl
             table
             tag-list
             target
             target-char-id
             target-event-type
             target-head
             target-head-frame
             target-head-url
             target-id
             target-island-score
             target-islands
             target-level
             target-puzzle-type
             target-station
             target-team
             target-user-id
             target-user-name
             target-valid-time
             task
             task-active-reward-serial
             task-archive
             task-cfg-id
             task-id
             task-id-index
             task-id1
             task-id2
             task-list
             task-num
             task-progress
             task-serial
             task-type
             tasks
             tasks-serial
             tasks-stat
             team-exp
             team-lev
             team-level
             team-num
             team-pos
             team-type
             team-types
             tem-num
             temp-exp
             theme-boss-cfg-id
             theme-boss-msg
             theme-pack
             thread-start-time
             thread-tasks
             tid
             tie-info
             tili-buy-num
             time
             time-free-camp-id
             time-limit-camp-id
             times
             title
             today
             today-boss-free-times
             today-boss-pay-times
             today-bought
             today-buy-times
             today-can-receive
             today-chest-times
             today-draw-count
             today-free-num
             today-free-time
             today-item-num
             today-monster-buy-num
             today-monster-num
             today-monster-times
             today-usage-times
             tody-num
             tody-single-num
             token
             token-flag
             tool-id
             tool-id-1
             tool-id-2
             total-exp-level
             total-manual-score
             total-num
             tower-all-cur-star
             tower-all-floor
             tower-all-floor-time
             tower-all-level
             tower-all-star
             tower-devil-cur-star
             tower-devil-floor
             tower-devil-floor-time
             tower-devil-level
             tower-devil-star
             tower-human-cur-star
             tower-human-floor
             tower-human-floor-time
             tower-human-level
             tower-human-star
             tower-id
             tower-level
             tower-msg
             tower-record
             tower-rewards
             tower-spirite-level
             tower-spirite-star
             tower-sprite-cur-star
             tower-sprite-floor
             tower-sprite-floor-time
             tower-sprite-star
             tower-type
             trace-index
             train
             train-property
             train-time
             train-type
             trans
             trans-num
             transform
             trigger-msg
             trigger-sp-for-station
             trigger-sp-skill
             type
             uid
             uid1
             uid2
             uint-bool-dict-vo
             unlock-end
             unlock-start
             update-eqp-id
             usage-times
             use
             use-free-num
             use-id-list
             use-num-list
             use-pets
             user
             user-data
             user-data-vo
             user-head
             user-head-frame
             user-head-url
             user-help-times
             user-id
             user-id-list
             user-lev
             user-name
             user-title
             user-title-id
             username
             users
             usr-info-list
             val
             valid
             value
             value1
             value2
             vip-exp
             vip-gif-list
             vip-lev
             vip-level
             wait-entries
             wait-entry
             week-active
             week-active-rewards
             week-activity-point
             week-archives
             week-refresh-time
             week-tasks
             week-tasks-refresh-time
             weekend-day
             weekend-day-int-to-keyword
             weekend-day-keyword-to-int
             weekend-party-gift
             weekend-party-gift-status
             weekend-party-gift-status-int-to-keyword
             weekend-party-gift-status-keyword-to-int
             win-camp
             wood
             world-boss
             world-boss-blood
             world-boss-id
             world-boss-player
             x
             x1
             x2
             xs-id
             y
             y1
             y2
             z
             zan
             zan-info
             zans
             zone-id))

(cl:in-package "CL-PROTOBUFS.GAME-RPC")

(cl:export '(call-pre-battle-push
             pre-battle-push-impl
             call-pre-battle-valid
             pre-battle-valid-impl
             call-battle-valid
             battle-valid-impl))
