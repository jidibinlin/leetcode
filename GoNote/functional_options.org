#+OPTIONS: author:nil ^:{}
#+HUGO_BASE_DIR: ~/Documents/myblog
#+HUGO_SECTION: post/2022/03
#+HUGO_CUSTOM_FRONT_MATTER: :toc true :mathjax true :author jidibinlin
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2022-03-30 Wed 22:59]
#+TITLE: go函数选项解决go没用冲在及默认参数的问题
#+HUGO_TAGS: go functionalOptions
#+HUGO_CATEGORIES: go

* Functional Options
+ go语言的函数没有重载以及默认参数的功能，这个时候生成一个i对象会变得极其麻烦
  #+begin_src go
    type Person struct{
        Name string
        Age  int
        Country string
        Gender  string
        Height  string
        Address string
    }
    func main(){
        person :=Person{
            Name:"张三",
            Age: -1，
            Country: "China",
            Gender: "Male",
            Height: "-1",
            Address: "unknown",
        }
    }
  #+end_src

+ 我们可以使用函数式选项来解决这一问题。
  #+begin_src go
    type Person struct {
        Name    string
        Age     int
        Country string
        Gender  string
        Height  string
        Address string
    }

    // 将func(*Person)这种类型的函数简化命名
    type per func(*Person)

    func Country(country string) per {
        return func(person *Person) {
            person.Country = country
        }
    }

    func Gender(gender string) per{
        return func(person *Person){
            person.Gender = gender
        }
    }

    func Gender(gender string) per{
        return func(person *Person){
            person.Gender = gender
        }
    }

    func Address(address string) per{
        return func(person *Person){
            person.Address = address
        }
    }

    // NewPerson ...
    func NewPerson(name string,ops ...per) *Person {
        person := &Person{
            Name: name,
            Age: -1,
            Country: "China",
            Gender: "Male",
            Height: 0,
            Address: "unknown",
        }

        for _,op:= range ops {
            op(person)
        }
        return person
    }
  #+end_src

+ 用法：
   #+begin_src go
     package main

     import (
         "fmt"
         op "studygo/pattern/functionOptions"
     )

     // main ...
     func main() {
         person1 := op.NewPerson("zhangsan")
         fmt.Println(person1)
         person2 := op.NewPerson("Marry", op.Gender("Female"), op.Country("Japan"))
         fmt.Println(person2)
     }
   #+end_src
